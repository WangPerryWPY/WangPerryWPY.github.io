<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PerryWang🍎博客</title>
  
  <subtitle>分享软件开发中学到的点滴知识</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-04T06:00:59.029Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>PerryWang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉树的层序遍历</title>
    <link href="http://yoursite.com/2019/07/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/07/04/二叉树的层序遍历/</id>
    <published>2019-07-04T05:59:28.000Z</published>
    <updated>2019-07-04T06:00:59.029Z</updated>
    
    <content type="html"><![CDATA[<ul><li>层序遍历即从一棵树的每一层由上到下开始依次从左到右遍历输出</li><li>从上面一句话的原理不难看出这就是一个FIFO算法，也就是一个基本的先进先出队列，因此我们考虑调用STL的queue</li></ul><h3 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; Node, *Tree;</span><br></pre></td></tr></table></figure><h3 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;Tree&gt; Q;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">Q.push(T);</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">Tree tmp = Q.front();</span><br><span class="line">Q.pop();</span><br><span class="line">Visit(tmp-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;lchild)</span><br><span class="line">Q.push(tmp-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span>(tmp-&gt;rchild)</span><br><span class="line">Q.push(tmp-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;层序遍历即从一棵树的每一层由上到下开始依次从左到右遍历输出&lt;/li&gt;
&lt;li&gt;从上面一句话的原理不难看出这就是一个FIFO算法，也就是一个基本的先进先出队列，因此我们考虑调用STL的queue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;数据结构：&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>二叉树遍历的递归与非递归的实现</title>
    <link href="http://yoursite.com/2019/07/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%9A%84%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/04/二叉树遍历的递归与非递归的实现/</id>
    <published>2019-07-04T05:57:20.000Z</published>
    <updated>2019-07-04T06:01:11.400Z</updated>
    
    <content type="html"><![CDATA[<ul><li>有句话说得好，一切递归皆可用栈来实现。关键是理解好递归以及栈的基本原理。</li><li>这里以最为典型的中序遍历为例，其他的实现类似</li><li>直接调用c++STL中的stack</li><li>树的知识点用到大量的递归知识，建议大家不太理解的去找一下典型二叉树的例子然后一一步的去遍历尝试一下算法</li></ul><h3 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; Node, *Tree;</span><br></pre></td></tr></table></figure><h3 id="中序遍历的递归实现："><a href="#中序遍历的递归实现：" class="headerlink" title="中序遍历的递归实现："></a>中序遍历的递归实现：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T) &#123;</span><br><span class="line">InOrderTraverse(T-&gt;lchild,Visit);</span><br><span class="line">Visit(T-&gt;data);</span><br><span class="line">InOrderTraverse(T-&gt;rchild,Visit);</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历的非递归实现："><a href="#中序遍历的非递归实现：" class="headerlink" title="中序遍历的非递归实现："></a>中序遍历的非递归实现：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse2</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;Node*&gt; S;</span><br><span class="line">Tree p;</span><br><span class="line">p = T;</span><br><span class="line">S.push(p);</span><br><span class="line"><span class="keyword">while</span> (p-&gt;lchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">S.push(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!S.empty()) &#123;</span><br><span class="line">p = S.top();</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line">S.pop();</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">p=p-&gt;rchild;</span><br><span class="line">S.push(p);</span><br><span class="line"><span class="keyword">while</span> (p-&gt;lchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">S.push(p);</span><br><span class="line">&#125;            </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;有句话说得好，一切递归皆可用栈来实现。关键是理解好递归以及栈的基本原理。&lt;/li&gt;
&lt;li&gt;这里以最为典型的中序遍历为例，其他的实现类似&lt;/li&gt;
&lt;li&gt;直接调用c++STL中的stack&lt;/li&gt;
&lt;li&gt;树的知识点用到大量的递归知识，建议大家不太理解的去找
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c语言实现稀疏矩阵</title>
    <link href="http://yoursite.com/2019/07/04/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
    <id>http://yoursite.com/2019/07/04/c语言实现稀疏矩阵/</id>
    <published>2019-07-04T05:55:26.000Z</published>
    <updated>2019-07-04T05:56:09.978Z</updated>
    
    <content type="html"><![CDATA[<ul><li>主要实现的难点在于稀疏矩阵的转置以及矩阵乘法。</li><li>对用到的数据结构定义不懂的可参考严蔚敏老师的数据结构书籍，这里讲严老师讲的两种数据结构<em>三元组结构</em> 和<em>行逻辑结构</em> 整合到一起。</li><li>稀疏矩阵是线性结构中比较难的一块知识点，不懂的建议去b站看看严老师的视频。</li><li>实现环境：linux<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i, j; <span class="comment">//行坐标，列坐标</span></span><br><span class="line">Elem e; <span class="comment">//元素值</span></span><br><span class="line">&#125;Triple;<span class="comment">//三元组（i,j,e）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Triple data[MAXSIZE]; </span><br><span class="line"><span class="keyword">int</span> rpos[MAXRC];</span><br><span class="line"><span class="keyword">int</span> *num;</span><br><span class="line"><span class="keyword">int</span> *cpot;</span><br><span class="line"><span class="keyword">int</span> mu, nu, tu; <span class="comment">//总行数，总列数，非零元素总数</span></span><br><span class="line">&#125;Matrix;</span><br></pre></td></tr></table></figure><ol><li>其中rpos表示每行第一个元素在data中的位置</li><li>num表示每一列元素的个数</li><li>cpot表示每一列第一个元素在转置矩阵中应处的位置</li></ol><h3 id="Matrix-h"><a href="#Matrix-h" class="headerlink" title="Matrix.h"></a>Matrix.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MATRIX_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATRIX_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 12500</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXRC 500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Elem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">Elem e;</span><br><span class="line">&#125;Triple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Triple data[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> rpos[MAXRC];</span><br><span class="line"><span class="keyword">int</span> *num;</span><br><span class="line"><span class="keyword">int</span> *cpot;</span><br><span class="line"><span class="keyword">int</span> mu, nu, tu;</span><br><span class="line">&#125;Matrix;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*create a matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMatrix</span><span class="params">(Matrix *M)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*destroy the matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyMatrix</span><span class="params">(Matrix *M)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMatrix</span><span class="params">(Matrix M)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the matrix transpose of a given matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TransposeMatrix</span><span class="params">(Matrix M, Matrix *T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*take the product of the sparse matrix Q=M*N*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MultiMatrix</span><span class="params">(Matrix M, Matrix N, Matrix *T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Matrix-c"><a href="#Matrix-c" class="headerlink" title="Matrix.c"></a>Matrix.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Matrix.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">/*create a matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMatrix</span><span class="params">(Matrix *M)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n, t;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;m, &amp;n, &amp;t);</span><br><span class="line"><span class="comment">//scanf("%d", &amp;n);</span></span><br><span class="line"><span class="comment">//scanf("%d", &amp;t);</span></span><br><span class="line">M-&gt;mu = m;</span><br><span class="line">M-&gt;nu = n;</span><br><span class="line">M-&gt;tu = t;</span><br><span class="line"><span class="comment">//printf("%d\n", M-&gt;tu);</span></span><br><span class="line">Triple T;</span><br><span class="line"><span class="keyword">bool</span> k;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;T.i, &amp;T.j, &amp;T.e);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (T.i &lt; <span class="number">1</span> || T.i &gt; M-&gt;mu || T.j &lt; <span class="number">1</span> || T.j &gt; M-&gt;nu) &#123;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"wrong input !\nplease enter again! \n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;T.i, &amp;T.j, &amp;T.e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(k);</span><br><span class="line">M-&gt;data[<span class="number">0</span>] = T;</span><br><span class="line"><span class="comment">//    printf("%d\n",M-&gt;data[0].i);</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; M-&gt;tu; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;T.i, &amp;T.j, &amp;T.e);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (T.i &lt; <span class="number">1</span> || T.i &gt; M-&gt;mu || T.j &lt; <span class="number">1</span> || T.j &gt; M-&gt;nu || T.i &lt; M-&gt;data[i<span class="number">-1</span>].i || (T.i == M-&gt;data[i<span class="number">-1</span>].i &amp;&amp; T.j &lt;= M-&gt;data[i<span class="number">-1</span>].j)) &#123;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"wrong input !\nplease enter again! \n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;T.i, &amp;T.j, &amp;T.e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(k);</span><br><span class="line">M-&gt;data[i] = T;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">M-&gt;num = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(M-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">M-&gt;cpot = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(M-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">memset</span>(M-&gt;num, <span class="number">0x0</span>, M-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">memset</span>(M-&gt;cpot, <span class="number">0x0</span>, M-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M-&gt;tu; i++) &#123;</span><br><span class="line">M-&gt;num[M-&gt;data[i].j - <span class="number">1</span>]++;    </span><br><span class="line">&#125;</span><br><span class="line">M-&gt;cpot[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; M-&gt;nu; i++) &#123;</span><br><span class="line">M-&gt;cpot[i] = M-&gt;cpot[i<span class="number">-1</span>] + M-&gt;num[i<span class="number">-1</span>];    </span><br><span class="line">&#125;</span><br><span class="line">M-&gt;rpos[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> Num[M-&gt;mu];</span><br><span class="line"><span class="built_in">memset</span>(Num, <span class="number">0x0</span>, M-&gt;mu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; M-&gt;tu; i++) &#123;</span><br><span class="line">Num[M-&gt;data[i].i<span class="number">-1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(i = 1 ; i &lt; M-&gt;mu ; i++) &#123;</span></span><br><span class="line"><span class="comment">printf("%d\n",Num[i-1]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt; M-&gt;mu ; i++) &#123;</span><br><span class="line">M-&gt;rpos[i] = M-&gt;rpos[i<span class="number">-1</span>] + Num[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for (i = 1; i &lt; M-&gt;tu; i++) &#123;</span></span><br><span class="line"><span class="comment">if (M-&gt;data[i].i &gt; M-&gt;data[i-1].i) &#123;</span></span><br><span class="line"><span class="comment">M-&gt;rpos[M-&gt;data[i].i-1] = i + 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*for (i = 1; i &lt; M-&gt;tu; i++) &#123;</span></span><br><span class="line"><span class="comment">if (M-&gt;data[i].i &gt; M-&gt;data[i-1].i+1) &#123;</span></span><br><span class="line"><span class="comment">int m = M-&gt;data[i].i - M-&gt;data[i-1].i;</span></span><br><span class="line"><span class="comment">for (int a = M-&gt;data[i-1].i + 1; a &lt; M-&gt;data[i].i; i++) &#123;</span></span><br><span class="line"><span class="comment">M-&gt;rpos[a-1] = M-&gt;rpos[M-&gt;data[i-1].i-1];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*destroy the matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyMatrix</span><span class="params">(Matrix *M)</span> </span>&#123;</span><br><span class="line">M-&gt;mu = <span class="number">0</span>;</span><br><span class="line">M-&gt;tu = <span class="number">0</span>;</span><br><span class="line">M-&gt;nu = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(M-&gt;num);</span><br><span class="line"><span class="built_in">free</span>(M-&gt;cpot);            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMatrix</span><span class="params">(Matrix M)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d行%d列%d个非零元素。\n"</span>,M.mu,M.nu,M.tu);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"行  列  元素值\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M.tu;i++)</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%2d%4d%8d\n"</span>,M.data[i].i,M.data[i].j,M.data[i].e);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=M.mu;i++)</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d行的第一个非零元素是本矩阵第%d个元素\n"</span>,i,M.rpos[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=M.nu;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d列的元素个数为%d\n"</span>,i,M.num[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=M.nu;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d列的第一个元素的位置是%d\n"</span>,i,M.cpot[i<span class="number">-1</span>]);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the matrix transpose of a given matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TransposeMatrix</span><span class="params">(Matrix M, Matrix *T)</span> </span>&#123;</span><br><span class="line">Matrix A;</span><br><span class="line">A = M;</span><br><span class="line">T-&gt;nu = A.mu;</span><br><span class="line">T-&gt;mu = A.nu;</span><br><span class="line">T-&gt;tu = A.tu;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T-&gt;tu; i++) &#123;</span><br><span class="line">T-&gt;data[A.cpot[A.data[i].j<span class="number">-1</span>]<span class="number">-1</span>].i = A.data[i].j;</span><br><span class="line">T-&gt;data[A.cpot[A.data[i].j<span class="number">-1</span>]<span class="number">-1</span>].j = A.data[i].i;</span><br><span class="line">T-&gt;data[A.cpot[A.data[i].j<span class="number">-1</span>]<span class="number">-1</span>].e = A.data[i].e;</span><br><span class="line">A.cpot[A.data[i].j<span class="number">-1</span>]++;    </span><br><span class="line">&#125;</span><br><span class="line">T-&gt;num = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">T-&gt;cpot = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">memset</span>(T-&gt;num, <span class="number">0x0</span>, T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">memset</span>(T-&gt;cpot, <span class="number">0x0</span>, T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; T-&gt;tu; i++) &#123;</span><br><span class="line">T-&gt;num[T-&gt;data[i].j - <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">T-&gt;cpot[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; T-&gt;nu; i++) &#123;</span><br><span class="line">T-&gt;cpot[i] = T-&gt;cpot[i<span class="number">-1</span>] + T-&gt;num[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">T-&gt;rpos[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> Num[T-&gt;mu];</span><br><span class="line"><span class="built_in">memset</span>(Num, <span class="number">0x0</span>, T-&gt;mu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; T-&gt;tu; i++) &#123;</span><br><span class="line">Num[T-&gt;data[i].i<span class="number">-1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*take the product of the sparse matrix Q=M*N*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MultiMatrix</span><span class="params">(Matrix M, Matrix N, Matrix *T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (M.nu != N.mu)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">T-&gt;mu = M.mu;</span><br><span class="line">T-&gt;nu = N.nu;</span><br><span class="line">T-&gt;tu = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (M.tu*N.tu != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> arow = <span class="number">1</span>; arow &lt;= M.mu; arow++) &#123;    </span><br><span class="line"><span class="keyword">int</span> ctemp[N.nu];</span><br><span class="line"><span class="built_in">memset</span>(ctemp, <span class="number">0x0</span>, N.nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">T-&gt;rpos[arow<span class="number">-1</span>] = T-&gt;tu+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(arow &lt; M.mu)</span><br><span class="line">tp = M.rpos[arow];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">tp = M.tu + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p = M.rpos[arow<span class="number">-1</span>]; p &lt; tp; p++) &#123;</span><br><span class="line"><span class="keyword">int</span> t = M.data[p<span class="number">-1</span>].j;</span><br><span class="line"><span class="keyword">int</span> pause;</span><br><span class="line"><span class="keyword">if</span> (t &lt; N.mu)</span><br><span class="line">pause = N.rpos[t];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pause = N.tu + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = N.rpos[t<span class="number">-1</span>]; m &lt; pause; m++) &#123;</span><br><span class="line">ctemp[N.data[m<span class="number">-1</span>].j<span class="number">-1</span>] += M.data[p<span class="number">-1</span>].e*N.data[m<span class="number">-1</span>].e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N.nu; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (ctemp[i] != <span class="number">0</span>) &#123;</span><br><span class="line">T-&gt;data[T-&gt;tu].i = arow;</span><br><span class="line">T-&gt;data[T-&gt;tu].j = i + <span class="number">1</span>;</span><br><span class="line">T-&gt;data[T-&gt;tu].e = ctemp[i];</span><br><span class="line">T-&gt;tu++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">T-&gt;num = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">T-&gt;cpot = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">memset</span>(T-&gt;num, <span class="number">0x0</span>, T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">memset</span>(T-&gt;cpot, <span class="number">0x0</span>, T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T-&gt;tu; i++) &#123;</span><br><span class="line">T-&gt;num[T-&gt;data[i].j - <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">T-&gt;cpot[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; T-&gt;nu; i++) &#123;</span><br><span class="line">T-&gt;cpot[i] = T-&gt;cpot[i<span class="number">-1</span>] + T-&gt;num[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Matrix.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">Matrix M;</span><br><span class="line">Matrix N;</span><br><span class="line">Matrix A;    </span><br><span class="line">CreateMatrix(&amp;M);</span><br><span class="line">CreateMatrix(&amp;N);</span><br><span class="line">PrintMatrix(M);</span><br><span class="line">PrintMatrix(N);</span><br><span class="line">TransposeMatrix(M,&amp;A);</span><br><span class="line">PrintMatrix(A);</span><br><span class="line">Matrix T;</span><br><span class="line">MultiMatrix(M,N,&amp;T);</span><br><span class="line">PrintMatrix(T);</span><br><span class="line">DestroyMatrix(&amp;A);</span><br><span class="line">DestroyMatrix(&amp;T);</span><br><span class="line">DestroyMatrix(&amp;M);</span><br><span class="line">DestroyMatrix(&amp;N);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">object = main.o Matrix.o</span><br><span class="line"></span><br><span class="line">test : <span class="variable">$(object)</span></span><br><span class="line">gcc -g -Wall -o test <span class="variable">$(object)</span></span><br><span class="line"></span><br><span class="line">main.o : Matrix.h</span><br><span class="line">Matrix.o : Matrix.h</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf *.o</span><br></pre></td></tr></table></figure><h2 id="运行检查："><a href="#运行检查：" class="headerlink" title="运行检查："></a>运行检查：</h2><h3 id="用于测试的矩阵："><a href="#用于测试的矩阵：" class="headerlink" title="用于测试的矩阵："></a>用于测试的矩阵：</h3><p>$$<br>{M=} \left[<br>\begin{matrix}<br>3 &amp; 0 &amp; 0 &amp; 5\<br>0&amp;-1 &amp; 0 &amp; 0 \<br>2 &amp; 0 &amp; 0 &amp; 0<br>\end{matrix}<br>\right] \tag{a}<br>$$<br>$$<br>{N=} \left[<br>\begin{matrix}<br>0 &amp; 2 \<br>1 &amp; 0  \<br>-2 &amp; 4 \<br>0 &amp; 0<br>\end{matrix}<br>\right] \tag{b}<br>$$</p><h4 id="M-data"><a href="#M-data" class="headerlink" title="M.data"></a>M.data</h4><table><thead><tr><th>i</th><th>j</th><th>e</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>3</td></tr><tr><td>1</td><td>4</td><td>5</td></tr><tr><td>2</td><td>2</td><td>-1</td></tr><tr><td>3</td><td>1</td><td>2</td></tr></tbody></table><h4 id="N-data"><a href="#N-data" class="headerlink" title="N.data"></a>N.data</h4><table><thead><tr><th>i</th><th>j</th><th>e</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2</td></tr><tr><td>2</td><td>1</td><td>1</td></tr><tr><td>3</td><td>1</td><td>-2</td></tr><tr><td>3</td><td>2</td><td>4</td></tr></tbody></table><h4 id="M-N结果："><a href="#M-N结果：" class="headerlink" title="M*N结果："></a>M*N结果：</h4><table><thead><tr><th>i</th><th>j</th><th>e</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>6</td></tr><tr><td>2</td><td>1</td><td>-1</td></tr><tr><td>3</td><td>2</td><td>4</td></tr></tbody></table><h4 id="输入文件input-txt"><a href="#输入文件input-txt" class="headerlink" title="输入文件input.txt"></a>输入文件input.txt</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span> -<span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span> -<span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="输出文件test-txt"><a href="#输出文件test-txt" class="headerlink" title="输出文件test.txt"></a>输出文件test.txt</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>行<span class="number">4</span>列<span class="number">4</span>个非零元素。</span><br><span class="line">行  列  元素值</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>       <span class="number">3</span></span><br><span class="line"><span class="number">1</span>   <span class="number">4</span>       <span class="number">5</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>      <span class="number">-1</span></span><br><span class="line"><span class="number">3</span>   <span class="number">1</span>       <span class="number">2</span></span><br><span class="line">第<span class="number">1</span>行的第一个非零元素是本矩阵第<span class="number">1</span>个元素</span><br><span class="line">第<span class="number">2</span>行的第一个非零元素是本矩阵第<span class="number">3</span>个元素</span><br><span class="line">第<span class="number">3</span>行的第一个非零元素是本矩阵第<span class="number">4</span>个元素</span><br><span class="line">第<span class="number">1</span>列的元素个数为<span class="number">2</span></span><br><span class="line">第<span class="number">2</span>列的元素个数为<span class="number">1</span></span><br><span class="line">第<span class="number">3</span>列的元素个数为<span class="number">0</span></span><br><span class="line">第<span class="number">4</span>列的元素个数为<span class="number">1</span></span><br><span class="line">第<span class="number">1</span>列的第一个元素的位置是<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>列的第一个元素的位置是<span class="number">3</span></span><br><span class="line">第<span class="number">3</span>列的第一个元素的位置是<span class="number">4</span></span><br><span class="line">第<span class="number">4</span>列的第一个元素的位置是<span class="number">4</span></span><br><span class="line"><span class="number">4</span>行<span class="number">2</span>列<span class="number">4</span>个非零元素。</span><br><span class="line">行  列  元素值</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>       <span class="number">2</span></span><br><span class="line"><span class="number">2</span>   <span class="number">1</span>       <span class="number">1</span></span><br><span class="line"><span class="number">3</span>   <span class="number">1</span>      <span class="number">-2</span></span><br><span class="line"><span class="number">3</span>   <span class="number">2</span>       <span class="number">4</span></span><br><span class="line">第<span class="number">1</span>行的第一个非零元素是本矩阵第<span class="number">1</span>个元素</span><br><span class="line">第<span class="number">2</span>行的第一个非零元素是本矩阵第<span class="number">2</span>个元素</span><br><span class="line">第<span class="number">3</span>行的第一个非零元素是本矩阵第<span class="number">3</span>个元素</span><br><span class="line">第<span class="number">4</span>行的第一个非零元素是本矩阵第<span class="number">5</span>个元素</span><br><span class="line">第<span class="number">1</span>列的元素个数为<span class="number">2</span></span><br><span class="line">第<span class="number">2</span>列的元素个数为<span class="number">2</span></span><br><span class="line">第<span class="number">1</span>列的第一个元素的位置是<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>列的第一个元素的位置是<span class="number">3</span></span><br><span class="line"><span class="number">4</span>行<span class="number">3</span>列<span class="number">4</span>个非零元素。</span><br><span class="line">行  列  元素值</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>       <span class="number">3</span></span><br><span class="line"><span class="number">1</span>   <span class="number">3</span>       <span class="number">2</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>      <span class="number">-1</span></span><br><span class="line"><span class="number">4</span>   <span class="number">1</span>       <span class="number">5</span></span><br><span class="line">第<span class="number">1</span>行的第一个非零元素是本矩阵第<span class="number">1</span>个元素</span><br><span class="line">第<span class="number">2</span>行的第一个非零元素是本矩阵第<span class="number">0</span>个元素</span><br><span class="line">第<span class="number">3</span>行的第一个非零元素是本矩阵第<span class="number">0</span>个元素</span><br><span class="line">第<span class="number">4</span>行的第一个非零元素是本矩阵第<span class="number">0</span>个元素</span><br><span class="line">第<span class="number">1</span>列的元素个数为<span class="number">2</span></span><br><span class="line">第<span class="number">2</span>列的元素个数为<span class="number">1</span></span><br><span class="line">第<span class="number">3</span>列的元素个数为<span class="number">1</span></span><br><span class="line">第<span class="number">1</span>列的第一个元素的位置是<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>列的第一个元素的位置是<span class="number">3</span></span><br><span class="line">第<span class="number">3</span>列的第一个元素的位置是<span class="number">4</span></span><br><span class="line"><span class="number">3</span>行<span class="number">2</span>列<span class="number">3</span>个非零元素。</span><br><span class="line">行  列  元素值</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>       <span class="number">6</span></span><br><span class="line"><span class="number">2</span>   <span class="number">1</span>      <span class="number">-1</span></span><br><span class="line"><span class="number">3</span>   <span class="number">2</span>       <span class="number">4</span></span><br><span class="line">第<span class="number">1</span>行的第一个非零元素是本矩阵第<span class="number">1</span>个元素</span><br><span class="line">第<span class="number">2</span>行的第一个非零元素是本矩阵第<span class="number">2</span>个元素</span><br><span class="line">第<span class="number">3</span>行的第一个非零元素是本矩阵第<span class="number">3</span>个元素</span><br><span class="line">第<span class="number">1</span>列的元素个数为<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>列的元素个数为<span class="number">2</span></span><br><span class="line">第<span class="number">1</span>列的第一个元素的位置是<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>列的第一个元素的位置是<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="linux运行程序确实舒服，直接命令行就可以读取文本"><a href="#linux运行程序确实舒服，直接命令行就可以读取文本" class="headerlink" title="linux运行程序确实舒服，直接命令行就可以读取文本"></a>linux运行程序确实舒服，直接命令行就可以读取文本</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">#运行makefile</span><br><span class="line">./test &lt; <span class="selector-tag">input</span><span class="selector-class">.txt</span> &gt; test.txt</span><br><span class="line">#运行生成的可执行文件test</span><br><span class="line">make clean</span><br><span class="line">#清理.o文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;主要实现的难点在于稀疏矩阵的转置以及矩阵乘法。&lt;/li&gt;
&lt;li&gt;对用到的数据结构定义不懂的可参考严蔚敏老师的数据结构书籍，这里讲严老师讲的两种数据结构&lt;em&gt;三元组结构&lt;/em&gt; 和&lt;em&gt;行逻辑结构&lt;/em&gt; 整合到一起。&lt;/li&gt;
&lt;li&gt;稀疏矩阵是线性结
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://yoursite.com/2019/07/04/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/04/KMP算法/</id>
    <published>2019-07-04T05:47:16.000Z</published>
    <updated>2019-07-04T05:47:38.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h2><ul><li>该算法的思路是设置两个i， j指针，依次遍历不等则回溯</li><li>算法思路简单但时间复杂度高达o(length1 * length2）</li></ul><h4 id="算法比较简单，因此直接看实现："><a href="#算法比较简单，因此直接看实现：" class="headerlink" title="算法比较简单，因此直接看实现："></a>算法比较简单，因此直接看实现：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len1 = S.length();</span><br><span class="line"><span class="keyword">int</span> len2 = T.length();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; <span class="comment">//set two pointers to S and T</span></span><br><span class="line"><span class="keyword">while</span> (i != len1 &amp;&amp; j != len2) &#123;</span><br><span class="line"><span class="keyword">if</span> (S[i] == T[j]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">i = i - j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == len2)</span><br><span class="line"><span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接下来看KMP的实现思路："><a href="#接下来看KMP的实现思路：" class="headerlink" title="接下来看KMP的实现思路："></a>接下来看KMP的实现思路：</h2><h3 id="next函数："><a href="#next函数：" class="headerlink" title="next函数："></a>next函数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(<span class="built_in">string</span> T, <span class="keyword">int</span> **next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = T.length();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">(*next)[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span> || T[i - <span class="number">1</span>] == T[j - <span class="number">1</span>]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">(*next)[i - <span class="number">1</span>] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j = (*next)[j - <span class="number">1</span>];    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP函数："><a href="#KMP函数：" class="headerlink" title="KMP函数："></a>KMP函数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index_KMP</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T, <span class="keyword">int</span> *next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len1 = S.length();</span><br><span class="line"><span class="keyword">int</span> len2 = T.length();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= len1 &amp;&amp; j &lt;= len2) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span> || S[i - <span class="number">1</span>] == T[j - <span class="number">1</span>]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j = next[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j - <span class="number">1</span> == len2)</span><br><span class="line"><span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改进后的index函数："><a href="#改进后的index函数：" class="headerlink" title="改进后的index函数："></a>改进后的index函数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_nextval</span><span class="params">(<span class="built_in">string</span> T, <span class="keyword">int</span> **next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = T.length();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">(*next)[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span> || T[i - <span class="number">1</span>] == T[j - <span class="number">1</span>]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">(*next)[i - <span class="number">1</span>] = j;</span><br><span class="line"><span class="keyword">if</span> (T[i - <span class="number">1</span>] == T[j - <span class="number">1</span>])</span><br><span class="line">(*next)[i - <span class="number">1</span>] = (*next)[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j = (*next)[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;朴素算法&quot;&gt;&lt;a href=&quot;#朴素算法&quot; class=&quot;headerlink&quot; title=&quot;朴素算法&quot;&gt;&lt;/a&gt;朴素算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;该算法的思路是设置两个i， j指针，依次遍历不等则回溯&lt;/li&gt;
&lt;li&gt;算法思路简单但时间复杂度高达o(len
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>c语言实现string &amp; 二级指针的用法a</title>
    <link href="http://yoursite.com/2019/07/04/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0string-%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E7%9A%84%E7%94%A8%E6%B3%95a/"/>
    <id>http://yoursite.com/2019/07/04/c语言实现string-二级指针的用法a/</id>
    <published>2019-07-04T05:44:30.000Z</published>
    <updated>2019-07-04T05:46:10.762Z</updated>
    
    <content type="html"><![CDATA[<ul><li>接口参考严蔚敏老师的数据结构课本</li><li>这个类bug de了好长时间，在于二级指针的使用（C语言学的不好用指针真的伤）</li><li>实现环境为linux</li></ul><h3 id="下面先讲一点关于二级指针的知识点"><a href="#下面先讲一点关于二级指针的知识点" class="headerlink" title="下面先讲一点关于二级指针的知识点"></a>下面先讲一点关于二级指针的知识点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span>** x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*x = <span class="string">"bbb"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *y = <span class="string">"aaa"</span>;</span><br><span class="line">change(&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,y);    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>看一下这个函数，其输出为bbb；这是正确的结果</strong></p><p><em>再看下面一个函数：</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span>* x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*x = <span class="string">"bbb"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *y = <span class="string">"aaa"</span>;</span><br><span class="line">change(y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,y);    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个函数的输出为aaa，结果不是我们想要的</strong></p><p>其实这个很容易理解，我们把char* 想象成string则二级指针则变成了string*，也就是指向字符串的一级指针</p><h2 id="下面接着看String的实现："><a href="#下面接着看String的实现：" class="headerlink" title="下面接着看String的实现："></a>下面接着看String的实现：</h2><h3 id="String-h"><a href="#String-h" class="headerlink" title="String.h"></a>String.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STRING_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRING_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> *ch;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125; String;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*generate a string whose value is equal to chars*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StrAssign</span><span class="params">(String *S, <span class="keyword">char</span> **chars)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the length of the string*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">Length</span><span class="params">(String S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*compare S1 and S2 and if S1 &gt; S2 return 1 else return 0*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Compare</span><span class="params">(String S1, String S2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*empty the string*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearString</span><span class="params">(String *S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*concat S1 and S2 and return the value using T*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Concat</span><span class="params">(String *S, String S1, String S2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return a substring of S whose length is len from the position of pos*/</span></span><br><span class="line"><span class="function">String <span class="title">SubString</span><span class="params">(String S, <span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the string*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(String S)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="String-c"><a href="#String-c" class="headerlink" title="String.c"></a>String.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"String.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StrAssign</span><span class="params">(String *S, <span class="keyword">char</span> **chars)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*    if(S-&gt;ch) &#123;</span></span><br><span class="line"><span class="comment">S-&gt;length = 0;</span></span><br><span class="line"><span class="comment">free(S-&gt;ch);</span></span><br><span class="line"><span class="comment">S-&gt;ch = NULL;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> *c;</span><br><span class="line"><span class="comment">//i = strlen(*chars);</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>, c = *chars; *c; i++, c++);</span><br><span class="line"><span class="comment">//    printf("%d\n",i);</span></span><br><span class="line"><span class="keyword">if</span> (!i) &#123;</span><br><span class="line">S-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">S-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">S-&gt;ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(i * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">S-&gt;ch[j] = (*chars)[j];</span><br><span class="line">&#125;</span><br><span class="line">S-&gt;length = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">Length</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*compare S1 and S2 and if S1 &gt; S2 return 1 else return 0*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Compare</span><span class="params">(String S1, String S2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; S1.length || i &lt; S2.length; i++, j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (S1.ch[i] &gt; S2.ch[j]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (S1.ch[i] &lt; S2.ch[j]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(S1.length &gt; S2.length) </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*empty the string*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearString</span><span class="params">(String *S)</span> </span>&#123;</span><br><span class="line">S-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(S-&gt;ch);</span><br><span class="line">S-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*concat S1 and S2 and return the value using T*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Concat</span><span class="params">(String *S, String S1, String S2)</span> </span>&#123;</span><br><span class="line">S-&gt;ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((S1.length + S2.length) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">S-&gt;length = S1.length + S2.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S1.length; i++) &#123;</span><br><span class="line">S-&gt;ch[i] = S1.ch[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S2.length; i++) &#123;</span><br><span class="line">S-&gt;ch[i + S1.length] = S2.ch[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return a substring of S whose length is len from the position of pos*/</span></span><br><span class="line"><span class="function">String <span class="title">SubString</span><span class="params">(String S, <span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">String T;</span><br><span class="line">T.length = len;</span><br><span class="line">T.ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos - <span class="number">1</span>; i &lt; pos - <span class="number">1</span> + len; i++) &#123;</span><br><span class="line">T.ch[i - pos + <span class="number">1</span>] = S.ch[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.ch == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"null"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, S.ch[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"String.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">String S, S1, S2;</span><br><span class="line"><span class="keyword">char</span> *m = <span class="string">"ef"</span>;</span><br><span class="line">StrAssign(&amp;S1,&amp;m);</span><br><span class="line"><span class="comment">//printf("%d\n",S1.length);</span></span><br><span class="line"><span class="keyword">char</span> *a = <span class="string">"abced"</span>;</span><br><span class="line">StrAssign(&amp;S, &amp;a);</span><br><span class="line">Traverse(S);</span><br><span class="line"><span class="comment">//printf("%d\n",S.length);</span></span><br><span class="line"><span class="comment">//printf("%p\n",m);</span></span><br><span class="line"><span class="comment">//printf("%p\n",a);</span></span><br><span class="line">Traverse(S1);</span><br><span class="line">Concat(&amp;S2, S, S1);</span><br><span class="line">Traverse(S2);</span><br><span class="line">String s = SubString(S2, <span class="number">2</span>, <span class="number">3</span>);    </span><br><span class="line">Traverse(s);</span><br><span class="line"><span class="keyword">if</span> (Compare(S1, S2))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"S1 &gt; S2\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"S1 &lt;= S2\n"</span>);</span><br><span class="line">ClearString(&amp;S);</span><br><span class="line">ClearString(&amp;s);</span><br><span class="line">ClearString(&amp;S1);</span><br><span class="line">ClearString(&amp;S2);</span><br><span class="line">Traverse(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">object = main.o String.o</span><br><span class="line"></span><br><span class="line">test : <span class="variable">$(object)</span></span><br><span class="line">gcc -g -Wall -o test <span class="variable">$(object)</span></span><br><span class="line"></span><br><span class="line">main.o : String.h</span><br><span class="line">String.o : String.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf *.o</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;接口参考严蔚敏老师的数据结构课本&lt;/li&gt;
&lt;li&gt;这个类bug de了好长时间，在于二级指针的使用（C语言学的不好用指针真的伤）&lt;/li&gt;
&lt;li&gt;实现环境为linux&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;下面先讲一点关于二级指针的知识点&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>c语言实现栈的动态顺序存储</title>
    <link href="http://yoursite.com/2019/07/04/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%A0%88%E7%9A%84%E5%8A%A8%E6%80%81%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2019/07/04/c语言实现栈的动态顺序存储/</id>
    <published>2019-07-04T05:42:29.000Z</published>
    <updated>2019-07-04T05:43:37.014Z</updated>
    
    <content type="html"><![CDATA[<ul><li>接口参考严蔚敏老师的数据结构课本</li><li>实现环境为linux</li></ul><h3 id="Stack-h"><a href="#Stack-h" class="headerlink" title="Stack.h"></a>Stack.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ======== ADT the representation of the STACK(Sequential Storage) ======== //</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Elem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Elem *base;</span><br><span class="line">Elem *top;</span><br><span class="line"><span class="keyword">int</span> stacksize;</span><br><span class="line"><span class="comment">//int length;</span></span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Initialize the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(Stack *S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//destroy the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyStack</span><span class="params">(Stack *S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//clear the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearStack</span><span class="params">(Stack *S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//determine if the stack is empty</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return the length of the stack</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">Length</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return the top of the stack</span></span><br><span class="line"><span class="function">Elem <span class="title">Top</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//push e on the stack</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(Stack *S, Elem e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pop the stack</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(Stack *S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Stack-c"><a href="#Stack-c" class="headerlink" title="Stack.c"></a>Stack.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Stack.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//Initialize the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(Stack *S)</span> </span>&#123;</span><br><span class="line">S-&gt;base = (Elem*)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="keyword">sizeof</span>(Elem));</span><br><span class="line"><span class="built_in">memset</span>(S-&gt;base, <span class="number">0</span>, STACK_INIT_SIZE * <span class="keyword">sizeof</span>(Elem));    </span><br><span class="line"><span class="keyword">if</span> (!S-&gt;base)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">S-&gt;top = S-&gt;base;</span><br><span class="line">S-&gt;stacksize = STACK_INIT_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//destroy the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyStack</span><span class="params">(Stack *S)</span> </span>&#123;</span><br><span class="line"><span class="built_in">free</span>(S-&gt;base);</span><br><span class="line">S-&gt;stacksize = <span class="number">0</span>;</span><br><span class="line">S-&gt;base = <span class="literal">NULL</span>;</span><br><span class="line">S-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//clear the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearStack</span><span class="params">(Stack *S)</span> </span>&#123;</span><br><span class="line">S-&gt;top = S-&gt;base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//determine if the stack is empty</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.top == S.base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return the length of the stack</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">Length</span><span class="params">(Stack S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.top - S.base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return the top of the stack</span></span><br><span class="line"><span class="function">Elem <span class="title">Top</span><span class="params">(Stack S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(S.top - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//push e on the stack</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(Stack *S, Elem e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S-&gt;top - S-&gt;base + <span class="number">1</span> &gt;= S-&gt;stacksize) &#123;</span><br><span class="line">S-&gt;base = (Elem*)<span class="built_in">realloc</span>(S-&gt;base, (STACK_INIT_SIZE + STACKINCREMENT) * <span class="keyword">sizeof</span>(Elem));</span><br><span class="line">S-&gt;stacksize += STACKINCREMENT;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"increment\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!S-&gt;base)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"></span><br><span class="line">*(S-&gt;top) = e;</span><br><span class="line">S-&gt;top++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//pop the stack</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(Stack *S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (IsEmpty(*S)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fail\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">&#125;</span><br><span class="line">S-&gt;top--;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Stack.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">Stack S1;</span><br><span class="line">InitStack(&amp;S1);</span><br><span class="line">Push(&amp;S1,<span class="number">1</span>);</span><br><span class="line">Push(&amp;S1,<span class="number">2</span>);</span><br><span class="line">Push(&amp;S1,<span class="number">3</span>);</span><br><span class="line">Push(&amp;S1,<span class="number">4</span>);</span><br><span class="line">Push(&amp;S1,<span class="number">5</span>);</span><br><span class="line">Stack S2;</span><br><span class="line">InitStack(&amp;S2);</span><br><span class="line">Push(&amp;S2,<span class="number">1</span>);</span><br><span class="line">Push(&amp;S2,<span class="number">2</span>);</span><br><span class="line">Push(&amp;S2,<span class="number">3</span>);</span><br><span class="line">Push(&amp;S2,<span class="number">4</span>);</span><br><span class="line">Push(&amp;S2,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">while</span> (!IsEmpty(S2)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Top(S2));</span><br><span class="line">Pop(&amp;S2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Pop(&amp;S2);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the length of the stack is %d\n"</span>,Length(S1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the top of the stack is %d\n"</span>,Top(S1));</span><br><span class="line">Pop(&amp;S1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the top of the stack is %d\n"</span>,Top(S1));</span><br><span class="line">DestroyStack(&amp;S1);</span><br><span class="line">DestroyStack(&amp;S2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">object = main.o Stack.o</span><br><span class="line"></span><br><span class="line">test : <span class="variable">$(object)</span></span><br><span class="line">gcc -g -Wall -o test <span class="variable">$(object)</span> -std=c99</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line"></span><br><span class="line">clean : </span><br><span class="line">rm -rf *.o</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;接口参考严蔚敏老师的数据结构课本&lt;/li&gt;
&lt;li&gt;实现环境为linux&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Stack-h&quot;&gt;&lt;a href=&quot;#Stack-h&quot; class=&quot;headerlink&quot; title=&quot;Stack.h&quot;&gt;&lt;/a&gt;Stack.h&lt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>c语言实现循环队列</title>
    <link href="http://yoursite.com/2019/07/04/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2019/07/04/c语言实现循环队列/</id>
    <published>2019-07-04T05:40:06.000Z</published>
    <updated>2019-07-04T05:40:30.078Z</updated>
    
    <content type="html"><![CDATA[<ul><li>接口参考严蔚敏老师的数据结构</li><li>难点</li><li>开始队列为空时front = rear = 0，队列满时如果也是front = rear，则很难判断空满两个状态，因此队列空出一个空间专门用来放尾指针。</li><li>循环队列如何达到循环状态，接口函数实现的过程最好画图来形象的展示，实现后一个个调试，因为一不小心就可能出错误。</li><li>实现环境：<strong>linux</strong><h3 id="下面是实现过程"><a href="#下面是实现过程" class="headerlink" title="下面是实现过程"></a>下面是实现过程</h3><h4 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h4></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Item *base;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><h3 id="queue-h"><a href="#queue-h" class="headerlink" title="queue.h"></a>queue.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXQSIZE 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Item *base;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*initialize the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(Queue *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the length of the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Destroy the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyQueue</span><span class="params">(Queue *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*determine if the queue is empty*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*determine if the queue is full*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsFull</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the head elem of the queue*/</span></span><br><span class="line"><span class="function">Item <span class="title">Top</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the back elem of the queue*/</span></span><br><span class="line"><span class="function">Item <span class="title">Back</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*enqueue, insert the rear*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(Queue *q, Item e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*dequeue, pop the front*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(Queue *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintQueue</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="queue-c"><a href="#queue-c" class="headerlink" title="queue.c"></a>queue.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">q-&gt;base = (Item*)<span class="built_in">malloc</span>(MAXQSIZE * <span class="keyword">sizeof</span>(Item));</span><br><span class="line"><span class="keyword">if</span> (q-&gt;base == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">q-&gt;front = <span class="number">0</span>;</span><br><span class="line">q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the length of the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q.rear - q.front + MAXQSIZE) % MAXQSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Destroy the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyQueue</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">q-&gt;base = <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">q-&gt;front = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(q-&gt;base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*determine if the queue is empty*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.rear == q.front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsFull</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q.rear + <span class="number">1</span>) % MAXQSIZE == q.front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the head elem of the queue*/</span></span><br><span class="line"><span class="function">Item <span class="title">Top</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.base[q.front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the back elem of the queue*/</span></span><br><span class="line"><span class="function">Item <span class="title">Back</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.base[(q.rear - <span class="number">1</span> + MAXQSIZE) % MAXQSIZE];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*enqueue, insert the rear*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(Queue *q, Item e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (IsFull(*q))</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">q-&gt;base[q-&gt;rear] = e;</span><br><span class="line">q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*dequeue, pop the front*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(IsEmpty(*q))</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintQueue</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = q.front; i &lt; QueueLength(q); i++, j = (j + <span class="number">1</span>) % MAXQSIZE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,q.base[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line">InitQueue(&amp;q);</span><br><span class="line">EnQueue(&amp;q, <span class="number">1</span>);</span><br><span class="line">EnQueue(&amp;q, <span class="number">2</span>);</span><br><span class="line">EnQueue(&amp;q, <span class="number">3</span>);</span><br><span class="line">EnQueue(&amp;q, <span class="number">4</span>);</span><br><span class="line">EnQueue(&amp;q, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (IsFull(q))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hihi\n"</span>);</span><br><span class="line">DeQueue(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, q.front, q.rear);</span><br><span class="line">EnQueue(&amp;q, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Top(q));</span><br><span class="line"><span class="comment">//printf("%d\n", q.base[0]);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Back(q));</span><br><span class="line">PrintQueue(q);</span><br><span class="line">DestroyQueue(&amp;q);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">object = main.o queue.o</span><br><span class="line"></span><br><span class="line">test : <span class="variable">$(object)</span></span><br><span class="line">gcc -g -Wall -o test <span class="variable">$(object)</span></span><br><span class="line"></span><br><span class="line">main.o : queue.h</span><br><span class="line">queue.o : queue.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;接口参考严蔚敏老师的数据结构&lt;/li&gt;
&lt;li&gt;难点&lt;/li&gt;
&lt;li&gt;开始队列为空时front = rear = 0，队列满时如果也是front = rear，则很难判断空满两个状态，因此队列空出一个空间专门用来放尾指针。&lt;/li&gt;
&lt;li&gt;循环队列如何达到循
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>c语言实现双向链表</title>
    <link href="http://yoursite.com/2019/07/04/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/07/04/c语言实现双向链表/</id>
    <published>2019-07-04T05:38:03.000Z</published>
    <updated>2019-07-04T05:38:43.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c语言实现带头结点和尾节点的双向链表"><a href="#c语言实现带头结点和尾节点的双向链表" class="headerlink" title="c语言实现带头结点和尾节点的双向链表"></a>c语言实现带头结点和尾节点的双向链表</h1><ul><li><p>接口参考严蔚敏老师的数据结构</p></li><li><p>编译环境：<strong>linux</strong></p></li></ul><h4 id="数据结构-："><a href="#数据结构-：" class="headerlink" title="数据结构 ："></a>数据结构 ：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">Item data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">prior</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Link;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Link *head, *tail;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">&#125;LinkList;</span><br></pre></td></tr></table></figure><h3 id="list-h"><a href="#list-h" class="headerlink" title="list.h"></a>list.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">Item data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">prior</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Link;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Link *head, *tail;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">&#125;LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Initialize the linked list using head-insert-method*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitialList</span><span class="params">(LinkList *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Initialize the linked list using tail-insert-method*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">(LinkList *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*determine if the list is empty*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(LinkList L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the length of the list*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">ListCount</span><span class="params">(LinkList L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*clear the list, make the list empty*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">(LinkList *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Destroy the list*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyList</span><span class="params">(LinkList *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*get the value of the ith item and return it with e*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetItem</span><span class="params">(LinkList *L, <span class="keyword">int</span> i, Item *e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*find the first item with its value is e and return its order*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateList</span><span class="params">(LinkList *L, Item e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*insert e into the head of the list*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertHeadList</span><span class="params">(LinkList *L, Item e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*insert e into the tail of the list*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertTailList</span><span class="params">(LinkList *L, Item e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*delete the head elem and return it with e*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteHeadList</span><span class="params">(LinkList *L, Item *e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*delete the tail elem and return it with e*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteTailList</span><span class="params">(LinkList *L, Item *e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the precurosr of the current elem*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(LinkList L, Item cur_e, Item *Pri_e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the successor of the current elem*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(LinkList L, Item cur_e, Item *Nex_e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the list in positive order*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(LinkList L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the list in negative order*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintReverseList</span><span class="params">(LinkList L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="list-c"><a href="#list-c" class="headerlink" title="list.c"></a>list.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"list.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitialList</span><span class="params">(LinkList *L)</span> </span>&#123;</span><br><span class="line">L-&gt;head = (Link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line">L-&gt;tail = (Link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line"><span class="keyword">if</span> (L-&gt;head == <span class="literal">NULL</span> || L-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">L-&gt;head-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;head-&gt;next = L-&gt;tail;</span><br><span class="line">L-&gt;tail-&gt;prior = L-&gt;head;</span><br><span class="line">L-&gt;len = <span class="number">0</span>;    </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">(LinkList *L)</span> </span>&#123;</span><br><span class="line">Link *p;</span><br><span class="line">p = (Link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(Link));</span><br><span class="line">p-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(p-&gt;data));</span><br><span class="line">Link *q = L-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;data != <span class="number">-1</span>) &#123;</span><br><span class="line">L-&gt;len++;</span><br><span class="line">q-&gt;next = p;</span><br><span class="line">p-&gt;prior = q;</span><br><span class="line">p-&gt;next = L-&gt;tail;</span><br><span class="line">L-&gt;tail-&gt;prior = p;</span><br><span class="line">q = p;</span><br><span class="line">p = (Link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(Link));</span><br><span class="line">p-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(p-&gt;data));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.len == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*return the length of the list*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">ListCount</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*clear the list, make the list empty*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">(LinkList *L)</span> </span>&#123;</span><br><span class="line">Link *p;</span><br><span class="line">p = L-&gt;head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != L-&gt;tail) &#123;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;tail-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Destroy the list*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyList</span><span class="params">(LinkList *L)</span> </span>&#123;</span><br><span class="line">ClearList(L);</span><br><span class="line"><span class="built_in">free</span>(L-&gt;head);</span><br><span class="line"><span class="built_in">free</span>(L-&gt;tail);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*get the value of the ith item and return it with e*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetItem</span><span class="params">(LinkList *L, <span class="keyword">int</span> i, Item *e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; L-&gt;len) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"not exist"</span>);</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> compare = L-&gt;len / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">Link *p;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= compare) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"from the head of the list\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (j = i, p = L-&gt;head; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">*e = p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &gt; compare) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"from the tail of the list\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (j=i, p = L-&gt;tail; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">p = p-&gt;prior;</span><br><span class="line">&#125;</span><br><span class="line">*e = p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*find the first item with its value is e and return its order*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateList</span><span class="params">(LinkList *L, Item e)</span> </span>&#123;</span><br><span class="line">Link *p = L-&gt;head-&gt;next;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L-&gt;len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e) &#123;</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"not exist!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*insert e into the head of the list*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertHeadList</span><span class="params">(LinkList *L, Item e)</span> </span>&#123;</span><br><span class="line">Link *p = (Link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(Link));</span><br><span class="line">p-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;prior = L-&gt;head;</span><br><span class="line">p-&gt;next    = L-&gt;head-&gt;next;</span><br><span class="line">L-&gt;head-&gt;next-&gt;prior = p;</span><br><span class="line">L-&gt;head-&gt;next = p;</span><br><span class="line">L-&gt;len++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*insert e into the tail of the list*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertTailList</span><span class="params">(LinkList *L, Item e)</span> </span>&#123;</span><br><span class="line">Link *p = (Link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(Link));</span><br><span class="line">p-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = L-&gt;tail;</span><br><span class="line">p-&gt;prior = L-&gt;tail-&gt;prior;</span><br><span class="line">L-&gt;tail-&gt;prior-&gt;next = p;</span><br><span class="line">L-&gt;tail-&gt;prior = p;</span><br><span class="line">L-&gt;len++;</span><br><span class="line"><span class="keyword">return</span> OK;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*delete the head elem and return it with e*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteHeadList</span><span class="params">(LinkList *L, Item *e)</span> </span>&#123;</span><br><span class="line">*e = L-&gt;head-&gt;next-&gt;data;</span><br><span class="line">Link *p = L-&gt;head-&gt;next;    </span><br><span class="line">L-&gt;head-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = L-&gt;head;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">L-&gt;len--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the first elem deleted is %d\n"</span>, *e);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*delete the tail elem and return it with e*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteTailList</span><span class="params">(LinkList *L, Item *e)</span> </span>&#123;</span><br><span class="line">*e = L-&gt;tail-&gt;prior-&gt;data;</span><br><span class="line">Link *p = L-&gt;tail-&gt;prior;</span><br><span class="line">L-&gt;tail-&gt;prior = p-&gt;prior;</span><br><span class="line">p-&gt;prior-&gt;next = L-&gt;tail;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">L-&gt;len--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the first elem deleted is %d\n"</span>, *e);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the list in positive order*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">Link *p = L.head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != L.tail) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the list in negative order*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintReverseList</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">Link *p = L.tail-&gt;prior;</span><br><span class="line"><span class="keyword">while</span> (p != L.head) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p-&gt;data);</span><br><span class="line">p = p-&gt;prior;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"list.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">Item e;</span><br><span class="line">LinkList L;</span><br><span class="line">InitialList(&amp;L);</span><br><span class="line">CreateList(&amp;L);</span><br><span class="line"><span class="keyword">if</span> (!IsEmpty(L))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the number of the List is %d\n"</span>, ListCount(L));</span><br><span class="line">InsertHeadList(&amp;L, <span class="number">5</span>);</span><br><span class="line">InsertTailList(&amp;L, <span class="number">6</span>);</span><br><span class="line">PrintList(L);</span><br><span class="line">GetItem(&amp;L, <span class="number">2</span>, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the second position elem is %d\n"</span>, e);</span><br><span class="line">GetItem(&amp;L, <span class="number">5</span>, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the fifth position elem is %d\n"</span>, e);</span><br><span class="line"><span class="keyword">int</span> pos = LocateList(&amp;L, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the position of 5 is %d\n"</span>, pos);</span><br><span class="line">DeleteHeadList(&amp;L, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the delete head elem of e is %d\n"</span>, e);</span><br><span class="line">DeleteTailList(&amp;L, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the delete tail elem of e is %d\n"</span>, e);</span><br><span class="line">PrintReverseList(L);</span><br><span class="line">DestroyList(&amp;L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">object = main.c list.c list.h</span><br><span class="line"></span><br><span class="line">test : <span class="variable">$(object)</span></span><br><span class="line">gcc -g -Wall -o test <span class="variable">$(object)</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o:list.h</span></span><br><span class="line"><span class="section">list.o:list.h</span></span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm *.o -f</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;c语言实现带头结点和尾节点的双向链表&quot;&gt;&lt;a href=&quot;#c语言实现带头结点和尾节点的双向链表&quot; class=&quot;headerlink&quot; title=&quot;c语言实现带头结点和尾节点的双向链表&quot;&gt;&lt;/a&gt;c语言实现带头结点和尾节点的双向链表&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>struct和typedef struct的区别</title>
    <link href="http://yoursite.com/2019/07/04/struct%E5%92%8Ctypedef-struct%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/07/04/struct和typedef-struct的区别/</id>
    <published>2019-07-04T05:15:45.000Z</published>
    <updated>2019-07-04T05:35:01.764Z</updated>
    
    <content type="html"><![CDATA[<p>分三块来讲述：</p><p>1 首先：<strong>//注意在C和C++里不同</strong></p><p>​    在C中定义一个结构体类型要用typedef:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;Stu;</span><br></pre></td></tr></table></figure><p>​    于是在声明变量的时候就可：Stu stu1;(如果没有typedef就必须用struct Student stu1;来声明)</p><p>　　这里的Stu实际上就是struct Student的别名。<strong>Stu==struct Student</strong></p><p>　　另外这里也可以不写Student（于是也不能struct Student stu1;了，必须是Stu stu1;）　　　</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;Stu;</span><br><span class="line"><span class="comment">// 但在c++里很简单，直接</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>于是就定义了结构体类型Student，声明变量时直接Student stu2；</p><p>2.其次：</p><p>在c++中如果用typedef的话，又会造成区别：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>   <span class="title">Student</span>  </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;  </span><br><span class="line">&#125;stu1;<span class="comment">//stu1是一个变量  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student2</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line"><span class="keyword">int</span> a;   </span><br><span class="line">&#125;stu2;<span class="comment">//stu2是一个结构体类型=struct Student</span></span><br></pre></td></tr></table></figure><p>使用时可以直接访问stu1.a</p><p>但是stu2则必须先 stu2 s2;</p><p>然后 s2.a=10;</p><p>3 掌握上面两条就可以了，不过最后我们探讨个没多大关系的问题</p><p>如果在c程序中我们写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;aaa,bbb,ccc;</span><br></pre></td></tr></table></figure><p>这相当于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;aaa；</span><br><span class="line"><span class="keyword">typedef</span> aaa bbb;</span><br><span class="line"><span class="keyword">typedef</span> aaa ccc;</span><br></pre></td></tr></table></figure><p>也就是说aaa,bbb,ccc三者都是结构体类型。声明变量时用任何一个都可以,在c++中也是如此。但是你要注意的是这个在c++中如果写掉了typedef关键字，那么aaa，bbb，ccc将是截然不同的三个对象。　</p><p>　 </p><p> <strong>typedef struct和struct的区别：</strong></p><p><strong>1.</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> iNum;</span><br><span class="line">    <span class="keyword">long</span> lLength;</span><br><span class="line">&#125; MyStruct;</span><br></pre></td></tr></table></figure><p> 上面的tagMyStruct是标识符，MyStruct是变量类型（相当于（int,char等））。</p><p> 这语句实际上完成两个操作：</p><p>1) 定义一个新的结构类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> iNum;</span><br><span class="line">    <span class="keyword">long</span> lLength;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分析：tagMyStruct称为“tag”，即“标签”，实际上是一个临时名字，不论是否有typedefstruct 关键字和tagMyStruct一起，构成了这个结构类型，这个结构都存在。</p><p>我们可以用struct tagMyStruct varName来定义变量，但要注意，使用tagMyStruct varName来定义变量是不对的，因为struct 和tagMyStruct合在一起才能表示一个结构类型。</p><p>　　</p><p>2) typedef为这个新的结构起了一个名字，叫MyStruct。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span> <span class="title">MyStruct</span>;</span></span><br></pre></td></tr></table></figure><p>因此，MyStruct实际上相当于struct tagMyStruct，我们可以使用MyStruct varName来定义变量。</p><p><strong>2.</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> iNum;</span><br><span class="line">    <span class="keyword">long</span> lLength;</span><br><span class="line">&#125; MyStruct;</span><br></pre></td></tr></table></figure><p>在C中，这个申明后申请结构变量的方法有两种：</p><p>（1）struct tagMyStruct 变量名</p><p>（2）MyStruct 变量名</p><p>在c++中可以有</p><p>（1）struct tagMyStruct 变量名</p><p>（2）MyStruct 变量名</p><p>（3）tagMyStruct 变量名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分三块来讲述：&lt;/p&gt;
&lt;p&gt;1 首先：&lt;strong&gt;//注意在C和C++里不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    在C中定义一个结构体类型要用typedef:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>顺序表的实现</title>
    <link href="http://yoursite.com/2019/07/04/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/07/04/c语言实现顺序表/</id>
    <published>2019-07-04T05:11:30.000Z</published>
    <updated>2019-07-04T05:15:02.925Z</updated>
    
    <content type="html"><![CDATA[<p>#c语言实现顺序表</p><ul><li><p>实现方法参考严蔚敏老师的数据结构教材</p></li><li><p>采用动态分配内存的方法</p></li></ul><h2 id="list-h"><a href="#list-h" class="headerlink" title="list.h"></a>list.h</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* list.h--顺序表接口 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INCREMENT 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Item *elem;</span><br><span class="line"><span class="keyword">int</span> listsize;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125;List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化一个列表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeList</span><span class="params">(List * plist)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*销毁列表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyList</span><span class="params">(List *plist)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将列表重置为空表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">(List *plist)</span></span>;</span><br><span class="line"><span class="comment">/*判断列表是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListIsEmpty</span><span class="params">(<span class="keyword">const</span> List plist)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断列表是否已满*/</span></span><br><span class="line"><span class="comment">//bool ListIsFull(const List plist);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回列表中项目的个数*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">ListItemCount</span><span class="params">(<span class="keyword">const</span> List plist)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*向列表尾部添加一个项目*/</span></span><br><span class="line"><span class="comment">//bool AddItem(List &amp;plist, Item e);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除列表尾部的一个元素,并将其值返回e*/</span></span><br><span class="line"><span class="comment">//bool popItem(List &amp;plist, Item *e);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*在位置i之前插入一个元素e*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertItem</span><span class="params">(List *plist, <span class="keyword">int</span> i, Item e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除第i个数据元素并用e返回其值*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteItem</span><span class="params">(List *plist, <span class="keyword">int</span> i, Item *e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取第i个数据元素的值并用e返回*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(List plist, <span class="keyword">int</span> i, Item *e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找表中第一个值为e的元素并返回数据元素的位序*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateList</span><span class="params">(List plist, Item e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回当前元素的前驱*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(List plist, Item cur_e, Item *pri_e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回当前元素的后继*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(List plist, Item cur_e, Item *Nex_e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TravelList</span><span class="params">(List plist)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="list-c"><a href="#list-c" class="headerlink" title="list.c"></a>list.c</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* list.c列表操作的函数 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"list.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeList</span><span class="params">(List * plist)</span> </span>&#123;</span><br><span class="line">plist-&gt;elem = (Item* )<span class="built_in">malloc</span>(LIST_INIT_SIZE*<span class="keyword">sizeof</span>(Item));</span><br><span class="line"><span class="keyword">if</span> (!plist-&gt;elem)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">plist-&gt;length = <span class="number">0</span>;</span><br><span class="line">plist-&gt;listsize = LIST_INIT_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyList</span><span class="params">(List *plist)</span> </span>&#123;</span><br><span class="line"><span class="built_in">free</span>(plist-&gt;elem);</span><br><span class="line">plist-&gt;elem = <span class="literal">NULL</span>;</span><br><span class="line">plist-&gt;length = <span class="number">0</span>;</span><br><span class="line">plist-&gt;listsize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">(List *plist)</span> </span>&#123;</span><br><span class="line">plist-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListIsEmpty</span><span class="params">(<span class="keyword">const</span> List plist)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> plist.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">ListItemCount</span><span class="params">(<span class="keyword">const</span> List plist)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> plist.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertItem</span><span class="params">(List *plist, <span class="keyword">int</span> i, Item e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; plist-&gt;length + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> (plist-&gt;length &gt;= plist-&gt;listsize) &#123;</span><br><span class="line">Item *newbase;</span><br><span class="line">newbase = (Item* )<span class="built_in">realloc</span>(plist-&gt;elem, (plist-&gt;listsize + LIST_INCREMENT) *<span class="keyword">sizeof</span>(Item));</span><br><span class="line"><span class="keyword">if</span> (!newbase) &#123;</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">&#125;</span><br><span class="line">plist-&gt;listsize += LIST_INCREMENT;</span><br><span class="line">plist-&gt;elem = newbase;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Item *q = &amp;(plist-&gt;elem[i - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (Item *p = &amp;(plist-&gt;elem[plist-&gt;length - <span class="number">1</span>]); p&gt;=q; p--) &#123;</span><br><span class="line">*(p + <span class="number">1</span>) = *p;</span><br><span class="line">&#125;</span><br><span class="line">*q = e;</span><br><span class="line">plist-&gt;length++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteItem</span><span class="params">(List *plist, <span class="keyword">int</span> i, Item *e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; plist-&gt;length + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">Item *q = &amp;(plist-&gt;elem[i - <span class="number">1</span>]);</span><br><span class="line">Item *p = &amp;(plist-&gt;elem[plist-&gt;length - <span class="number">1</span>]);</span><br><span class="line">*e = *q;</span><br><span class="line"><span class="keyword">for</span> (q++; q &lt;= p; q++)</span><br><span class="line">&#123;</span><br><span class="line">*(q - <span class="number">1</span>) = *q;</span><br><span class="line">&#125;</span><br><span class="line">plist-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(List plist, <span class="keyword">int</span> i, Item *e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; plist.length + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">*e = plist.elem[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateList</span><span class="params">(List plist, Item e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; plist.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (plist.elem[i] == e) &#123;</span><br><span class="line"><span class="keyword">return</span> (i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not exit! "</span>);</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(List plist, Item cur_e, Item *pri_e)</span> </span>&#123;</span><br><span class="line">Item *p = plist.elem;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; plist.length; i++,p++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; *p == cur_e) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"无前驱元素"</span>);</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*p == cur_e) &#123;</span><br><span class="line">*pri_e = *--p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"没有此值"</span>);</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(List plist, Item cur_e, Item *Nex_e)</span> </span>&#123;</span><br><span class="line">Item *p = plist.elem;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; plist.length; i++,p++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != plist.length - <span class="number">1</span> &amp;&amp; *p == cur_e) &#123;</span><br><span class="line">*Nex_e = *++p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*p == cur_e) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"无后继元素"</span>);</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"没有此值"</span>);</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TravelList</span><span class="params">(List plist)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = plist.elem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; plist.length; i++,p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d: "</span>, i+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用于测试的函数main-c"><a href="#用于测试的函数main-c" class="headerlink" title="用于测试的函数main.c"></a>用于测试的函数main.c</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"list.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">List L;</span><br><span class="line">Item e;</span><br><span class="line">InitializeList(&amp;L);</span><br><span class="line">ClearList(&amp;L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, L.listsize);</span><br><span class="line">InsertItem(&amp;L, <span class="number">1</span> , <span class="number">2</span>);</span><br><span class="line">InsertItem(&amp;L, <span class="number">2</span> , <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, L.listsize);</span><br><span class="line">InsertItem(&amp;L, <span class="number">3</span> , <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, L.listsize);</span><br><span class="line">TravelList(L);</span><br><span class="line">PriorElem(L, <span class="number">3</span>, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the Prior of the elem whose value is 3 is %d\n"</span>, e);</span><br><span class="line">NextElem(L, <span class="number">3</span>, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the Next of the elem whose value is 3 is %d\n"</span>, e);</span><br><span class="line">DeleteItem(&amp;L, <span class="number">1</span>, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the delete elem is %d\n"</span>,e);</span><br><span class="line">TravelList(L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the count of the elem is %d\n"</span>, ListItemCount(L));</span><br><span class="line">GetElem(L, <span class="number">2</span>, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"get the second location's value is %d\n"</span>, e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"get the position of whose value is 5 is %d\n"</span>, LocateList(L, <span class="number">5</span>));</span><br><span class="line">DestroyList(&amp;L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#c语言实现顺序表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;实现方法参考严蔚敏老师的数据结构教材&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;采用动态分配内存的方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;list-h&quot;&gt;&lt;a href=&quot;#list-h&quot; class=&quot;header
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="c语言" scheme="http://yoursite.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>iOS应用生命周期</title>
    <link href="http://yoursite.com/2019/07/04/iOS%E5%BA%94%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2019/07/04/iOS应用生命周期/</id>
    <published>2019-07-04T04:59:03.000Z</published>
    <updated>2019-07-04T05:03:28.022Z</updated>
    
    <content type="html"><![CDATA[<h4 id="分为以下5种状态："><a href="#分为以下5种状态：" class="headerlink" title="分为以下5种状态："></a>分为以下5种状态：</h4><ul><li>Not running(非运行状态)</li><li>应用程序没有运行或被系统终止</li><li>Inactive(前台非活动状态)</li><li>正在进入前台状态但是不能接受事件处理</li><li>Active(前台活动状态)</li><li>进入前台，能接受事件处理</li><li>Background(后台状态)</li><li>如果有可执行的代码则执行代码，没有或执行完毕则马上进入挂起状态。</li><li>Suspended(挂起状态)</li><li>冷冻状态，不能执行代码。如果系统内存不够，应用被终止。</li></ul><p><img src="https://img-blog.csdnimg.cn/20190426151844410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="AppDelegate中状态跃迁的应用回调方法："><a href="#AppDelegate中状态跃迁的应用回调方法：" class="headerlink" title="AppDelegate中状态跃迁的应用回调方法："></a>AppDelegate中状态跃迁的应用回调方法：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应用程序启动并进行初始化调用该方法发出通知</span></span><br><span class="line"><span class="comment">// 实例化根视图控制器</span></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">NSLog(@<span class="string">"%@"</span>, @<span class="string">"application: didFinishLaunchingWithOptions:"</span>);</span><br><span class="line"><span class="keyword">return</span> YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从活动状态进入非活动状态调用该方法。</span></span><br><span class="line"><span class="comment">// 此状态可以保存UI的状态</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillResignActive:(UIApplication *)application &#123;</span><br><span class="line">NSLog(@<span class="string">"%@"</span>, @<span class="string">"applicationWillResignActive"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用程序进入后台调用该方法并发出通知</span></span><br><span class="line"><span class="comment">// 保存用户数据，释放一些资源(例如释放数据库资源)</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationDidEnterBackground:(UIApplication *)application &#123;</span><br><span class="line">NSLog(@<span class="string">"%@"</span>, @<span class="string">"applicationDidEnterBackground"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入前台但还没有处于活动状态时调用该方法并发出通知</span></span><br><span class="line"><span class="comment">// 此阶段恢复用户数据</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillEnterForeground:(UIApplication *)application &#123;</span><br><span class="line">NSLog(@<span class="string">"%@"</span>, @<span class="string">"applicationWillEnterForeground"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入前台并处于活动状态时调用该方法并发出通知。</span></span><br><span class="line"><span class="comment">// 此阶段可恢复UI的状态</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationDidBecomeActive:(UIApplication *)application &#123;</span><br><span class="line">NSLog(@<span class="string">"%@"</span>, @<span class="string">"applicationDidBecomeActive"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用程序被终止调用该方法(内存清除时除外)</span></span><br><span class="line"><span class="comment">// 该阶段释放资源保存用户数据</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillTerminate:(UIApplication *)application &#123;</span><br><span class="line">NSLog(@<span class="string">"%@"</span>, @<span class="string">"applicationWillTerminate"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="状态场景："><a href="#状态场景：" class="headerlink" title="状态场景："></a>状态场景：</h4><ul><li><p><strong>1. 非运行状态—应用启动场景</strong><br><img src="https://img-blog.csdnimg.cn/20190426152055882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><strong>2. 点击Home键—应用退出场景</strong></p></li></ul><p>该场景状态跃迁可分为两种情况，根据Info.plist中的属性设置<code>Application does not run in background</code>控制相应的状态：</p><ul><li><p>应用程序在后台运行或挂起<br><img src="https://img-blog.csdnimg.cn/20190426151953461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190426152000668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>应用程序不可以在后台运行或挂起：</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20190426152013330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190426152019492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>3. 挂起重新运行场景</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/20190426152036288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>4. 内存清除：应用终止场景</strong></li></ul><p>内存清除有两种情况：可能是系统强制清理内存，也可能是使用者从任务栏中手动清除。清除后再次运行应用程序上一次状态不会保存。<br><img src="https://img-blog.csdnimg.cn/2019042615204748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;分为以下5种状态：&quot;&gt;&lt;a href=&quot;#分为以下5种状态：&quot; class=&quot;headerlink&quot; title=&quot;分为以下5种状态：&quot;&gt;&lt;/a&gt;分为以下5种状态：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Not running(非运行状态)&lt;/li&gt;
&lt;li&gt;应用程序没有运行
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="objective-c" scheme="http://yoursite.com/tags/objective-c/"/>
    
  </entry>
  
</feed>
