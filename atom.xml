<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PerryWang🍎博客</title>
  
  <subtitle>分享软件开发中学到的点滴知识</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-05T14:44:36.649Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>PerryWang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>区块链认识与看法</title>
    <link href="http://yoursite.com/2019/07/05/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AE%A4%E8%AF%86%E4%B8%8E%E7%9C%8B%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/05/区块链认识与看法/</id>
    <published>2019-07-05T14:44:05.000Z</published>
    <updated>2019-07-05T14:44:36.649Z</updated>
    
    <content type="html"><![CDATA[<ul><li>通过阅读区块链技术发展现状与展望，郑子彬老师的区块链报告，以及知乎贴吧上关于区块链的讨论所写下的个人学习体会以及对区块链的个人看法。</li></ul><h2 id="什么是区块链"><a href="#什么是区块链" class="headerlink" title="什么是区块链"></a>什么是区块链</h2><p>从2008年中本聪发表了区块链的奠基性论文《比特币：一种点对点电子现金系统》后，区块链技术近年来呈现出了爆发式的增长态势。其快速发展引起了政府部门，金融机构，科技企业和资本市场的广泛关注。区块链技术也被认为是计算机范式的第五次颠覆性创新，是人类信用进化史上第四个里程碑。是下一代云计算的雏形，有望像互联网一样彻底重塑人类社会活动形态, 并实现从目前的信息互联网向价值互联网的转变。</p><p>其实说了这么多，区块链真正被大家所熟知，还是因为比特币。而比特币受到人们的广泛关注也更多是因为早期买入比特币的人的暴富效应。就像只是单纯地向人们解释区块链有着历史性变革的伟大意义，是一个机遇，会改变未来，人们可能毫无兴趣。但如果讲比特币可以赚钱，能让你一夜暴富，那估计人们的兴趣会因此大的多。也就是在这样一种情况下，比特币如一颗树一般，在生长的过程逐渐开枝散叶，慢慢长大，形成了如今下的区块链行业。</p><p>而区块链到底是什么，简单来说，它的本质就是一个分布式的网络，采取去中心化的信息存储方式，这一定程度上做到了“没有中间商赚差价”。以前我们说马云颠覆了中国的制造业，让工厂可以不通过销售商将产品直销给淘宝用户。然而这中间阿里巴巴这个中间商还是有赚平台差价的，支付宝担保交易。而区块链则是从技术上完全做到了“没有中间商赚差价”这一点。去中心化的另一个好处是，数据都是分散存储的，每一个区块链网络中的结点都存有交易的所有数据，因而不可被恶意篡改，安全性得到了极大的保证。至于这个网络的安全性保证，就要靠我们优秀的程序员们开发出的非对称加密算法了。</p><p>同时区块链系统本身具有自己的Token，Token 在国内有的翻译成“通证”，有的翻译成“代币”，其实最简单的理解就是“虚拟资产凭证”，它可以是我们的股权，也可以是票据，也可以是游戏积分，凡是需要资产记账的地方都可以用 Token 来做。而区块链则可以帮助多个节点达成共识去记录和Token相关的事情。另一方面要求加入区块链网络的人主动去存储数据，让“矿工”们主动的贡献出自己的内存和带宽。区块链世界引入了一个奖励的机制，例如在比特币系统中，这种奖励机制就是以代币（比特币）的方式对贡献算力的人进行奖励。</p><h2 id="区块链的应用"><a href="#区块链的应用" class="headerlink" title="区块链的应用"></a>区块链的应用</h2><p>关于区块链的应用场景，就目前区块链所处的阶段来看，主要是可大致分为两方面，一是数字货币，二是去中心化应用。数字货币我们所熟知的中比特币是先驱和目前市值最高，应用最广泛的代表，而去中心化应用目前也只是处于初级阶段，要想区块链来广泛应用到日常生活的方方面面还尚需一定时间。所以这里重点说一下目前去中心化应用的典型代表—以太坊和运行在以太坊上的智能合约。</p><p>目前运行在以太坊网络上的去中心化应用大约有近千个，主要有以下几大类：</p><ul><li><p><strong>去中心化的虚拟货币交易所</strong>： 用户不通过和交易所进行撮合交易，而是通过智能合约交互进行代币（token）的交易。目前尚处于初级阶段，仅支持在以太坊尚发行的代币，如EOS、TRX等。</p></li><li><p><strong>区块链游戏</strong>：2017年云撸猫横空出世并吸引了全球的关注并引发了一波区块链游戏狂潮，但目前的玩法方面和真正的手游，端游相比仍过于简单。所以不少游戏玩家抱怨：这不算游戏，简直就是资金盘。因而要达到像是王者荣耀，LOL这类全民游戏还尚需一定的发展历程。</p></li><li><p><strong>虚拟物品交易市场</strong>：例如各种区块链游戏中的游戏资产便可以通过智能合约进行交易。但目前也扔处于初级阶段，活跃不高。</p></li><li><p><strong>投票、众筹</strong>：前段时间非洲的塞拉利昂举行了首个以区块链技术为基础的总统投票选举。区块链技术改善了先前数字投票系统的缺点，确保了投票的安全、透明和匿名。</p></li></ul><p>通过智能合约可以做到快速建立信任，数据无法篡改，过程透明，信息完全对称等优点。但现阶段尚未成熟的智能合约也存在着例如无法及时交互，发送指令费用高，开发环境尚不成熟等显著缺点，这些缺点限制了目前去中心化应用的发展，同时也给未来的新的去中心化技术提供了机会和发展方向。</p><h2 id="区块链的挑战"><a href="#区块链的挑战" class="headerlink" title="区块链的挑战"></a>区块链的挑战</h2><p>区块链自产生以来业界就对其褒贬不一，就如曾经的人工智能，克隆一般，每一项新兴技术的发展必然伴随着质疑和不信任。而真正能予以证明的只有历史。但是一门新兴的技术要发展的更高效率和更具先进意义，就要解决现存的很多问题。</p><ul><li><p>首先很现实的一个问题也是区块链本身优点所带来的，就是效率问题，采用分布式的存储分部，每一个节点保存一份完整的数据库，且网络中任何一笔交易都要其他节点认证和记录，这导致区块链系统工作效率十分之低。</p></li><li><p>其次基于其分布式账本策略，这代表着需要很多主体记账且需要他们达到共识，然而目前业界在共识协议层面存在着很大的分期，且一些主流机制也有硬性的缺点。比如主流的Pow，存在着效率低下以及拜占庭容错等问题亟待解决。</p></li><li><p>安全性问题：曾经很多人都觉得51%攻击是一种可能，不太现实。然而就仅2018这一年来，几类加密货币都遭到了所谓51%攻击，Verge、BTG相继成为受害者，这恰恰说明：都说区块链安全，但也不是牢不可破的。</p></li><li><p>犯罪行业：有人认为，基于区块链自治的特点，会淡化监管影响（或监管层面触及不够），所以市场的逐利性和“看不见的手”，会将它应用和引入非法领域，暂时成为某些“黑灰产业”的庇护所。</p></li></ul><p>其实从区块链当下存在的问题来看，它的问题来源也正是其技术的先进方面所带来的。所以每一门新兴的技术都是一把利弊皆在的双刃剑，只有真正利大于弊的技术才能生存并得以持久发展。在未来，第四次工业革命的到来将会使现存的技术水平以及社会制度发生翻天覆地的变化。当下流行的科技前沿也会引领第四次工业革命的发展方向。首先是生物科学技术，其代表性技术基因技术将可能会突破上帝创造生物的规则，从新塑写人类、动植物的身体构造。其次以人工智能，量子计算，区块链，数据挖掘为代表的互联网技术将会日渐渗透到我们日常生活中。再者人类探索宇宙的步伐将会加速，探索外太空所带来的资源利用以及科技进步将会深刻地影响到我们的日常生活。而区块链的发展毕竟推进第四次工业革命的进程，同时革命伴随的其他先进技术的发展也将促进区块链技术更好地走向成熟。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;通过阅读区块链技术发展现状与展望，郑子彬老师的区块链报告，以及知乎贴吧上关于区块链的讨论所写下的个人学习体会以及对区块链的个人看法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;什么是区块链&quot;&gt;&lt;a href=&quot;#什么是区块链&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="区块链" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>区块链初学习</title>
    <link href="http://yoursite.com/2019/07/05/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/07/05/区块链初学习/</id>
    <published>2019-07-05T14:38:53.000Z</published>
    <updated>2019-07-05T14:39:36.251Z</updated>
    
    <content type="html"><![CDATA[<ul><li>阅读自区块链技术发展现状与展望（袁勇 王飞跃）的报告并节选其中内容</li></ul><h2 id="区块链简介"><a href="#区块链简介" class="headerlink" title="区块链简介"></a>区块链简介</h2><ol><li>区块链定义：</li></ol><ul><li>区块链是以比特币为代表的数字加密货币体系的核心支撑技术。区块链技术的核心优势是去中心化，能够通过运用数据加密、时间戳、分布式共识和经济激励等手段，在节点无需互相信任的分布式系统中实现基于去中心化信用的点对点交易、协调与协作，从而为解决中心化机构普遍存在的高成本、低效率和数据存储不安全等问题提供了解决方案。</li></ul><ol start="2"><li>区块链特点：</li></ol><ul><li>去中心化、时序数据、集体维护、可编程和安全可信等特点。</li><li>去中心化：区块链数据的验证、记账、存储、维护和传输等过程均是基于分布式系统结构, 采用纯数学方法而不是中心机构来建立分布式节点间的信任关系, 从而形成去中心化的可信任的分布式系统。</li><li>时序数据：: 区块链采用带有时间戳的链式区块结构存储数据, 从而为数据增加了时间维度, 具有极强的可验证性和可追溯性。</li><li>集体维护：区块链系统采用特定的经济激励机制来保证分布式系统中所有节点均可参与数据区块的验证过程 (如比特币的 “挖矿” 过程), 并通过共识算法来选择特定的节点将新区块添加到区块链。</li><li>可编程： 区块链技术可提供灵活的脚本代码系统, 支持用户创建高级的智能合约、货币或其他去中心化应用.。例如, 以太坊 (Ethereum) 平台即提供了图灵完备的脚本语言以供用户来构建任何可以精确定义的智能合约或交易类型。</li><li>安全可信：区块链技术采用非对称密码学原理对数据进行加密, 同时借助分布式系统各节点的工作量证明等共识算法形成的强大算力来抵御外部攻击、保证区块链数据不可篡改和不可伪造, 因而具有较高的安全性。</li></ul><ol start="3"><li>区块链技术的未来发展脉络：</li></ol><ul><li>区块链技术将会经历以可编程数字加密货币体系为主要特征的区块链 1.0 模式、以可编程金融系统为主要特征的区块链 2.0 模式和以可编程社会为主要特征的区块链 3.0 模式。</li></ul><ol start="4"><li>比特币现状：</li></ol><ul><li>目前, 一般认为区块链技术正处于2.0 模式的初期, 股权众筹和 P2P 借贷等各类基于区块链技术的互联网金融应用相继涌现. 然而, 上述模式实际上是平行而非演进式发展的, 区块链 1.0模式的数字加密货币体系仍然远未成熟, 距离其全球货币一体化的愿景实际上更远、更困难. 目前, 区块链领域已经呈现出明显的技术和产业创新驱动的发展态势, 相关学术研究严重滞后、亟待跟进。(截止到 2016 年 2 月, 以万方数据知识服务平台为中文数据源、以 Web of Science 和 EI Village 为英文数据源的文献检索显示, 目前篇名包含关键词 “区块链/blockchain” 的仅有 2 篇中文和 9 篇英文文献. )</li></ul><h2 id="比特币与区块链概述"><a href="#比特币与区块链概述" class="headerlink" title="比特币与区块链概述"></a>比特币与区块链概述</h2><ol><li>比特币本质：</li></ol><ul><li><p>由分布式网络系统生成的数字货币, 其发行过程不依赖特定的中心化机构, 而是依赖于分布式网络节点共同参与一种称为工作量证明(Proof of work, PoW) 的共识过程以完成比特币交易的验证与记录。</p></li><li><p>PoW 共识过程 (俗称挖矿, 每个节点称为矿工) 通常是各节点贡献自己的计算资源来竞争解决一个难度可动态调整的数学问题, 成功解决该数学问题的矿工将获得区块的记账权, 并将当前时间段的所有比特币交易打包记入一个新的区块、按照时间顺序链接到比特币主链上. 比特币系统同时会发行一定数量的比特币以奖励该矿工, 并激励其他矿工继续贡献算力。</p></li><li><p>比特币的流通过程依靠密码学方法保障安全. 每一次比特币交易都会经过特殊算法处理和全体矿工验证后记入区块链, 同时可以附带具有一定灵活性的脚本代码 (智能合约)以实现可编程的自动化货币流通。</p></li></ul><ol start="2"><li><p>比特币和区块链具有的五个关键要素</p><ul><li>即公共的区块链账本、分布式的点对点网络系统、去中心化的共识算法、适度的经济激励机制以及可编程的脚本代码</li></ul></li><li><p>数字加密货币面临的两个重要问题</p><ul><li>双重支付问题和拜占庭问题</li><li>双重支付问题：双重支付问题又称为 “双花”, 即利用货币的数字特性两次或多次使用“同一笔钱” 完成支付. 传统金融和货币体系中, 现金因是物理实体, 能够自然地避免双重支付;其他数字形式的货币则需要可信的第三方中心机构(如银行) 来保证。 区块链技术的贡献是在没有第三方机构的情况下, 通过分布式节点的验证和共识机制解决了去中心化系统的双重支付问题, 在信息传输的过程同时完成了价值转移。</li><li>拜占庭问题：拜占庭将军问题是分布式系统交互过程普遍面临的难题, 即在缺少可信任的中央节点的情况下, 分布式节点如何达成共识和建立互信。区块链通过数字加密技术和分布式共识算法, 实现了在无需信任单个节点的情况下构建一个去中心化的可信任系统. 与传统中心机构(如中央银行) 的信用背书机制不同的是, 比特币区块链形成的是软件定义的信用, 这标志着中心化的国家信用向去中心化的算法信用的根本性变革.</li></ul></li><li><p>比特币的流通过程</p></li></ol><ul><li>比特币凭借其先发优势, 目前已经形成体系完备的涵盖发行、流通和金融衍生市场的生态圈与产业链 (如图 1 所示), 这也是其长期占据绝大多数数字加密货币市场份额的主要原因. 比特币的开源特性吸引了大量开发者持续性地贡献其创新技术、方法和机制; 比特币各网络节点 (矿工) 提供算力以保证比特币的稳定共识和安全性, 其算力大多来自于设备商销售的专门用于 PoW 共识算法的专业设备(矿机). 比特币网络为每个新发现的区块发行一定数量的比特币以奖励矿工, 部分矿工可能会相互合作建立收益共享的矿池, 以便汇集算力来提高获得比特币的概率. 比特币经发行进入流通环节后, 持币人可以通过特定的软件平台 (如比特币钱包) 向商家支付比特币来购买商品或服务, 这体现了比特币的货币属性; 同时由于比特币价格的涨跌机制使其完全具备金融衍生品的所有属性, 因此出现了比特币交易平台以方便持币人投资或者投机比特币. 在流通环节和金融市场中, 每一笔比特币交易都会由比特币网络的全体矿工验证并记入区块链。</li></ul><p><img src="https://img-blog.csdn.net/2018091215470988?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h2 id="区块链的基础模型和关键技术"><a href="#区块链的基础模型和关键技术" class="headerlink" title="区块链的基础模型和关键技术"></a>区块链的基础模型和关键技术</h2><p>1.区块链基础架构模型：</p><ul><li>区块链技术的基础架构模型如图 2 所示. 一般说来, 区块链系统由数据层、网络层、共识层、激励层、合约层和应用层组成. 其中, 数据层封装了底层数据区块以及相关的数据加密和时间戳等技术; 网络层则包括分布式组网机制、数据传播机制和数据验证机制等; 共识层主要封装网络节点的各类共识算法; 激励层将经济因素集成到区块链技术体系中来, 主要包括经济激励的发行机制和分配机制等; 合约层主要封装各类脚本、算法和智能合约, 是区块链可编程特性的基础; 应用层则封装了区块链的各种应用场景和案例. 该模型中, 基于时间戳的链式区块结构、分布式节点的共识机制、基于共识算力的经济激励和灵活可编程的智能合约是区块链技术最具代表性的创新点。</li></ul><p><img src="https://img-blog.csdn.net/20180912155416859?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p><img src="https://img-blog.csdn.net/20180912160025981?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>2.数据层：</p><ul><li><p>数据区块：如图 3 所示, 每个数据区块一般包含区块头 (Header) 和区块体 (Body) 两部分. 区块头封装了当前版本号 (Version)、前一区块地址(Prev-block)、当前区块的目标哈希值(Bits)、当前区块PoW共识过程的解随机数 (Nonce)、Merkle根(Merkle-root)以及时间戳(Timestamp) 等信息. 比特币网络可以动态调整 PoW 共识过程的难度值, 最先找到正确的解随机数 Nonce 并经过全体矿工验证的矿工将会获得当前区块的记账权. 区块体则包括当前区块的交易数量以及经过验证的、区块创建过程中生成的所有交易记录. 这些记录通过 Merkle 树的哈希过程生成唯一的 Merkle 根并记入区块头。</p></li><li><p>链式结构：取得记账权的矿工将当前区块链接到前一区块, 形成最新的区块主链. 各个区块依次环环相接, 形成从创世区块到当前区块的一条最长主链, 从而记录了区块链数据的完整历史, 能够提供区块链数据的溯源和定位功能, 任意数据都可以通过此链式结构顺藤摸瓜、追本溯源. 需要说明的是, 如果短时间内有两个矿工同时 “挖出” 两个新的区块加以链接的话, 区块主链可能会出现暂时的 “分叉”现象, 其解决方法是约定矿工总是选择延长累计工作量证明最大的区块链. 因此, 当主链分叉后, 后续区块的矿工将通过计算和比较, 将其区块链接到当前累计工作量证明最大化的备选链上, 形成更长的新主链, 从而解决分叉问题。</p></li><li><p>时间戳：区块链技术要求获得记账权的节点必须在当前数据区块头中加盖时间戳, 表明区块数据的写入时间. 因此, 主链上各区块是按照时间顺序依次排列的. 时间戳技术本身并不复杂, 但其在区块链技术中的应用是具有重要意义的创新. 时间戳可以作为区块数据的存在性证明 (Proof of existence),有助于形成不可篡改和不可伪造的区块链数据库,从而为区块链应用于公证、知识产权注册等时间敏感的领域奠定了基础. 更为重要的是, 时间戳为未来基于区块链的互联网和大数据增加了时间维度, 使得通过区块数据和时间戳来重现历史成为可能。</p></li><li><p>哈希函数：区块链通常并不直接保存原始数据或交易记录, 而是保存其哈希函数值, 即将原始数据编码为特定长度的由数字和字母组成的字符串后记入区块链. 哈希函数 (也称散列函数) 具有诸多优良特点, 因而特别适合用于存储区块链数据. 例如, 通过哈希输出几乎不能反推输入值 (单向性), 不同长度输入的哈希过程消耗大约相同的时间 (定时性) 且产生固定长度的输出 (定长性), 即使输入仅相差一个字节也会产生显著不同的输出值 (随机性) 等. 比特币区块链通常采用双 SHA256 哈希函数, 即将任意长度的原始数据经过两次 SHA256 哈希运算后转换为长度为 256 位 (32 字节) 的二进制数字来统一存储和识别. 除上述特点外, SHA256 算法还具有巨大的散列空间 (2256) 和抗碰撞 (避免不同输入值产生相同哈希值) 等特性, 可满足比特币的任何相关标记需要而不会出现冲突。</p></li><li><p>Merkle树：Merkle 树是区块链的重要数据结构, 其作用是快速归纳和校验区块数据的存在性和完整性. Merkle 树通常包含区块体的底层 (交易) 数据库, 区块头的根哈希值 (即Merkle 根) 以及所有沿底层区块数据到根哈希的分支. Merkle 树运算过程一般是将区块体的数据进行分组哈希, 并将生成的新哈希值插入到 Merkle 树中, 如此递归直到只剩最后一个根哈希值并记为区块头的 Merkle 根. 最常见的 Merkle 树是比特币采用的二叉 Merkle 树, 其每个哈希节点总是包含两个相邻的数据块或其哈希值, 其他变种则包括以太坊的 Merkle patricia tree 等. Merkle 树有诸多优点: 首先是极大地提高了区块链的运行效率和可扩展性, 使得区块头只需包含根哈希值而不必封装所有底层数据, 这使得哈希运算可以高效地运行在智能手机甚至物联网设备上; 其次是 Merkle 树可支持 “简化支付验证” 协议, 即在不运行完整区块链网络节点的情况下, 也能够对 (交易) 数据进行检验.例如, 为验证图 3 中交易 6, 一个没有下载完整区块链数据的客户端可以通过向其他节点索要包括从交易 6 哈希值沿 Merkle 树上溯至区块头根哈希处的哈希序列 (即哈希节点 6, 5, 56, 78, 5 678, 1 234) 来快速确认交易的存在性和正确性. 一般说来, 在 N个交易组成的区块体中确认任一交易的算法复杂度仅为 log2N. 这将极大地降低区块链运行所需的带宽和验证时间, 并使得仅保存部分相关区块链数据的轻量级客户端成为可能。</p></li><li><p>非对称加密：非对称加密是为满足安全性需求和所有权验证需求而集成到区块链中的加密技术,常见算法包括 RSA、Elgamal、Rabin、D-H、ECC(即椭圆曲线加密算法) 等. 非对称加密通常在加密和解密过程中使用两个非对称的密码, 分别称为公钥和私钥. 非对称密钥对具有两个特点, 首先是用其中一个密钥 (公钥或私钥) 加密信息后, 只有另一个对应的密钥才能解开; 其次是公钥可向其他人公开、私钥则保密, 其他人无法通过该公钥推算出相应的私钥. 非对称加密技术在区块链的应用场景主要包括信息加密、数字签名和登录认证等, 其中信息加密场景主要是由信息发送者 (记为 A) 使用接受者 (记为 B) 的公钥对信息加密后再发送给 B, B 利用自己的私钥对信息解密. 比特币交易的加密即属于此场景; 数字签名场景则是由发送者 A 采用自己的私钥加密信息后发送给 B, B 使用 A 的公钥对信息解密、从而可确保信息是由 A 发送的; 登录认证场景则是由客户端使用私钥加密登录信息后发送给服务器, 后者接收后采用该客户端的公钥解密并认证登录信息。</p></li></ul><p>3.网络层：</p><ul><li><p>组网方式：区块链系统的节点一般具有分布式、自治性、开放可自由进出等特性, 因而一般采用对等式网络 (Peer-to-peer network, P2P 网络) 来组织散布全球的参与数据验证和记账的节点. P2P 网络中的每个节点均地位对等且以扁平式拓扑结构相互连通和交互, 不存在任何中心化的特殊节点和层级结构, 每个节点均会承担网络路由、验证区块数据、传播区块数据、发现新节点等功能. 按照节点存储数据量的不同, 可以分为全节点和轻量级节点. 前者保存有从创世区块到当前最新区块为止的完整区块链数据, 并通过实时参与区块数据的校验和记账来动态更新主链. 全节点的优势在于不依赖任何其他节点而能够独立地实现任意区块数据的校验、查询和更新, 劣势则是维护全节点的空间成本较高。轻量级节点则仅保存一部分区块链数据，并通过简易支付验证方式向其相邻节点请求所需的数据来完成数据校验。</p></li><li><p>数据传播协议：任一区块数据生成后, 将由生成该数据的节点广播到全网其他所有的节点来加以验证. 现有的区块链系统一般根据实际应用需求设计比特币传播协议的变种, 例如以太坊区块链集成了所谓的 “幽灵协议” 以解决因区块数据确认速度快而导致的高区块作废率和随之而来的安全性风险. 根据中本聪的设计, 比特币系统的交易数据传播协议包括如下步骤而导致的高区块作废率和随之而来的安全性风险. 根据中本聪的设计, 比特币系统的交易数据传播协议包括如下步骤: </p><ul><li>1) 比特币交易节点将新生成的交易数据向全网所有节点进行广播;</li><li>2) 每个节点都将收集到的交易数据存储到一个区块中;</li><li>3) 每个节点基于自身算力在区块中找到一个具有足够难度的工作量证明;</li><li>4) 当节点找到区块的工作量证明后, 就向全网所有节点广播此区块;</li><li>5) 仅当包含在区块中的所有交易都是有效的且之前未存在过的, 其他节点才认同该区块的有效性;</li><li>6) 其他节点接受该数据区块, 并在该区块的末尾制造新的区块以延长该链条, 而将被接受区块的随机哈希值视为先于新区块的随机哈希值。</li></ul></li><li><p>数据验证机制：P2P 网络中的每个节点都时刻监听比特币网络中广播的数据与新区块. 节点接收到邻近节点发来的数据后, 将首先验证该数据的有效性. 如果数据有效, 则按照接收顺序为新数据建立存储池以暂存尚未记入区块的有效数据, 同时继续向邻近节点转发; 如果数据无效, 则立即废弃该数据, 从而保证无效数据不会在区块链网络继续传播. 以比特币为例, 比特币的矿工节点会收集和验证P2P 网络中广播的尚未确认的交易数据, 并对照预定义的标准清单, 从数据结构、语法规范性、输入输出和数字签名等各方面校验交易数据的有效性, 并将有效交易数据整合到当前区块中; 同理, 当某矿工“挖” 到新区块后, 其他矿工节点也会按照预定义标准来校验该区块是否包含足够工作量证明, 时间戳是否有效等; 如确认有效, 其他矿工节点会将该区块链接到主区块链上, 并开始竞争下一个新区块.</p></li></ul><p>4.共识层</p><ul><li>区块链技术的核心优势之一就是能够在决策权高度分散的去中心化系统中使得各节点高效地针对区块数据的有效性达成共识。</li></ul><p><strong>下面将介绍一下PoW、PoS和DPOS三种共识机制</strong></p><ul><li><p><strong>PoW共识：</strong>其核心思想是通过引入分布式节点的算力竞争来保证数据一致性和共识的安全性. 比特币系统中, 各节点 (即矿工) 基于各自的计算机算力相互竞争来共同解决一个求解复杂但验证容易的 SHA256 数学难题 (即挖矿), 最快解决该难题的节点将获得区块记账权和系统自动生成的比特币奖励. 该数学难题可表述为: 根据当前难度值, 通过搜索求解一个合适的随机数 (Nonce) 使得区块各元数据的双 SHA256 哈希值小于或等于目标哈 希值. 比特币系统通过灵活调整随机数搜索的难度值来控制区块的平均生成时间为10分钟左右. 一般说来, PoW共识的随机数搜索过程如下：</p><ul><li>步骤 1. 搜集当前时间段的全网未确认交易, 并增加一个用于发行新比特币奖励的 Coinbase 交易,形成当前区块体的交易集合; </li><li>步骤 2. 计算区块体交易集合的 Merkle 根记 入区块头, 并填写区块头的其他元数据, 其中随机数 Nonce 置零; </li><li>步骤 3. 随机数 Nonce 加 1; 计算当前区块头的双 SHA256 哈希值, 如果小于或等于目标哈希值, 则成功搜索到合适的随机数并获得该区块的记账权; 否则继续步骤3直到任一节点搜索到合适的随机数为止; </li><li>步骤 4. 如果一定时间内未成功, 则更新时间戳和未确认交易集合、重新计算 Merkle 根后继续搜索.</li></ul></li><li><p>符合要求的区块头哈希值通常由多个前导零构成, 目标哈希值越小, 区块头哈希值的前导零越多, 成功找到合适的随机数并“挖”出新区块的难度越大. 据区块链实时监测网站Blockchain.info显示, 截止到2016年2月, 符合要求的区块头哈希值一般有17个前导零, 例如第398346号区块哈希值为“0000000000000000077f754f22f21629a7975cf···”. 按照概率计算, 每 16 次随机数搜索将会有找到一 个含有一个前导零的区块哈希值, 因而比特币目前 17 位前导零哈希值要求 1617 次随机数搜索才能找 到一个合适的随机数并生成一个新的区块. 由此可 见, 比特币区块链系统的安全性和不可篡改性是由 PoW 共识机制的强大算力所保证的, 任何对于区块数据的攻击或篡改都必须重新计算该区块以及其后所有区块的SHA256难题, 并且计算速度必须使得伪造链长度超过主链, 这种攻击难度导致的成本将远超其收益。</p></li><li><p><strong>PoS共识机制:</strong> PoS 共识是为解决PoW共识机制的资源浪费和安全性缺陷而提出的替代方案. PoS 共识本质上是采用权益证明来代替PoW中的基于哈希算力的工作量证明, 是由系统中具有最高权益而非最高算力的节点获得区块记账权. 权益体现为节点对特定数量货币的所有权, 称为币龄或币天数 (Coin days). 币龄是特定数量的币与其最后一次交易的时间长度的乘积, 每次交易都将会消耗掉特定数量的币龄. 例如, 某人在一笔交易中收到10个币后并持有10天, 则获得100币龄; 而后其花掉5个币后, 则消耗掉 50 币龄. 显然, 采用PoS共识机制的系统在特定时间点上的币龄总数是有限的, 长期持币者更倾向于拥有更多币龄, 因此币龄可视为其在PoS系统中的权益. 此外, PoW共识过程中各节点挖矿难度相同, 而 PoS 共识过程中的难度与交易输入的币龄成反比, 消耗币龄越多则挖矿难度越低. 节点判断主链的标准也由 PoW 共识的最高累计难度转变为最高消耗币龄, 每个区块的交易都会将其消耗的币龄提交给该区块, 累计消耗币龄最高的区块将被链接到主链. 由此可见, PoS 共识过程仅依靠内部币龄和权益而不需要消耗外部算力和资源, 从根本上解决了PoW共识算力浪费的问题, 并且能够在一定程度上缩短达成共识的时间, 因而比特币之后的许多竞争币均采用PoS共识机制。</p></li><li><p><strong>DPoS 共识机制:</strong>  DPoS 共识机制的基本思路类似于“董事会决策”, 即系统中每个股东节点可以将其持有的股份权益作为选票授予一个代表, 获得票数最多且愿意成为代表的前101个节点将进入“董事会”, 按照既定的时间表轮流对交易进行打包结算并且签署 (即生产) 一个新区块. 每个区块被签署之前, 必须先验证前一个区块已经被受信任的代表节点所签署. “董事会” 的授权代表节点可以从每笔交易的手续费中获得收入, 同时要成为授权代表节点必须缴纳一定量的保证金, 其金额相当于生产一个区块收入的100倍. 授权代表节点必须对其他股东节点负责, 如果其错过签署相对应的区块, 则股东将会收回选票从而将该节点 “投出” 董事会. 因此, 授权代表节点通常必须保证 99% 以上的在线时间以实现盈利目标. 显然, 与 PoW 共识机制必须信任最高算力节点和 PoS 共识机制必须信任最高权益节点不同的是, DPoS 共识机制中每个节点都能够自主决定其信任的授权节点且由这些节点轮流记账生成新区块, 因而大幅减少了参与验证和记账的节点数量, 可以实现快速共识验证。</p></li></ul><p>5.激励层：</p><ul><li>区块链共识过程通过汇聚大规模共识节点的算力资源来实现共享区块链账本的数据验证和记账工作, 因而其本质上是一种共识节点间的任务众包过程. 去中心化系统中的共识节点本身是自利的, 最大化自身收益是其参与数据验证和记账的根本目标. 因此, 必须设计激励相容的合理众包机制, 使得共识节点最大化自身收益的个体理性行为与保障去中心化区块链系统的安全和有效性的整体目标相吻合. 区块链系统通过设计适度的经济激励机制并与共识过程相集成, 从而汇聚大规模的节点参与并形成了对区块链历史的稳定共识. </li><li>以比特币为例, 比特币PoW 共识中的经济激励由新发行比特币奖励和交易流通过程中的手续费两部分组成, 奖励给PoW共识过程中成功搜索到该区块的随机数并记录该区块的节点. 因此, 只有当各节点通过合作共同构建共享和可信的区块链历史记录、并维护比特币系统的有效性, 其获得的比特币奖励和交易手续费才会有价值. 比特币已经形成成熟的挖矿生态圈, 大量配备专业矿机设备的矿工积极参与基于挖矿的PoW共识过程, 其根本目的就是通过获取比特币奖励并转换为相应法币来实现盈利. </li><li><strong>发行机制:</strong> 比特币系统中每个区块发行比特币的数量是随着时间阶梯性递减的. 创世区块起的每个区块将发行 50 个比特币奖励给该区块的记账者, 此后每隔约4年 (21 万个区块) 每区块发行比特币的数量降低一半, 依此类推, 一直到比特币的数量稳定在上限 2100 万为止。比特币交易过程中会产生手续费, 目前默认手续费是万分之一个比特币, 这部分费用也会记入区块并奖励给记账者. 这两部分费用将会封装在每个区块的第一个交易 (称为 Coinbase 交易) 中. 虽然现在每个区块的总手续费相对于新发行比特币来说规模很小 (通常不会超过 1 个比特币), 但随着未来比特币发行数量的逐步减少甚至停止发行, 手续费将逐渐成为驱动节点共识和记账的主要动力. 同时, 手续费还可以防止大量微额交易对比特币网络发起的 “粉尘” 攻击, 起到保障安 全的作用. </li><li><strong>分配机制:</strong> 比特币系统中, 大量的小算力节点通常会选择加入矿池, 通过相互合作汇集算力来提高 “挖” 到新区块的概率, 并共享该区块的比特币和手续费奖励. 据Bitcoinmining.com统计, 目前 已经存在13种不同的分配机制. 主流矿池通常采用PPLNS(Pay per last N shares)、PPS(Pay per share)和PROP(PROPortionately)等机制. 矿池将各节点贡献的算力按比例划分成不同的股份 (Share), 其中 PPLNS 机制是指发现区块后, 各合 作节点根据其在最后 N 个股份内贡献的实际股份 比例来分配区块中的比特币; PPS 则直接根据股份 比例为各节点估算和支付一个固定的理论收益, 采用此方式的矿池将会适度收取手续费来弥补其为各节点承担的收益不确定性风险; PROP 机制则根据节点贡献的股份按比例地分配比特币. <em>矿池的出现是对比特币和区块链去中心化趋势的潜在威胁, 如何设计合理的分配机制引导各节点合理地合作、避免出现因算力过度集中而导致的安全性问题是亟待解决的研究问题.</em> </li></ul><p>6.合约层：</p><ul><li>合约层封装区块链系统的各类脚本代码、算法 以及由此生成的更为复杂的智能合约. 如果说数据、 网络和共识三个层次作为区块链底层 “虚拟机” 分别承担数据表示、数据传播和数据验证功能的话, 合约层则是建立在区块链虚拟机之上的商业逻辑和算法, 是实现区块链系统灵活编程和操作数据的基础. 包括比特币在内的数字加密货币大多采用非图灵完备的简单脚本代码来编程控制交易过程, 这也是智能合约的雏形; 随着技术的发展, 目前已经出现以太坊等图灵完备的可实现更为复杂和灵活的智能合约的脚本语言, 使得区块链能够支持宏观金融和社会系统的诸多应用. </li><li>比特币采用一种简单的、基于堆栈的、从左向右处理的脚本语言, 而一个脚本本质上是附着在比特币交易上的一组指令的列表. 比特币交易依赖于两类脚本来加以验证, 即锁定脚本和解锁脚本, 二者的不同组合可在比特币交易中衍生出无限数量的控制条件. 其中, 锁定脚本是附着在交易输出值上的 “障碍”, 规定以后花费这笔交易输出的条件; 解锁脚本则是满足被锁定脚本在一个输出上设定的花费条件的脚本, 同时它将允许输出被消费.举例来说, 大多数比特币交易均是采用接受者的公钥加密和私钥解密, 因而其对应的 P2PKH (Pay to public key hash) 标准交易脚本中的锁定脚本即是使用接受者的公钥实现阻止输出功能, 而使用私钥对应的数字签名来加以解锁. </li><li>比特币脚本系统可以实现灵活的交易控制. 例如, 通过规定某个时间段 (如一周) 作为解锁条件, 可以实现延时支付; 通过规定接受者和担保人必须共同私钥签名才能支配一笔比特币, 可以实现担保交易; 通过设计一种可根据外部信息源核查某概率事件是否发生的规则并作为解锁脚本附着在一定数量的比特币交易上, 即可实现博彩和预测市场等类型的应用; 通过设定 N 个私钥集合中至少提供 M 个私钥才可解锁, 可实现 M −N 型多重签名, 即 N 个潜在接受者中至少有 M 个同意签名才可实现支付. 多重签名可广泛应用于公司决策、财务监督、中介担保甚至遗产分配等场景.</li><li>比特币脚本是智能合约的雏形, 催生了人类历史上第一种可编程的全球性货币. 然而, 比特币脚本系统是非图灵完备的, 其中不存在复杂循环和流控制, 这在损失一定灵活性的同时能够极大地降低复杂性和不确定性, 并能够避免因无限循环等逻辑炸弹而造成拒绝服务等类型的安全性攻击. 为提高脚本系统的灵活性和可扩展性, 研究者已经尝试在比特币协议之上叠加新的协议, 以满足在区块链上构建更为复杂的智能合约的需求. 以太坊已经研发出一套图灵完备的脚本语言, 用户可基于以太坊构建任意复杂和精确定义的智能合约与去中心化应用, 从而为基于区块链构建可编程的金融与社会系统奠 定了基础.</li></ul><h2 id="区块链的应用场景"><a href="#区块链的应用场景" class="headerlink" title="区块链的应用场景"></a>区块链的应用场景</h2><p><strong>区块链主要应用于数字货币、数据存储、数据鉴证、金融交易、资产管理和选举投票共六个场景</strong></p><ul><li><strong>数据存储：</strong>区块链的高冗余存储 (每个节点存储一份数据)、去中心化、高安全性和隐私保护等特点使其特别适合存储和保护重要隐私数据, 以避免因中心化机构遭受攻击或权限管理不当而造成的大规模数据丢失或泄露. 与比特币交易数据类似地, 任意数据均可通过哈希运算生成相应的Merkle树并打包记入区块链, 通过系统内共识节点的算力和非对称加密技术来保证安全性. 区块链的多重签名技术可以灵活配置数据访问的权限, 例如必须获得指定 5 个人中 3 个人的私钥授权才可获得访问权限. 目前, 利用区块链来存储个人健康数据 (如电子病历、基因数据等) 是极具前景的应用领域, 此外存储各类重要 电子文件 (视频、图片、文本等) 乃至人类思想和意识等也有一定应用空间. </li><li><strong>数据鉴定：</strong>区块链数据带有时间戳、由共识节 点共同验证和记录、不可篡改和伪造, 这些特点使得区块链可广泛应用于各类数据公证和审计场景. 例如, 区块链可以永久地安全存储由政府机构核发的各类许可证、登记表、执照、证明、认证和记录等, 并可在任意时间点方便地证明某项数据的存在性和一定程度上的真实性. 包括德勤在内的多家专业审计公司已经部署区块链技术来帮助其审计师实现低成本和高效地实时审计; Factom 公司则基于区块链设计了一套准确的、可核查的和不可更改的审计公 证流程与方法. </li><li><strong>金融交易：</strong>区块链技术与金融市场应用有非常 高的契合度. 区块链可以在去中心化系统中自发地产生信用, 能够建立无中心机构信用背书的金融市场, 从而在很大程度上实现了 “金融脱媒”, 这对第三方支付、资金托管等存在中介机构的商业模式来说是颠覆性的变革; 在互联网金融领域, 区块链特别适合或者已经应用于股权众筹、P2P网络借贷和互联网保险等商业模式; 证券和银行业务也是区块链的重要应用领域, 传统证券交易需要经过中央结算机构、银行、证券公司和交易所等中心机构的多重协调, 而利用区块链自动化智能合约和可编程的特点, 能够极大地降低成本和提高效率, 避免繁琐的中心化清算交割过程, 实现方便快捷的金融产品交易; 同时, 区块链和比特币的即时到帐的特点可使得银行实现比 SWIFT 代码体系更为快捷、经济和安全的跨境转账; 这也是目前 R3CEV 和纳斯达克等各大银行、证券商和金融机构相继投入区块链技术研发的重要原因.</li><li><strong>资产管理：</strong>区块链在资产管理领域的应用具有 广泛前景, 能够实现有形和无形资产的确权、授权和实时监控. 对于无形资产来说, 基于时间戳技术和不可篡改等特点, 可以将区块链技术应用于知识产权保护、域名管理、积分管理等领域; 而对有形资产来说, 通过结合物联网技术为资产设计唯一标识并部署到区块链上, 能够形成 “数字智能资产”, 实现基于区块链的分布式资产授权和控制. 例如, 通过对房屋、车辆等实物资产的区块链密钥授权, 可以基于特定权限来发放和回收资产的使用权, 有助于 Airbnb 等房屋租赁或车辆租赁等商业模式实现自动化的资产交接; 通过结合物联网的资产标记和识别技术, 还可以利用区块链实现灵活的供应链管理和产品溯源等功能. </li><li><strong>选举投票：</strong>投票是区块链技术在政治事务中的代表性应用. 基于区块链的分布式共识验证、不可篡改等特点, 可以低成本高效地实现政治选举、企业股东投票等应用; 同时, 区块链也支持用户个体对特定议题的投票. 例如, 通过记录用户对特定事件是否发生的投票, 可以将区块链应用于博彩和预测市场等场景; 通过记录用户对特定产品的投票评分与建议, 可以实现大规模用户众包设计产品的 “社会制造” 模式等.</li></ul><p>*<em>根据实际应用场景和需求, 区块链技术已经演化出三种应用模式, 即公共链(Public blockchain)、联盟链(Consortiumblockchain) 和私有链(Private blockchain). *</em></p><ul><li>公共链是完全去中心化的区块链, 分布式系统的任何节点均可参与链上数据的读写、验证和共识过程, 并根据其 PoW 或 PoS 贡献获得相应的经济激励. 比特币是公共链的典型代表. </li><li>联盟链则是部分去中心化 (或称多中心化) 的区块链, 适用于多个实体构成的组织或联盟, 其共识过程受到预定义的一组节点控制, 例如生成区块需要获得10个预选的共识节点中的5个节点确认; </li><li>私有链则是完全中心化的区块链, 适用于特定机构的内部数据管理与审计等, 其写入权限由中心机构控制, 而读取权限可视需求有选择性地对外开放. </li></ul><h2 id="区块链的现存问题"><a href="#区块链的现存问题" class="headerlink" title="区块链的现存问题"></a>区块链的现存问题</h2><ul><li><p>安全问题：</p><ul><li>, 基于 PoW 共识过程的区块链主要面临的是 51% 攻击问题, 即节点通过掌握全网超过 51% 的算力就有能力成功篡改和伪造区块链数据. 以比特币为例, 据统计中国大型矿池的算力已占全网总算力的 60% 以上, 理论上这些矿池可以通过合作实施 51% 攻击, 从而实现比特币的双重支付. 虽然实际系统中为掌握全网 51% 算力所需的成本投入远超成功实施攻击后的收益, 但 51% 攻击的安全性威胁始终存在. 基于 PoS 共识过程在一定程度上解决了 51% 攻击问题, 但同时也引入了区块分叉时的 N@S (Nothing at stake) 攻击问题. </li><li>区块链的非对称加密机制也将随着数学、密码学和计算技术的发展而变的越来越脆弱. 据估计, 以目前天河二号的算力来说, 产生比特币 SHA256 哈希算法的一个哈希碰撞大约需要 248 年, 但随着量子计算机等新计算技术的发展, 未来非对称加密算法具有一定的破解可能性, 这也是区块链技术面临的潜在安全威胁. </li><li>区块链的隐私保护也存在安全性风险. 区块链系统内各节点并非完全匿名, 而是通过类似电子邮件地址的地址标识 (例如比特币公钥地址) 来实现数据传输. 虽然地址标识并未直接与真实世界的人物身份相关联, 但区块链数据是完全公开透明的, 随着各类反匿名身份甄别技术的发展, 实现部分重点目标的定位和识别仍是有可能的.</li></ul></li><li><p>效率问题：</p><ul><li>区块膨胀问题：区块链要求系统内每个节点保存一份数据备份, 这对于日益增长的海量数据存储来说是极为困难的. 以比特币为例, 完全同步自创世区块至今的区块数据需要约 60GB 存储空间.</li><li>交易效率问题：比特币区块链目前每秒仅能处理 7 笔交易, 这极大地限制了区块链在大多数金融系统高频交易场景中的应用 (例如 VISA 信用卡每秒最多可处理 10000 笔交易).</li><li>交易确认时间问题: 比特币区块生成时间为10分钟, 因而交易确认时间一般为10分钟, 这在一定程度上限制了比特币在小额交易和时间敏感交易中的应用. </li></ul></li><li><p>资源问题：</p><ul><li>PoW 共识过程高度依赖区块链网络节点贡献的算力, 这些算力主要用于解决 SHA256 哈希和随机数搜索, 除此之外并不产生任何实际社会价值, 因而一般意义上认为这些算力资源是被 “浪费” 掉了, 同时被浪费掉的还有大量的电力资源. 随着比特币的日益普及和专业挖矿设备的出现, 比特币生态圈已经在资本和设备方面呈现出明显的军备竞赛态势, 逐渐成为高耗能的资本密集型行业, 进一步凸显资源消耗问题的重要性.</li></ul></li><li><p>博弈问题：</p><ul><li>区块链网络作为去中心化的分布式系统, 其各节点在交互过程中不可避免地会存在相互竞争与合作的博弈关系, 这在比特币挖矿过程中尤为明显. 通常来说, 比特币矿池间可以通过相互合作保持各自稳定的收益. 然而, 矿池可以通过称为区块截留攻击 (Block withholding attacks) 的方式、通过伪装为对手矿池的矿工、享受对手矿池的收益但不实际贡献完整工作量证明来攻击其他矿池, 从而降低对手矿池的收益. 如果矿池相互攻击, 则双方获得的收益均少于不攻击对方的收益. 当矿池收益函数满足特定条件时, 这种攻击和竞争将会造成 “<a href="https://zh.wikipedia.org/wiki/%E5%9B%9A%E5%BE%92%E5%9B%B0%E5%A2%83" target="_blank" rel="noopener">囚徒困境</a>”博弈结局.  </li><li>此外, 正如前文提到的, 区块链共识过程本质上是<a href="https://zh.wikipedia.org/wiki/%E4%BC%97%E5%8C%85" target="_blank" rel="noopener">众包</a>过程, 如何设计激励相容的共识机制, 使得去中心化系统中的自利节点能够自发地实施区块数据的验证和记账工作, 并提高系统内非理性行为的成本以抑制安全性攻击和威胁, 是区块链有待解决的重要科学问题.</li></ul></li></ul><h2 id="基于区块链的智能合约"><a href="#基于区块链的智能合约" class="headerlink" title="基于区块链的智能合约"></a>基于区块链的智能合约</h2><ul><li><p>智能合约是区块链的核心构成要素 (合约层), 是由事件驱动的、具有状态的、运行在可复制的共享区块链数据账本上的计算机程序, 能够实现主动或被动的处理数据, 接受、储存和发送价值, 以及控制和管理各类链上智能资产等功能.  </p></li><li><p>智能合约作为一种嵌入式程序化合约, 可以内置在任何区块链数据、交易、 有形或无形资产上, 形成可编程控制的软件定义的系统、市场和资产. 智能合约不仅为传统金融资产的发行、交易、创造和管理提供了创新性的解决方案, 同时能够在社会系统中的资产管理、合同管理、监管执法等事务中发挥重要作用.</p></li><li><p>智能合约的运作机理如图 5 所示: 通常情况下, 智能合约经各方签署后, 以程序代码的形式附着在区块链数据 (例如一笔比特币交易) 上, 经 P2P 网络传播和节点验证后记入区块链的特定区块中. 智能合约封装了预定义的若干状态及转换规则、触发合约执行的情景 (如到达特定时间或发生特定事件等)、特定情景下的应对行动等. 区块链可实时监控智能合约的状态, 并通过核查外部数据源、确认满足特定触发条件后激活并执行合约.</p></li></ul><p><img src="https://img-blog.csdn.net/20180913160026238?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li><p><strong>智能合约的应用举例</strong>：</p><ul><li>互联网金融领域的股权众筹或 P2P 网络借贷等商业模式可以通过区块链和智能合约加以实现. 传统方式是通过股权众筹或 P2P 借贷的交易所或网络平台作为中心机构完成资金募集、管理和投资, 实际操作过程中容易出现因中心机构的信用缺失而导致的资金风险. 利用智能合约, 这些功能均可以封装在去中心化可信的区块链上自动执行. 区块链可记录每一笔融资, 当成功达到特定融资额度时计算每个投资人的股权份额, 或在一段时间内未达到融资额度时自动将资金退还给投资人. </li><li>再如, 通过将房屋和车辆等实体资产进行非对称加密, 并嵌入含有特定访问控制规则的智能合约后部署在区块链上, 使用者符合特定的访问权限或执行特定操作 (如付款) 后就可使用这些资产, 这能够有效解决房屋或车辆租赁商业模式中资产交接和使用许可方面的痛点. </li></ul></li><li><p><strong>智能合约特点及意义</strong>：</p><ul><li>智能合约具有自治、自足和去中心化等特征. 自 表示合约一旦启动就会自动运行, 而不需要其他签署方进行任何干预; 自足则意味着合约能够通过提供服务或发行资产来获取资金, 并在需要时使用这些资金; 去中心化则意味着智能合约是由去中心化存储和验证的程序代码而非中心化实体来保障执行的合约, 能在很大程度上保证合约的公平和公正性. </li><li>智能合约对于区块链技术来说具有重要的意义. 一方面, 智能合约是区块链的激活器, 为静态的底层区块链数据赋予了灵活可编程的机制和算法, 并为构建区块链 2.0 和 3.0 时代的可编程金融系统与社会系统奠定了基础; 另一方面, 智能合约的自动化和可编程特性使其可封装分布式区块链系统中各节点的复杂行为, 成为区块链构成的虚拟世界中的软件代理机器人, 这有助于促进区块链技术在各类分布式人工智能系统中的应用, 使得基于区块链技 术构建各类去中心化应用 (Decentralized application, Dapp)、去中心化自治组织(Decentralized autonomous organization, DAO)、去中心化自治公司 (Decentralized autonomous corporation, DAC) 甚至去中心化自治社会 (Decentralized autonomous society, DAS) 成为可能. </li><li>就现状而言, 区块链和智能合约技术的主要发展趋势是由自动化向智能化方向演化. 现存的各类智能合约及其应用的本质逻辑大多仍是根据预定义场景的 “IF-THEN” 类型的条件响应规则, 能够满足目前自动化交易和数据处理的需求. 未来的智能合约应具备根据未知场景的 “WHAT-IF” 推演、计算实验和一定程度上的自主决策功能, 从而实现由目前 “自动化” 合约向真正的 “智能” 合约的飞跃.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;阅读自区块链技术发展现状与展望（袁勇 王飞跃）的报告并节选其中内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;区块链简介&quot;&gt;&lt;a href=&quot;#区块链简介&quot; class=&quot;headerlink&quot; title=&quot;区块链简介&quot;&gt;&lt;/a&gt;区块链简介&lt;/h2&gt;&lt;ol&gt;
&lt;l
      
    
    </summary>
    
      <category term="区块链" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>图像缩放的c++实现</title>
    <link href="http://yoursite.com/2019/07/05/%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%9A%84c++%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/05/图像缩放的c++实现/</id>
    <published>2019-07-05T09:08:41.000Z</published>
    <updated>2019-07-05T14:43:07.449Z</updated>
    
    <content type="html"><![CDATA[<ul><li>用了CImg库和opencv实现图片的缩放<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3></li></ul><p><strong>Zooming and Shrinking Images by Pixel Replication</strong>   </p><ul><li>(a) Write a computer program capable of zooming and shrinking an image by pixel replication. Assume that the desired zoom/shrink factors are integers.  You may ignore aliasing effects.  You will need to  download Fig. 2.19(a).</li><li>(b) Download Fig. 2.19 (a) and use your program to shrink the image from 1024 x 1024 to 256 x 256 pixels. </li><li>(c) Use your program to zoom the image in (b) back to 1024 x 1024.  Explain the reasons for their differences.   </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// image2.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CImg.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cimg_library;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line">CImg&lt;<span class="keyword">int</span>&gt; near_change(CImg&lt;<span class="keyword">int</span>&gt; img, <span class="keyword">int</span> x, <span class="keyword">int</span> y);</span><br><span class="line">CImg&lt;<span class="keyword">int</span>&gt; linear_change(CImg&lt;<span class="keyword">int</span>&gt; img, <span class="keyword">int</span> x, <span class="keyword">int</span> y);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// - - - - project 3 - - - -</span></span><br><span class="line">CImg&lt;<span class="keyword">int</span>&gt; SrcImg(<span class="string">"E:/Desktop/picture_process/Lenna/test.jpg"</span>);</span><br><span class="line">SrcImg.resize(<span class="number">256</span>, <span class="number">256</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//SrcImg.resize(1024, 1024,1,1,5);</span></span><br><span class="line">SrcImg = near_change(SrcImg, <span class="number">512</span>, <span class="number">512</span>);</span><br><span class="line"><span class="comment">//SrcImg = linear_change(SrcImg, 512, 512);</span></span><br><span class="line">SrcImg.display();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">CImg&lt;<span class="keyword">int</span>&gt; near_change(CImg&lt;<span class="keyword">int</span>&gt; img, <span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line"><span class="keyword">double</span> scale_x = (<span class="keyword">double</span>) img.height()/x;</span><br><span class="line"><span class="keyword">double</span> scale_y = (<span class="keyword">double</span>) img.width()/y;</span><br><span class="line">CImg&lt;<span class="keyword">int</span>&gt; pic(x,y,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> x0 = (<span class="keyword">int</span>) i * scale_x;</span><br><span class="line"><span class="keyword">int</span> y0 = (<span class="keyword">int</span>) j * scale_y;</span><br><span class="line">pic(i, j) = img(x0, y0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pic;</span><br><span class="line">&#125;</span><br><span class="line">CImg&lt;<span class="keyword">int</span>&gt; linear_change(CImg&lt;<span class="keyword">int</span>&gt; img, <span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line"><span class="keyword">double</span> scale_x = (<span class="keyword">double</span>)img.height() / x;</span><br><span class="line"><span class="keyword">double</span> scale_y = (<span class="keyword">double</span>)img.width() / y;</span><br><span class="line">CImg&lt;<span class="keyword">int</span>&gt; pic(x, y, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++) &#123;</span><br><span class="line"><span class="keyword">float</span> fx = (<span class="keyword">float</span>)((i + <span class="number">0.5</span>)*scale_x - <span class="number">0.5</span>);</span><br><span class="line"><span class="keyword">float</span> fy = (<span class="keyword">float</span>)((j + <span class="number">0.5</span>)*scale_y - <span class="number">0.5</span>);</span><br><span class="line"><span class="keyword">int</span> sx = cvFloor(fx);</span><br><span class="line"><span class="keyword">int</span> sy = cvFloor(fy);</span><br><span class="line">fx -= sx;</span><br><span class="line">fy -= sy;</span><br><span class="line">sx = min(sx, img.height());</span><br><span class="line">sx = max(<span class="number">0</span>, sx);</span><br><span class="line">sy = min(sy, img.width());</span><br><span class="line">sy = max(<span class="number">0</span>, sy);</span><br><span class="line"><span class="keyword">short</span> cbufx[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">short</span> cbufy[<span class="number">2</span>];</span><br><span class="line">cbufx[<span class="number">0</span>] = cv::saturate_cast&lt;<span class="keyword">short</span>&gt;((<span class="number">1.f</span> - fx) * <span class="number">2048</span>);</span><br><span class="line"><span class="comment">/*if ((1.f - fx) * 2048 &lt; 0) &#123;</span></span><br><span class="line"><span class="comment">cbufx[0] = 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else if ((1.f - fx) * 2048 &gt; 255) &#123;</span></span><br><span class="line"><span class="comment">cbufx[0] = 255;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else &#123;</span></span><br><span class="line"><span class="comment">cbufx[0] = (1.f - fx) * 2048;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">cbufx[<span class="number">1</span>] = <span class="number">2048</span> - cbufx[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/*if ((1.f - fy) * 2048 &lt; 0) &#123;</span></span><br><span class="line"><span class="comment">cbufy[0] = 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else if ((1.f - fy) * 2048 &gt; 255) &#123;</span></span><br><span class="line"><span class="comment">cbufy[0] = 255;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else &#123;</span></span><br><span class="line"><span class="comment">cbufy[0] = (1.f - fy) * 2048;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">cbufy[<span class="number">0</span>] = cv::saturate_cast&lt;<span class="keyword">short</span>&gt;((<span class="number">1.f</span> - fy) * <span class="number">2048</span>);</span><br><span class="line">cbufy[<span class="number">1</span>] = <span class="number">2048</span> - cbufy[<span class="number">0</span>];</span><br><span class="line">pic(i, j) = (img(sx, sy)*cbufx[<span class="number">0</span>]*cbufy[<span class="number">0</span>] + img(sx+<span class="number">1</span>,sy)*cbufx[<span class="number">1</span>]*cbufy[<span class="number">0</span>]+img(sx,sy+<span class="number">1</span>)*cbufx[<span class="number">0</span>]*cbufy[<span class="number">1</span>]+img(sx+<span class="number">1</span>,sy+<span class="number">1</span>)*cbufx[<span class="number">1</span>]*cbufy[<span class="number">1</span>]) &gt;&gt;<span class="number">22</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;用了CImg库和opencv实现图片的缩放&lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Zooming and Shri
      
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数字图像处理" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>c++实现八种不同的灰度效果</title>
    <link href="http://yoursite.com/2019/07/05/%E5%AE%9E%E7%8E%B0%E5%85%AB%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E7%81%B0%E5%BA%A6%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2019/07/05/实现八种不同的灰度效果/</id>
    <published>2019-07-05T09:08:15.000Z</published>
    <updated>2019-07-05T14:42:32.108Z</updated>
    
    <content type="html"><![CDATA[<ul><li>使用CImg库</li></ul><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>Reducing the Number of Gray Levels in an Image  </p><ul><li>(a) Write a computer program capable of reducing the number of gray levels in a image from 256 to 2, in integer powers of 2.  The desired number of gray levels needs to be a variable input to your program. </li><li>(b) Download Fig. 2.21(a) and duplicate the results shown in Fig. 2.21 of the book. </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// image2.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CImg.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cimg_library;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">CImg&lt;<span class="keyword">int</span>&gt; SrcImg(<span class="string">"E:/Desktop/picture_process/Lenna/lena512.bmp"</span>);</span><br><span class="line">SrcImg.resize(SrcImg.width(), SrcImg.height(), <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//SrcImg.display();</span></span><br><span class="line"><span class="built_in">string</span> picture = <span class="string">"picture"</span>;</span><br><span class="line"><span class="built_in">string</span> a = picture + to_string(i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">char</span>* m = (<span class="keyword">char</span>*)a.c_str();</span><br><span class="line"><span class="keyword">int</span> huidu = <span class="number">256</span>;</span><br><span class="line"><span class="keyword">switch</span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">huidu = <span class="number">256</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">huidu = <span class="number">128</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">huidu = <span class="number">64</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">huidu = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">huidu = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">huidu = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">huidu = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">huidu = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (huidu == <span class="number">256</span>) &#123;</span><br><span class="line">SrcImg.display(m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cimg_forXY(SrcImg, x, y) &#123;</span><br><span class="line"><span class="keyword">int</span> level = SrcImg(x, y) / (<span class="number">256</span> / huidu);</span><br><span class="line">SrcImg(x, y) = level*<span class="number">255</span>/(huidu<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">SrcImg.display(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="https://img-blog.csdn.net/20180926194558895?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20180926194700948?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdn.net/20180926194724614?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20180926194749730?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20180926194807907?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20180926194824359?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20180926194844868?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20180926194905655?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;使用CImg库&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h3&gt;&lt;p&gt;Reducing the Number of Gray Levels in 
      
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数字图像处理" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>c++实现半色调程序</title>
    <link href="http://yoursite.com/2019/07/05/%E5%AE%9E%E7%8E%B0%E5%8D%8A%E8%89%B2%E8%B0%83%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/07/05/实现半色调程序/</id>
    <published>2019-07-05T09:06:36.000Z</published>
    <updated>2019-07-05T14:41:42.414Z</updated>
    
    <content type="html"><![CDATA[<ul><li>利用c++的CImg库和用于矩阵处理的Eigen库来实现</li><li>编译工具：visual stdio(建议使用，之前我也使用sublime来配置c++的各种库，总是各种bug)<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3></li></ul><p>Image Printing Program Based on Halftoning   The following figure shows ten shades of gray approximated by dot patterns.  Each gray level is represented by a 3 x 3 pattern of black and white dots.  A 3 x 3 area full of black dots is the approximation to gray-level black, or 0.  Similarly, a 3 x 3 area of white dots represents gray level 9, or white.  The other dot patterns are approximations to gray levels in between these two extremes.  A gray-level printing scheme based on dots patterns such as these is called “halftoning.”  Note that each pixel in an input image will correspond to 3 x 3 pixels on the printed image, so spatial resolution will be reduced to 33% of the original in both the vertical and horizontal direction.  Size scaling as required in (a) may further reduce resolution, depending on the size of the input image. </p><ul><li><p>(a) Write a halftoning computer program for printing gray-scale images based on the dot patterns just discussed.  Your program must be able to scale the size of an input image so that it does not exceed the area available in a sheet of size 8.5 x 11 inches (21.6 x 27.9 cm).  Your program must also scale the gray levels of the input image to span the full halftoning range.</p></li><li><p>(b) Write a program to generate a test pattern image consisting of a gray scale wedge of size 256 x 256, whose first column is all 0’s, the next column is all 1’s, and so on, with the last column being 255’s.  Print this image using your gray-scale printing program.</p></li><li><p>(c) Print book Figs. 2.22(a) through (c) using your gray-scale printing program.  Do your results agree with the conclusions arrived at in the text in pgs. 61-62 and Fig. 2.23?  Explain. You will need to download Figs. 2.22(a) through (c). </p><p><img src="https://img-blog.csdn.net/20180926153625918?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// image2.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CImg.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cimg_library;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CImg&lt;<span class="keyword">int</span>&gt; SrcImg;</span><br><span class="line">SrcImg.load_bmp(<span class="string">"E:/Desktop/picture_process/Lenna/general_img.bmp"</span>);</span><br><span class="line"><span class="keyword">double</span> r = (<span class="keyword">double</span>)SrcImg.height() / <span class="number">272</span>;</span><br><span class="line"><span class="keyword">double</span> c = (<span class="keyword">double</span>)SrcImg.width() / <span class="number">352</span>;</span><br><span class="line"><span class="keyword">double</span> scale = max(r, c);</span><br><span class="line"><span class="keyword">if</span> (scale &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> s = (<span class="keyword">double</span>)<span class="number">1.0</span> / scale;</span><br><span class="line">SrcImg.resize(s*SrcImg.height(), s*SrcImg.width(),<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">MatrixXd <span class="title">m</span><span class="params">(<span class="number">3</span>*SrcImg.height(), <span class="number">3</span>*SrcImg.width())</span></span>;</span><br><span class="line">MatrixXd dot_mat[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">dot_mat[i] = MatrixXd::Zero(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">dot_mat[<span class="number">1</span>] &lt;&lt; <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>;</span><br><span class="line">dot_mat[<span class="number">2</span>] &lt;&lt; <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>;</span><br><span class="line">dot_mat[<span class="number">3</span>] &lt;&lt; <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>;</span><br><span class="line">dot_mat[<span class="number">4</span>] &lt;&lt; <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>;</span><br><span class="line">dot_mat[<span class="number">5</span>] &lt;&lt; <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>;</span><br><span class="line">dot_mat[<span class="number">6</span>] &lt;&lt; <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>,</span><br><span class="line"><span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>;</span><br><span class="line">dot_mat[<span class="number">7</span>] &lt;&lt; <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>,</span><br><span class="line"><span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>;</span><br><span class="line">dot_mat[<span class="number">8</span>] &lt;&lt; <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line"><span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>,</span><br><span class="line"><span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>;</span><br><span class="line">dot_mat[<span class="number">9</span>] &lt;&lt; <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line"><span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line"><span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">cimg_forXY(SrcImg, x, y) &#123;</span><br><span class="line">SrcImg(x, y) = (<span class="keyword">int</span>)(SrcImg(x, y) / <span class="number">25.6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; SrcImg(0, 0, 0) &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SrcImg.height(); i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; SrcImg.width(); j++) &#123;</span><br><span class="line"><span class="keyword">int</span> level = SrcImg(i, j, <span class="number">0</span>);</span><br><span class="line">m.block&lt;<span class="number">3</span>,<span class="number">3</span>&gt;(i*<span class="number">3</span>,j*<span class="number">3</span>) &lt;&lt;  dot_mat[level];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">CImg&lt;<span class="keyword">int</span>&gt; tmp(m.rows(), m.cols(), <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">cimg_forXY(tmp, x, y) &#123;</span><br><span class="line">tmp(x, y) = m(x, y);</span><br><span class="line">&#125;</span><br><span class="line">tmp.display();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原图</strong>：<br><img src="https://img-blog.csdn.net/20180926153844331?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p><strong>处理后的图片：</strong><br><img src="https://img-blog.csdn.net/2018092615394153?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;利用c++的CImg库和用于矩阵处理的Eigen库来实现&lt;/li&gt;
&lt;li&gt;编译工具：visual stdio(建议使用，之前我也使用sublime来配置c++的各种库，总是各种bug)&lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数字图像处理" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>图的遍历</title>
    <link href="http://yoursite.com/2019/07/05/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/07/05/图的遍历/</id>
    <published>2019-07-05T09:00:53.000Z</published>
    <updated>2019-07-05T14:40:52.796Z</updated>
    
    <content type="html"><![CDATA[<ul><li>图的深度遍历和广度遍历</li><li>基于的数据结构是图的邻接表结构，详细可以看上一章节（<a href="https://blog.csdn.net/perry0528/article/details/82794564" target="_blank" rel="noopener">图的存储结构</a>）</li></ul><p><strong>深度遍历：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[<span class="number">100</span>]; <span class="comment">//用于表示节点是否被访问的标志位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Graph G, VertexType v)</span> </span>&#123;</span><br><span class="line">visited[v] = <span class="number">1</span>; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,v);</span><br><span class="line">ArcNode *e = G.vertices[v].first;</span><br><span class="line"><span class="keyword">while</span> (e) &#123;</span><br><span class="line">VertexType w = e-&gt;adjvex;</span><br><span class="line"><span class="keyword">if</span>(!visited[w])</span><br><span class="line">DFS(G,w);</span><br><span class="line">e = e-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; i++) visited[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!visited[i])</span><br><span class="line">DFS(G,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图的广度遍历：</strong></p><ul><li>其中广度遍历的实现调用了之前实现的一个循环队列的接口</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited1[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; ++i) &#123;</span><br><span class="line">visited1[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Queue Q;</span><br><span class="line">InitQueue(&amp;Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!visited1[i]) &#123;</span><br><span class="line">EnQueue(&amp;Q,i);</span><br><span class="line">visited1[i] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line"><span class="keyword">while</span>(!IsEmpty(Q)) &#123;</span><br><span class="line">VertexType u = Top(Q);</span><br><span class="line">DeQueue(&amp;Q);</span><br><span class="line">ArcNode *e = G.vertices[u].first;</span><br><span class="line"><span class="keyword">while</span> (e) &#123;</span><br><span class="line">VertexType w = e-&gt;adjvex;</span><br><span class="line"><span class="keyword">if</span>(!visited1[w]) &#123;</span><br><span class="line">visited1[w] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,w);</span><br><span class="line">EnQueue(&amp;Q, w);</span><br><span class="line">&#125;</span><br><span class="line">e = e-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">DestroyQueue(&amp;Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>下面是包含图的创建的一个基本实现：</strong></p><ul><li><p>Adj_DFS.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Vertex_Num 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VertexType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储弧的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> adjvex; <span class="comment">//该弧所指向的顶点的位置</span></span><br><span class="line"><span class="keyword">int</span> info; <span class="comment">//该弧的权值</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">next</span>;</span> <span class="comment">//指向下一条弧的指针</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储顶点的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span> &#123;</span></span><br><span class="line">VertexType data;</span><br><span class="line">ArcNode *first;<span class="comment">//指向第一条依附该顶点的弧的指针</span></span><br><span class="line">&#125;VNode, AdjList[Vertex_Num];</span><br><span class="line"></span><br><span class="line"><span class="comment">//图</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">AdjList vertices;</span><br><span class="line"><span class="keyword">int</span> vexnum, arcnum; <span class="comment">//图的顶点数和弧数</span></span><br><span class="line">&#125;Graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> visited1[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(Graph *G)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入顶点数，边数:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入顶点\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G-&gt;vertices[i].data);</span><br><span class="line">G-&gt;vertices[i].first = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请选择你要建立的存储类型，1表示邻接表，0表示逆邻接表:\n"</span>);</span><br><span class="line"><span class="keyword">int</span> choice;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line"><span class="keyword">int</span> vex1, vex2, weight;</span><br><span class="line"><span class="keyword">if</span> (choice != <span class="number">1</span> &amp;&amp; choice != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入有错，请重新输入\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (choice == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">1</span>; j &lt;= G-&gt;arcnum; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入边的两个顶点以及权值:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;vex1, &amp;vex2, &amp;weight);</span><br><span class="line">ArcNode *edge = (ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">edge-&gt;adjvex = vex2;</span><br><span class="line">edge-&gt;info = weight;</span><br><span class="line">ArcNode *e = G-&gt;vertices[vex1].first;</span><br><span class="line"><span class="keyword">if</span> (e == <span class="literal">NULL</span>) &#123;</span><br><span class="line">G-&gt;vertices[vex1].first = edge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (e-&gt;next != <span class="literal">NULL</span>) e = e-&gt;next;</span><br><span class="line">e-&gt;next = edge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">1</span>; j &lt;= G-&gt;arcnum; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入边的两个顶点以及权值:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;vex1, &amp;vex2, &amp;weight);</span><br><span class="line">ArcNode *edge = (ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">edge-&gt;adjvex = vex1;</span><br><span class="line">edge-&gt;info = weight;</span><br><span class="line">edge-&gt;next = G-&gt;vertices[vex2].first;</span><br><span class="line">G-&gt;vertices[vex2].first = edge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Graph G, VertexType v)</span> </span>&#123;</span><br><span class="line">visited[v] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,v);</span><br><span class="line">ArcNode *e = G.vertices[v].first;</span><br><span class="line"><span class="keyword">while</span> (e) &#123;</span><br><span class="line">VertexType w = e-&gt;adjvex;</span><br><span class="line"><span class="keyword">if</span>(!visited[w])</span><br><span class="line">DFS(G,w);</span><br><span class="line">e = e-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; i++) visited[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!visited[i])</span><br><span class="line">DFS(G,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; ++i) &#123;</span><br><span class="line">visited1[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Queue Q;</span><br><span class="line">InitQueue(&amp;Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(!visited1[i]) &#123;</span><br><span class="line">EnQueue(&amp;Q,i);</span><br><span class="line">visited1[i] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line"><span class="keyword">while</span>(!IsEmpty(Q)) &#123;</span><br><span class="line">VertexType u = Top(Q);</span><br><span class="line">DeQueue(&amp;Q);</span><br><span class="line">ArcNode *e = G.vertices[u].first;</span><br><span class="line"><span class="keyword">while</span> (e) &#123;</span><br><span class="line">VertexType w = e-&gt;adjvex;</span><br><span class="line"><span class="keyword">if</span>(!visited1[w]) &#123;</span><br><span class="line">visited1[w] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,w);</span><br><span class="line">EnQueue(&amp;Q, w);</span><br><span class="line">&#125;</span><br><span class="line">e = e-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">DestroyQueue(&amp;Q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Graph G;</span><br><span class="line">    CreateGraph(&amp;G);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"|%d|-&gt;"</span>, G.vertices[i].data);</span><br><span class="line">        ArcNode *e = G.vertices[i].first;</span><br><span class="line">        <span class="keyword">while</span>(e != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>, e-&gt;adjvex);</span><br><span class="line">            e = e-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"NULL\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"深度优先遍历\n"</span>);</span><br><span class="line">    DFSTraverse(G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"广度优先遍历\n"</span>);</span><br><span class="line">    BFSTraverse(G);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>queue.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXQSIZE 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Item *base;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*initialize the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(Queue *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the length of the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Destroy the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyQueue</span><span class="params">(Queue *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*determine if the queue is empty*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*determine if the queue is full*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsFull</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the head elem of the queue*/</span></span><br><span class="line"><span class="function">Item <span class="title">Top</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the back elem of the queue*/</span></span><br><span class="line"><span class="function">Item <span class="title">Back</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*enqueue, insert the rear*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(Queue *q, Item e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*dequeue, pop the front*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(Queue *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintQueue</span><span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>queue.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">q-&gt;base = (Item*)<span class="built_in">malloc</span>(MAXQSIZE * <span class="keyword">sizeof</span>(Item));</span><br><span class="line"><span class="keyword">if</span> (q-&gt;base == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">q-&gt;front = <span class="number">0</span>;</span><br><span class="line">q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the length of the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q.rear - q.front + MAXQSIZE) % MAXQSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Destroy the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyQueue</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">q-&gt;base = <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">q-&gt;front = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(q-&gt;base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*determine if the queue is empty*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.rear == q.front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsFull</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q.rear + <span class="number">1</span>) % MAXQSIZE == q.front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the head elem of the queue*/</span></span><br><span class="line"><span class="function">Item <span class="title">Top</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.base[q.front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the back elem of the queue*/</span></span><br><span class="line"><span class="function">Item <span class="title">Back</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> q.base[(q.rear - <span class="number">1</span> + MAXQSIZE) % MAXQSIZE];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*enqueue, insert the rear*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(Queue *q, Item e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (IsFull(*q))</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">q-&gt;base[q-&gt;rear] = e;</span><br><span class="line">q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*dequeue, pop the front*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(IsEmpty(*q))</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the queue*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintQueue</span><span class="params">(Queue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = q.front; i &lt; QueueLength(q); i++, j = (j + <span class="number">1</span>) % MAXQSIZE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,q.base[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用于检验的测试范例，输入文本【in.txt】：</p></li></ul><p><img src="https://img-blog.csdn.net/20180925211532398?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">8 </span><span class="number">18</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">7</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">8</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">8</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">6 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">6 </span><span class="number">7</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">8 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">8 </span><span class="number">5</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><p><img src="https://img-blog.csdn.net/20180925211619828?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;图的深度遍历和广度遍历&lt;/li&gt;
&lt;li&gt;基于的数据结构是图的邻接表结构，详细可以看上一章节（&lt;a href=&quot;https://blog.csdn.net/perry0528/article/details/82794564&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>图的四种存储结构的实现</title>
    <link href="http://yoursite.com/2019/07/05/%E5%9B%BE%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/05/图的四种存储结构的实现/</id>
    <published>2019-07-05T08:59:35.000Z</published>
    <updated>2019-07-05T14:40:08.912Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1. 数组表示法（邻接矩阵法）：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY INT_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxvex 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">graph</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> vexs[Maxvex+<span class="number">1</span>];  <span class="comment">//顶点</span></span><br><span class="line"><span class="keyword">int</span> AdjMatrix[Maxvex+<span class="number">1</span>][Maxvex+<span class="number">1</span>]; <span class="comment">//邻接矩阵</span></span><br><span class="line"><span class="keyword">int</span> vexsnum, edgenum; <span class="comment">//顶点数，边数</span></span><br><span class="line">&#125;Graph;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(Graph *G)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入顶点数，边数："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;G-&gt;vexsnum, &amp;G-&gt;edgenum);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexsnum; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G-&gt;vexs[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= G-&gt;vexsnum; j++) &#123;</span><br><span class="line">G-&gt;AdjMatrix[i][j] = INFINITY;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> row, col, w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;edgenum; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入边坐标i,j,权值:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;row, &amp;col, &amp;w);</span><br><span class="line">G-&gt;AdjMatrix[row][col] = w;</span><br><span class="line">G-&gt;AdjMatrix[col][row] = w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">Graph G;</span><br><span class="line">CreateGraph(&amp;G);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.邻接表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Vertex_Num 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VertexType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储弧的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> adjvex; <span class="comment">//该弧所指向的顶点的位置</span></span><br><span class="line"><span class="keyword">int</span> info; <span class="comment">//该弧的权值</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">next</span>;</span> <span class="comment">//指向下一条弧的指针</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储顶点的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span> &#123;</span></span><br><span class="line">VertexType data;</span><br><span class="line">ArcNode *first;<span class="comment">//指向第一条依附该顶点的弧的指针</span></span><br><span class="line">&#125;VNode, AdjList[Vertex_Num];</span><br><span class="line"></span><br><span class="line"><span class="comment">//图</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">AdjList vertices;</span><br><span class="line"><span class="keyword">int</span> vexnum, arcnum; <span class="comment">//图的顶点数和弧数</span></span><br><span class="line">&#125;Graph;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(Graph *G)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入顶点数，边数:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入顶点\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G-&gt;vertices[i].data);</span><br><span class="line">G-&gt;vertices[i].first = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请选择你要建立的存储类型，1表示邻接表，0表示逆邻接表:\n"</span>);</span><br><span class="line"><span class="keyword">int</span> choice;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line"><span class="keyword">int</span> vex1, vex2, weight;</span><br><span class="line"><span class="keyword">if</span> (choice != <span class="number">1</span> &amp;&amp; choice != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入有错，请重新输入\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (choice == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">1</span>; j &lt;= G-&gt;arcnum; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入边的两个顶点以及权值:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;vex1, &amp;vex2, &amp;weight);</span><br><span class="line">ArcNode *edge = (ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">edge-&gt;adjvex = vex2;</span><br><span class="line">edge-&gt;info = weight;</span><br><span class="line">edge-&gt;next = G-&gt;vertices[vex1].first;</span><br><span class="line">G-&gt;vertices[vex1].first = edge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">1</span>; j &lt;= G-&gt;arcnum; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入边的两个顶点以及权值:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;vex1, &amp;vex2, &amp;weight);</span><br><span class="line">ArcNode *edge = (ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">edge-&gt;adjvex = vex1;</span><br><span class="line">edge-&gt;info = weight;</span><br><span class="line">edge-&gt;next = G-&gt;vertices[vex2].first;</span><br><span class="line">G-&gt;vertices[vex2].first = edge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Graph G;</span><br><span class="line">    CreateGraph(&amp;G);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"|%d|-&gt;"</span>, G.vertices[i].data);</span><br><span class="line">        ArcNode *e = G.vertices[i].first;</span><br><span class="line">        <span class="keyword">while</span>(e != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>, e-&gt;adjvex);</span><br><span class="line">            e = e-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"NULL\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><ul><li>邻接表：</li></ul><p><img src="https://img-blog.csdn.net/20180921205516312?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><ul><li>逆邻接表：<br><img src="https://img-blog.csdn.net/20180921205617481?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><strong>c++按顺序实现：</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邻接表和逆邻接表的c++表示</span></span><br><span class="line"><span class="comment">//主要表现的为有向图</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Vertex_Num 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> adjvex;</span><br><span class="line">ArcNode *nextarc;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">ArcNode *first;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> VNode AdjList[Vertex_Num];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">AdjList vertices;</span><br><span class="line"><span class="keyword">int</span> vexnum, arcnum; <span class="comment">//图的顶点数和弧数</span></span><br><span class="line"><span class="keyword">int</span> kind;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findData</span><span class="params">(AdjList adj, <span class="keyword">int</span> num, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (adj[i].data == v) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(Graph *G)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入顶点数和弧数: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G-&gt;vexnum &gt;&gt; G-&gt;arcnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入顶点: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;vexnum; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G-&gt;vertices[i].data;</span><br><span class="line">G-&gt;vertices[i].first = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入你要存储的类型: 0表示邻接表, 1表示逆邻接表: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G-&gt;kind;</span><br><span class="line"><span class="keyword">if</span> (G-&gt;kind == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;arcnum; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要存储的弧尾和弧头："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line"><span class="keyword">int</span> i0 = findData(G-&gt;vertices, G-&gt;vexnum, v1);</span><br><span class="line">ArcNode *arc0 = <span class="keyword">new</span> ArcNode;</span><br><span class="line">arc0-&gt;adjvex = v2;</span><br><span class="line">arc0-&gt;nextarc = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (G-&gt;vertices[i0].first == <span class="literal">NULL</span>) &#123;</span><br><span class="line">G-&gt;vertices[i0].first = arc0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ArcNode *head = G-&gt;vertices[i0].first;</span><br><span class="line"><span class="keyword">while</span> (head-&gt;nextarc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">head = head-&gt;nextarc;</span><br><span class="line">&#125;</span><br><span class="line">head-&gt;nextarc = arc0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (G-&gt;kind == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;arcnum; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要存储的弧尾和弧头："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2 &gt;&gt; v1;</span><br><span class="line"><span class="keyword">int</span> i0 = findData(G-&gt;vertices, G-&gt;vexnum, v1);</span><br><span class="line">ArcNode *arc0 = <span class="keyword">new</span> ArcNode;</span><br><span class="line">arc0-&gt;adjvex = v2;</span><br><span class="line">arc0-&gt;nextarc = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (G-&gt;vertices[i0].first == <span class="literal">NULL</span>) &#123;</span><br><span class="line">G-&gt;vertices[i0].first = arc0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ArcNode *head = G-&gt;vertices[i0].first;</span><br><span class="line"><span class="keyword">while</span> (head-&gt;nextarc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">head = head-&gt;nextarc;</span><br><span class="line">&#125;</span><br><span class="line">head-&gt;nextarc = arc0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintGraph</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"|"</span> &lt;&lt; G.vertices[i].data &lt;&lt; <span class="string">"|"</span> &lt;&lt; <span class="string">"-&gt;"</span>;</span><br><span class="line">ArcNode *head = G.vertices[i].first;</span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; head-&gt;adjvex &lt;&lt; <span class="string">"-&gt;"</span>;</span><br><span class="line">head = head-&gt;nextarc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">Graph g;</span><br><span class="line">CreateGraph(&amp;g);</span><br><span class="line">PrintGraph(g);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/20190120031445425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20190120031526945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>3. 十字链表：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// - - - - - 有向图的十字链表存储结构 - - - - -</span></span><br><span class="line"><span class="comment">//相当于把有向图的邻接表和逆邻接表结合到一起得到的一种链表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERTEX_NUM 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VertexType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弧结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcBox</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> tailvex, headvex; <span class="comment">//弧头和弧尾的位置</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcBox</span> *<span class="title">hlink</span>, *<span class="title">tlink</span>;</span> <span class="comment">//分别指向下一个弧头和弧尾相同的链域</span></span><br><span class="line"><span class="keyword">int</span> info;  <span class="comment">//弧的权值</span></span><br><span class="line">&#125;ArcBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顶点结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VexNode</span> &#123;</span></span><br><span class="line">VertexType data;</span><br><span class="line">ArcBox *firstin, *firstout;</span><br><span class="line">&#125;VexNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">VexNode xlist[VERTEX_NUM]; <span class="comment">//表头向量</span></span><br><span class="line"><span class="keyword">int</span> vexnum, arcnum; <span class="comment">//有向图的当前顶点数和弧数</span></span><br><span class="line">&#125;Graph;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(Graph *G)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入顶点数，弧数:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;G-&gt;vexnum, &amp;G-&gt;arcnum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入顶点:\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G-&gt;xlist[i].data);</span><br><span class="line">G-&gt;xlist[i].firstin = <span class="literal">NULL</span>;</span><br><span class="line">G-&gt;xlist[i].firstout = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> vex1, vex2, weight;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;arcnum; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入弧尾，弧头，弧的权值\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;vex1, &amp;vex2, &amp;weight);</span><br><span class="line">ArcBox *e = (ArcBox*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcBox));</span><br><span class="line">e-&gt;tailvex = vex1;</span><br><span class="line">e-&gt;headvex = vex2;</span><br><span class="line">e-&gt;tlink = <span class="literal">NULL</span>;</span><br><span class="line">e-&gt;hlink = <span class="literal">NULL</span>;</span><br><span class="line">e-&gt;tlink = G-&gt;xlist[vex1].firstout;</span><br><span class="line">G-&gt;xlist[vex1].firstout = e;</span><br><span class="line">e-&gt;hlink = G-&gt;xlist[vex2].firstin;</span><br><span class="line">G-&gt;xlist[vex2].firstin = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 邻接多重表：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// - - - - - 图的邻接多重表存储表示 - - - - -</span></span><br><span class="line"><span class="comment">// - - - - - - 更适用于无向图 - - - - - -</span></span><br><span class="line"><span class="comment">// - - 相比邻接表更方便对某一条边进行操作 - -</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERTEX_NUM 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;unvisited, visited&#125; VisitIf;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EBox</span> &#123;</span></span><br><span class="line">VisitIf mark; <span class="comment">//访问标记</span></span><br><span class="line"><span class="keyword">int</span> ivex, jvex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EBox</span> *<span class="title">ilink</span>, *<span class="title">jlink</span>;</span> <span class="comment">//分别指向依附这两个顶点的下一条边</span></span><br><span class="line"><span class="keyword">int</span> info; <span class="comment">//权值</span></span><br><span class="line">&#125;EBox;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VexBox</span> &#123;</span></span><br><span class="line">VertexType data;</span><br><span class="line">EBox *firstedge; <span class="comment">//指向第一条依附该顶点的边</span></span><br><span class="line">&#125;VexBox;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">VexBox adjmulist[VERTEX_NUM];</span><br><span class="line"><span class="keyword">int</span> vexnum, edgenum; <span class="comment">//图的顶点数和弧数</span></span><br><span class="line">&#125;Graph;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(Graph *G)</span> </span>&#123;</span><br><span class="line"><span class="comment">//G = (Graph*)malloc(sizeof(Graph)); </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入点数，弧数\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;G-&gt;vexnum, &amp;G-&gt;edgenum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入顶点\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G-&gt;adjmulist[i].data);</span><br><span class="line">G-&gt;adjmulist[i].firstedge = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> v1, v2, weight;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= G-&gt;edgenum; k++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入两个顶点v1,v2以及弧的权值\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v1,&amp;v2,&amp;weight);</span><br><span class="line">EBox *edge = (EBox*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EBox));</span><br><span class="line">edge-&gt;mark = unvisited;</span><br><span class="line">edge-&gt;ivex = v1;</span><br><span class="line">edge-&gt;jvex = v2;</span><br><span class="line">edge-&gt;info = weight;</span><br><span class="line">edge-&gt;ilink = <span class="literal">NULL</span>;</span><br><span class="line">edge-&gt;jlink = <span class="literal">NULL</span>;</span><br><span class="line">EBox *p = G-&gt;adjmulist[v1].firstedge;</span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line">G-&gt;adjmulist[v1].firstedge = edge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span>((p-&gt;ilink != <span class="literal">NULL</span> &amp;&amp; p-&gt;ivex == v1) || (p-&gt;jlink != <span class="literal">NULL</span> &amp;&amp; p-&gt;jvex == v1)) &#123;</span><br><span class="line"><span class="keyword">if</span>(v1 == p-&gt;ivex) </span><br><span class="line">p = p-&gt;ilink; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">p = p-&gt;jlink; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(p-&gt;ivex == v1) p-&gt;ilink = edge; </span><br><span class="line"><span class="keyword">else</span> p-&gt;jlink = edge;  </span><br><span class="line">&#125;</span><br><span class="line">p = G-&gt;adjmulist[v2].firstedge;</span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line">G-&gt;adjmulist[v2].firstedge = edge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span>((p-&gt;ilink != <span class="literal">NULL</span> &amp;&amp; p-&gt;ivex == v2) || (p-&gt;jlink != <span class="literal">NULL</span> &amp;&amp; p-&gt;jvex == v2)) &#123;</span><br><span class="line"><span class="keyword">if</span>(v2 == p-&gt;ivex) </span><br><span class="line">p = p-&gt;ilink; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p = p-&gt;jlink; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(p-&gt;ivex == v2) p-&gt;ilink = edge; </span><br><span class="line"><span class="keyword">else</span> p-&gt;jlink = edge; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintGraph</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EBox *p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G.vexnum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = G.adjmulist[i].firstedge;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;ivex == i)    <span class="comment">//判断相等才能知道连接上的是ivex还是jvex;</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d--%d\n"</span>, G.adjmulist[p-&gt;ivex].data, G.adjmulist[p-&gt;jvex].data);</span><br><span class="line">                p = p-&gt;ilink;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d--%d\n"</span>, G.adjmulist[p-&gt;jvex].data, G.adjmulist[p-&gt;ivex].data);</span><br><span class="line">                p = p-&gt;jlink;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">Graph G;</span><br><span class="line">CreateGraph(&amp;G);</span><br><span class="line">PrintGraph(G);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="https://img-blog.csdn.net/20180921205942347?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><strong>c++实现：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无向图的邻接多重表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM 20</span></span><br><span class="line"><span class="keyword">enum</span> VisitIf &#123;unvisited, visited&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EBox</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">VisitIf mark; <span class="comment">//访问标记</span></span><br><span class="line"><span class="keyword">int</span> ivex, jvex; <span class="comment">//该边依附的两个顶点位置</span></span><br><span class="line">EBox *ilink, *jlink; <span class="comment">//分别指向依附这两个顶点的下一条边</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VexBox</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T data;</span><br><span class="line">EBox *firstedge; <span class="comment">//指向第一条依附该顶点的边</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AMLGraph</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">VexBox&lt;T&gt; adjmulist[MAX_VERTEX_NUM];</span><br><span class="line"><span class="keyword">int</span> vexnum, edgenum; <span class="comment">//无向图的当前顶点数和边数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(VexBox&lt;T&gt; adj[], <span class="keyword">int</span> num, T v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (adj[i].data == v) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(AMLGraph&lt;T&gt; *G)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入顶点数和弧数: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G-&gt;vexnum &gt;&gt; G-&gt;edgenum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入顶点: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;vexnum; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G-&gt;adjmulist[i].data;</span><br><span class="line">G-&gt;adjmulist[i].firstedge = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;edgenum; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入边的两个顶点: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">T v1, v2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line"><span class="keyword">int</span> i1 = LocateVex(G-&gt;adjmulist, G-&gt;vexnum, v1);</span><br><span class="line"><span class="keyword">int</span> i2 = LocateVex(G-&gt;adjmulist, G-&gt;vexnum, v2);</span><br><span class="line"><span class="comment">//cout &lt;&lt; i1 &lt;&lt; "...." &lt;&lt; i2 &lt;&lt; endl;</span></span><br><span class="line">EBox *p = <span class="keyword">new</span> EBox;</span><br><span class="line">p-&gt;mark = unvisited;</span><br><span class="line">p-&gt;ivex = i1;</span><br><span class="line">p-&gt;jvex = i2;</span><br><span class="line">p-&gt;ilink = G-&gt;adjmulist[i1].firstedge;</span><br><span class="line">p-&gt;jlink = G-&gt;adjmulist[i2].firstedge;</span><br><span class="line">G-&gt;adjmulist[i1].firstedge = p;</span><br><span class="line">G-&gt;adjmulist[i2].firstedge = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintGraph</span><span class="params">(AMLGraph&lt;T&gt; G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EBox *p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = G.adjmulist[i].firstedge;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;ivex == i)    <span class="comment">//判断相等才能知道连接上的是ivex还是jvex;</span></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;  G.adjmulist[p-&gt;ivex].data &lt;&lt; <span class="string">"------"</span> &lt;&lt; G.adjmulist[p-&gt;jvex].data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="comment">//printf("%d--%d\n", G.adjmulist[p-&gt;ivex].data, G.adjmulist[p-&gt;jvex].data);</span></span><br><span class="line">                p = p-&gt;ilink;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">               <span class="built_in">cout</span> &lt;&lt;  G.adjmulist[p-&gt;jvex].data &lt;&lt; <span class="string">"------"</span> &lt;&lt; G.adjmulist[p-&gt;ivex].data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                p = p-&gt;jlink;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">AMLGraph&lt;<span class="built_in">string</span>&gt; g;</span><br><span class="line">CreateGraph(&amp;g);</span><br><span class="line">PrintGraph(g);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190120163425983.png" alt="在这里插入图片描述"><br>总结一下以上所有的表示形式中，邻接矩阵有向无向图都可用，但常用于表现无向图。邻接表也是有向无向都可用，但因为表示无向图会使边重复显得繁琐，所以常用于表示有向图。十字链表是将有向图的邻接表和逆邻接表相结合使用。而邻接多重表相当于无向图的十字链表表示法。无向图我们常用邻接矩阵和邻接多重表表示，尤其邻接多重表可避免双边的重复访问。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1. 数组表示法（邻接矩阵法）：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>哈夫曼树及哈夫曼编码的实现</title>
    <link href="http://yoursite.com/2019/07/05/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/05/哈夫曼树及哈夫曼编码的实现/</id>
    <published>2019-07-05T08:57:33.000Z</published>
    <updated>2019-07-05T14:38:16.309Z</updated>
    
    <content type="html"><![CDATA[<ul><li>代码带有注释，不详细解释，检测采用严蔚敏老师数据结构的一个范例</li></ul><p><strong>HuffmanCode.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HUFFMANCODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HUFFMANCODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> weight;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> parent, lchild, rchild;</span><br><span class="line"></span><br><span class="line">&#125;HTNode, *HuffmanTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ** HuffmanCode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HuffmanCoding</span><span class="params">(HuffmanTree *HT, HuffmanCode *HC, <span class="keyword">int</span> *w, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>HuffmanCode.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HuffmanCode.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Select</span><span class="params">(HuffmanTree HT, <span class="keyword">int</span> n, <span class="keyword">int</span> *s1, <span class="keyword">int</span> *s2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HuffmanCoding</span><span class="params">(HuffmanTree *HT, HuffmanCode *HC, <span class="keyword">int</span> *w, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n&lt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">(*HT) = (HuffmanTree)<span class="built_in">malloc</span>((m+<span class="number">1</span>)*<span class="keyword">sizeof</span>(HTNode));</span><br><span class="line">HuffmanTree p = (*HT) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i, s1, s2;</span><br><span class="line"><span class="keyword">for</span> (p = (*HT) + <span class="number">1</span>, i = <span class="number">1</span>; i &lt;= n; ++i, ++p, ++w) &#123;</span><br><span class="line">(*p).weight = *w;</span><br><span class="line">(*p).parent = <span class="number">0</span>;</span><br><span class="line">(*p).lchild = <span class="number">0</span>;</span><br><span class="line">(*p).rchild = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; i &lt;= m; ++i, ++p) &#123;</span><br><span class="line">(*p).weight = <span class="number">0</span>;</span><br><span class="line">(*p).parent = <span class="number">0</span>;</span><br><span class="line">(*p).lchild = <span class="number">0</span>;</span><br><span class="line">(*p).rchild = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = n + <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">Select((*HT), i<span class="number">-1</span>, &amp;s1, &amp;s2);</span><br><span class="line">(*HT)[s1].parent = i;</span><br><span class="line">(*HT)[s2].parent = i;</span><br><span class="line">(*HT)[i].lchild = s1;</span><br><span class="line">(*HT)[i].rchild = s2;</span><br><span class="line">(*HT)[i].weight = (*HT)[s1].weight + (*HT)[s2].weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// - - - 从叶子到根逆向求每个字符的哈夫曼编码 - - -</span></span><br><span class="line">(*HC) = (HuffmanCode)<span class="built_in">malloc</span>((n+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>*)); <span class="comment">//分配n个字符编码的头指针向量</span></span><br><span class="line"><span class="keyword">char</span> *cd = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">char</span>)); <span class="comment">//分配求编码的工作空间</span></span><br><span class="line"> cd[n<span class="number">-1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> start = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> c, f;</span><br><span class="line"><span class="keyword">for</span> (c = i, f = (*HT)[i].parent; f != <span class="number">0</span>; c = f, f = (*HT)[f].parent)</span><br><span class="line"><span class="keyword">if</span> ((*HT)[f].lchild == c)</span><br><span class="line">cd[--start] = <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">cd[--start] = <span class="string">'1'</span>;</span><br><span class="line">(*HC)[i] = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n - start) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="comment">/*for (int j = 0; j &lt; start; j++) &#123;</span></span><br><span class="line"><span class="comment">cd++;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="built_in">strcpy</span>((*HC)[i], &amp;cd[start]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Select</span><span class="params">(HuffmanTree HT, <span class="keyword">int</span> n, <span class="keyword">int</span> *s1, <span class="keyword">int</span> *s2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> min = INT_MAX, semin = INT_MAX;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (HT[i].parent == <span class="number">0</span> &amp;&amp; HT[i].weight &lt; min) &#123;</span><br><span class="line">min = HT[i].weight;</span><br><span class="line">*s1 = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">HT[*s1].parent = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (HT[i].parent == <span class="number">0</span> &amp;&amp; HT[i].weight &lt; semin) &#123;</span><br><span class="line">semin = HT[i].weight;</span><br><span class="line">*s2 = i;</span><br><span class="line"><span class="comment">//HT[i].parent = 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(*s1&gt;*s2) &#123;</span><br><span class="line">    <span class="keyword">int</span> j=*s1;</span><br><span class="line">    *s1=*s2;</span><br><span class="line">    *s2=j;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("%d\n%d\n",*s1,*s2);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HuffmanCode.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">HuffmanTree T;</span><br><span class="line">HuffmanCode C;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">8</span>] = &#123;<span class="number">5</span>,<span class="number">29</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">11</span>&#125;;</span><br><span class="line">HuffmanCoding(&amp;T, &amp;C, w, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,C[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行示例：</p><p><img src="https://img-blog.csdn.net/20180918112416405?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdn.net/20180918112442174?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p><strong>运行结果：</strong></p><p><img src="https://img-blog.csdn.net/20180918112507414?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;代码带有注释，不详细解释，检测采用严蔚敏老师数据结构的一个范例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HuffmanCode.h&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CImg库的配置以及简单使用</title>
    <link href="http://yoursite.com/2019/07/05/CImg%E5%BA%93%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/05/CImg库的配置以及简单使用/</id>
    <published>2019-07-05T08:56:02.000Z</published>
    <updated>2019-07-05T14:37:21.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-CImg的配置"><a href="#1-CImg的配置" class="headerlink" title="1. CImg的配置"></a>1. CImg的配置</h2><ul><li>下载CImg的包到指定的文件夹下，解压</li><li>然后只需要在编写的cpp或hpp文件中加入</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"XX/CImg.h"</span> <span class="comment">// XX/是指CImg所在的路径</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cimg_library;</span><br></pre></td></tr></table></figure><ul><li>编译命令（<strong>环境为windows下的MinGW</strong>）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -o HelloWorld.exe HelloWorld.cpp -O2 -lgdi32</span><br></pre></td></tr></table></figure><h2 id="2-简单使用"><a href="#2-简单使用" class="headerlink" title="2.简单使用"></a>2.简单使用</h2><h3 id="1-读入1-bmp-文件"><a href="#1-读入1-bmp-文件" class="headerlink" title="1. 读入1.bmp 文件"></a>1. 读入1.bmp 文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; SrcImg;</span><br><span class="line">SrcImg.load_bmp(<span class="string">"1.bmp"</span>);</span><br></pre></td></tr></table></figure><h3 id="2-用CImg-display-显示"><a href="#2-用CImg-display-显示" class="headerlink" title="2. 用CImg.display() 显示"></a>2. 用CImg.display() 显示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_display</span><span class="params">(CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; SrcImg)</span> </span>&#123;</span><br><span class="line">SrcImg.display(<span class="string">"work1"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180911172504476?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="3-把1-bmp文件的白色区域变成红色，黑色区域变成绿色"><a href="#3-把1-bmp文件的白色区域变成红色，黑色区域变成绿色" class="headerlink" title="3. 把1.bmp文件的白色区域变成红色，黑色区域变成绿色"></a>3. 把1.bmp文件的白色区域变成红色，黑色区域变成绿色</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_change</span><span class="params">(CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; SrcImg)</span> </span>&#123;</span><br><span class="line">CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; Img = SrcImg;</span><br><span class="line">cimg_forXY(Img, x, y) &#123;</span><br><span class="line"><span class="keyword">if</span> (Img(x,y,<span class="number">0</span>) == <span class="number">255</span> &amp;&amp; Img(x,y,<span class="number">1</span>) == <span class="number">255</span> &amp;&amp; Img(x,y,<span class="number">2</span>) == <span class="number">255</span>) &#123;</span><br><span class="line">Img(x,y,<span class="number">0</span>) = <span class="number">255</span>;</span><br><span class="line">Img(x,y,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">Img(x,y,<span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">cimg_forXY(Img, x, y) &#123;</span><br><span class="line"><span class="keyword">if</span> (Img(x,y,<span class="number">0</span>) == <span class="number">0</span> &amp;&amp; Img(x,y,<span class="number">1</span>) == <span class="number">0</span> &amp;&amp; Img(x,y,<span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">Img(x,y,<span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line">Img(x,y,<span class="number">1</span>) = <span class="number">255</span>;</span><br><span class="line">Img(x,y,<span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Img.display(<span class="string">"work2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180911172720226?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="4-在图上绘制一个圆形区域，圆心坐标-50-50-，半径为30，填充颜色为蓝色"><a href="#4-在图上绘制一个圆形区域，圆心坐标-50-50-，半径为30，填充颜色为蓝色" class="headerlink" title="4. 在图上绘制一个圆形区域，圆心坐标(50,50)，半径为30，填充颜色为蓝色"></a>4. 在图上绘制一个圆形区域，圆心坐标(50,50)，半径为30，填充颜色为蓝色</h3><ul><li><strong>未使用CImg的接口函数</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCircle_blue1</span><span class="params">(CImg &lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; TempImg)</span> </span>&#123;</span><br><span class="line">CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; SrcImg = TempImg;</span><br><span class="line">cimg_forXY(SrcImg, x, y) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pow</span>(<span class="built_in">pow</span>(x<span class="number">-50</span>,<span class="number">2</span>)+<span class="built_in">pow</span>(y<span class="number">-50</span>,<span class="number">2</span>),<span class="number">0.5</span>) &lt; <span class="number">30</span>) &#123;</span><br><span class="line">SrcImg(x,y,<span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">2</span>) = <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SrcImg.display(<span class="string">"work3.1"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdn.net/20180911172703683?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li><strong>使用接口函数draw_circle()</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCircle_blue2</span><span class="params">(CImg &lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; TempImg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> blue[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>&#125;;</span><br><span class="line">TempImg.draw_circle(<span class="number">50</span>, <span class="number">50</span>, <span class="number">30</span>, blue);</span><br><span class="line">TempImg.display(<span class="string">"work3.2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdn.net/20180911173035507?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="PS-这个感觉自己实现的算法和接口函数实现的效果差不多"><a href="#PS-这个感觉自己实现的算法和接口函数实现的效果差不多" class="headerlink" title="PS: 这个感觉自己实现的算法和接口函数实现的效果差不多"></a><em>PS: 这个感觉自己实现的算法和接口函数实现的效果差不多</em></h5><h3 id="5-在图上绘制一个圆形区域，圆心坐标-50-50-，半径为3，填充颜色为黄色"><a href="#5-在图上绘制一个圆形区域，圆心坐标-50-50-，半径为3，填充颜色为黄色" class="headerlink" title="5. 在图上绘制一个圆形区域，圆心坐标(50,50)，半径为3，填充颜色为黄色"></a>5. 在图上绘制一个圆形区域，圆心坐标(50,50)，半径为3，填充颜色为黄色</h3><ul><li><strong>未使用CImg的接口函数</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCircle_yellow1</span><span class="params">(CImg &lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; TempImg)</span> </span>&#123;</span><br><span class="line">CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; SrcImg = TempImg;</span><br><span class="line">cimg_forXY(SrcImg, x, y) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pow</span>(<span class="built_in">pow</span>(x<span class="number">-50</span>,<span class="number">2</span>)+<span class="built_in">pow</span>(y<span class="number">-50</span>,<span class="number">2</span>),<span class="number">0.5</span>) &lt; <span class="number">3</span>) &#123;</span><br><span class="line">SrcImg(x,y,<span class="number">0</span>) = <span class="number">200</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">1</span>) = <span class="number">155</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SrcImg.display(<span class="string">"work4.1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">![这里写图片描述](https:<span class="comment">//img-blog.csdn.net/20180911172544111?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdn.net/20180911172642532?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li><strong>使用接口函数draw_circle()</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCircle_yellow2</span><span class="params">(CImg &lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; TempImg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> yellow[] = &#123;<span class="number">200</span>, <span class="number">155</span>, <span class="number">0</span>&#125;;</span><br><span class="line">TempImg.draw_circle(<span class="number">50</span>, <span class="number">50</span>, <span class="number">3</span>, yellow);</span><br><span class="line">TempImg.display(<span class="string">"work4.2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180911173109345?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="PS-这个虽然接口函数的效果也并不是特别好，但是明显比我的要好很多，但是因为遍历图片的像素点是对图片进行采样所以点坐标为整数值，圆的半径越小意味着我们取的像素点范围越少，点越少，所以图片的效果会较差，甚至接近正方形，可能接口的函数有更好的实现方法，尝试去翻了翻源码没太看懂"><a href="#PS-这个虽然接口函数的效果也并不是特别好，但是明显比我的要好很多，但是因为遍历图片的像素点是对图片进行采样所以点坐标为整数值，圆的半径越小意味着我们取的像素点范围越少，点越少，所以图片的效果会较差，甚至接近正方形，可能接口的函数有更好的实现方法，尝试去翻了翻源码没太看懂" class="headerlink" title="PS: 这个虽然接口函数的效果也并不是特别好，但是明显比我的要好很多，但是因为遍历图片的像素点是对图片进行采样所以点坐标为整数值，圆的半径越小意味着我们取的像素点范围越少，点越少，所以图片的效果会较差，甚至接近正方形，可能接口的函数有更好的实现方法，尝试去翻了翻源码没太看懂"></a><em>PS: 这个虽然接口函数的效果也并不是特别好，但是明显比我的要好很多，但是因为遍历图片的像素点是对图片进行采样所以点坐标为整数值，圆的半径越小意味着我们取的像素点范围越少，点越少，所以图片的效果会较差，甚至接近正方形，可能接口的函数有更好的实现方法，尝试去翻了翻源码没太看懂</em></h5><h3 id="6-在图上绘制一条长为100的直线段，起点坐标为-0-0-，方向角为35度，直线的颜色为蓝色"><a href="#6-在图上绘制一条长为100的直线段，起点坐标为-0-0-，方向角为35度，直线的颜色为蓝色" class="headerlink" title="6. 在图上绘制一条长为100的直线段，起点坐标为(0, 0)，方向角为35度，直线的颜色为蓝色"></a>6. 在图上绘制一条长为100的直线段，起点坐标为(0, 0)，方向角为35度，直线的颜色为蓝色</h3><ul><li><strong>未使用CImg的接口函数</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawLine1</span><span class="params">(CImg &lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; TempImg)</span> </span>&#123;</span><br><span class="line">CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; SrcImg = TempImg;</span><br><span class="line"><span class="keyword">double</span> x0 = <span class="number">100</span>*<span class="built_in">cos</span>(<span class="number">35</span>*pi/<span class="number">180</span>);</span><br><span class="line"><span class="keyword">double</span> y0 = <span class="number">100</span>*<span class="built_in">sin</span>(<span class="number">35</span>*pi/<span class="number">180</span>);</span><br><span class="line">cimg_forXY(SrcImg, x, y) &#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">SrcImg(x,y,<span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">2</span>) = <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (cmp((<span class="keyword">double</span>)y, (<span class="keyword">double</span>)x*<span class="built_in">tan</span>(<span class="number">35</span>*pi/<span class="number">180</span>)) &amp;&amp; (<span class="keyword">double</span>)x &lt;= x0 &amp;&amp; (<span class="keyword">double</span>)y &lt;= y0) &#123;</span><br><span class="line">SrcImg(x,y,<span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">2</span>) = <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SrcImg.display(<span class="string">"work5.1"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于上面函数的一个辅助函数，来判断相等条件</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> x , <span class="keyword">double</span> y)</span> </span>&#123; <span class="comment">//compare x and y，如果差值小于一定范围则近似相等</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(x - y) &lt;= <span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180911172622568?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li><strong>使用接口函数draw_line()</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawLine2</span><span class="params">(CImg &lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; TempImg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> blue[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>&#125;;</span><br><span class="line">TempImg.draw_line(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>*<span class="built_in">cos</span>(<span class="number">35</span>*pi/<span class="number">180</span>),<span class="number">100</span>*<span class="built_in">sin</span>(<span class="number">35</span>*pi/<span class="number">180</span>),blue);</span><br><span class="line">TempImg.display(<span class="string">"work5.2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180911173133358?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="PS-这个比较效果感觉肉眼很难看出差距，但是因为遍历图片的像素点是对图片进行采样所以点坐标为整数值，所以不可能存在彻底等于所得的浮点数tan角要求的坐标，只能通过设置误差尽可能小，也就是直线的粗细，通过设置cmp函数调节几个值（0-1-0-3-0-5-1-0）发现0-5的效果是最好的。"><a href="#PS-这个比较效果感觉肉眼很难看出差距，但是因为遍历图片的像素点是对图片进行采样所以点坐标为整数值，所以不可能存在彻底等于所得的浮点数tan角要求的坐标，只能通过设置误差尽可能小，也就是直线的粗细，通过设置cmp函数调节几个值（0-1-0-3-0-5-1-0）发现0-5的效果是最好的。" class="headerlink" title="PS: 这个比较效果感觉肉眼很难看出差距，但是因为遍历图片的像素点是对图片进行采样所以点坐标为整数值，所以不可能存在彻底等于所得的浮点数tan角要求的坐标，只能通过设置误差尽可能小，也就是直线的粗细，通过设置cmp函数调节几个值（0.1, 0.3, 0.5, 1.0）发现0.5的效果是最好的。"></a><em>PS: 这个比较效果感觉肉眼很难看出差距，但是因为遍历图片的像素点是对图片进行采样所以点坐标为整数值，所以不可能存在彻底等于所得的浮点数tan角要求的坐标，只能通过设置误差尽可能小，也就是直线的粗细，通过设置cmp函数调节几个值（0.1, 0.3, 0.5, 1.0）发现0.5的效果是最好的。</em></h5><h3 id="7-把上面的操作结果保存为-2-bmp"><a href="#7-把上面的操作结果保存为-2-bmp" class="headerlink" title="7. 把上面的操作结果保存为 2.bmp"></a>7. 把上面的操作结果保存为 2.bmp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SrcImg.save(<span class="string">"2.bmp"</span>);</span><br></pre></td></tr></table></figure><h2 id="3-将上述实现的函数封装为c-的一个类"><a href="#3-将上述实现的函数封装为c-的一个类" class="headerlink" title="3. 将上述实现的函数封装为c++的一个类"></a>3. 将上述实现的函数封装为c++的一个类</h2><h3 id="ex-hpp"><a href="#ex-hpp" class="headerlink" title="ex.hpp:"></a>ex.hpp:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _EX_HPP_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _EX_HPP_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../CImg.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cimg_library;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">double</span> <span class="title">pi</span><span class="params">(<span class="number">3.14159265</span>)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Test();</span><br><span class="line">~Test();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Todisplay</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>; <span class="comment">//把1.bmp文件的白色区域变成红色，黑色区域变成绿色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCircle_blue1</span><span class="params">()</span></span>; <span class="comment">//不使用CImg函数在图上绘制一个圆形区域，圆心坐标(50,50)，半径为30，填充颜色为蓝色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCircle_yellow1</span><span class="params">()</span></span>;<span class="comment">//不使用CImg函数在图上绘制一个圆形区域，圆心坐标(50,50)，半径为3，填充颜色为黄色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawLine1</span><span class="params">()</span></span>;<span class="comment">//不使用CImg函数 在图上绘制一条长为100的直线段，起点坐标为(0, 0)，方向角为35度，直线的颜色为蓝色。 </span></span><br><span class="line"><span class="comment">//下面三个函数分别对应使用CImg函数的上述三个操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCircle_blue2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCircle_yellow2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawLine2</span><span class="params">()</span></span>;</span><br><span class="line">CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; getSrcImg();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//string name; //图片的名称</span></span><br><span class="line">CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; SrcImg; <span class="comment">//定义一副图片</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="ex-cpp"><a href="#ex-cpp" class="headerlink" title="ex.cpp"></a>ex.cpp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ex.hpp"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> x , <span class="keyword">double</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">Test::Test() &#123;</span><br><span class="line"><span class="comment">//name = "work1";</span></span><br><span class="line">SrcImg.load_bmp(<span class="string">"1.bmp"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test::~Test() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Test::Todisplay() &#123;</span><br><span class="line"><span class="comment">//string t = name;</span></span><br><span class="line">SrcImg.display(<span class="string">"homework"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; Test::getSrcImg() &#123;</span><br><span class="line"><span class="keyword">return</span> SrcImg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Test::change() &#123;</span><br><span class="line"><span class="comment">//name = "work2";</span></span><br><span class="line"><span class="comment">//CImg&lt;unsigned char&gt; Img = SrcImg;</span></span><br><span class="line">cimg_forXY(SrcImg, x, y) &#123;</span><br><span class="line"><span class="keyword">if</span> (SrcImg(x,y,<span class="number">0</span>) == <span class="number">255</span> &amp;&amp; SrcImg(x,y,<span class="number">1</span>) == <span class="number">255</span> &amp;&amp; SrcImg(x,y,<span class="number">2</span>) == <span class="number">255</span>) &#123;</span><br><span class="line">SrcImg(x,y,<span class="number">0</span>) = <span class="number">255</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">cimg_forXY(SrcImg, x, y) &#123;</span><br><span class="line"><span class="keyword">if</span> (SrcImg(x,y,<span class="number">0</span>) == <span class="number">0</span> &amp;&amp; SrcImg(x,y,<span class="number">1</span>) == <span class="number">0</span> &amp;&amp; SrcImg(x,y,<span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">SrcImg(x,y,<span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">1</span>) = <span class="number">255</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Test::DrawCircle_blue1() &#123;</span><br><span class="line">cimg_forXY(SrcImg, x, y) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pow</span>(<span class="built_in">pow</span>(x<span class="number">-50</span>,<span class="number">2</span>)+<span class="built_in">pow</span>(y<span class="number">-50</span>,<span class="number">2</span>),<span class="number">0.5</span>) &lt; <span class="number">30</span>) &#123;</span><br><span class="line">SrcImg(x,y,<span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">2</span>) = <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Test::DrawCircle_yellow1() &#123;</span><br><span class="line">cimg_forXY(SrcImg, x, y) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pow</span>(<span class="built_in">pow</span>(x<span class="number">-50</span>,<span class="number">2</span>)+<span class="built_in">pow</span>(y<span class="number">-50</span>,<span class="number">2</span>),<span class="number">0.5</span>) &lt; <span class="number">3</span>) &#123;</span><br><span class="line">SrcImg(x,y,<span class="number">0</span>) = <span class="number">200</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">1</span>) = <span class="number">155</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Test::DrawLine1() &#123;</span><br><span class="line"><span class="keyword">double</span> x0 = <span class="number">100</span>*<span class="built_in">cos</span>(<span class="number">35</span>*pi/<span class="number">180</span>);</span><br><span class="line"><span class="keyword">double</span> y0 = <span class="number">100</span>*<span class="built_in">sin</span>(<span class="number">35</span>*pi/<span class="number">180</span>);</span><br><span class="line">cimg_forXY(SrcImg, x, y) &#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">SrcImg(x,y,<span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">2</span>) = <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (cmp((<span class="keyword">double</span>)y, (<span class="keyword">double</span>)x*<span class="built_in">tan</span>(<span class="number">35</span>*pi/<span class="number">180</span>)) &amp;&amp; (<span class="keyword">double</span>)x &lt;= x0 &amp;&amp; (<span class="keyword">double</span>)y &lt;= y0) &#123;</span><br><span class="line">SrcImg(x,y,<span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">SrcImg(x,y,<span class="number">2</span>) = <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Test::DrawCircle_blue2() &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> blue[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>&#125;;</span><br><span class="line">SrcImg.draw_circle(<span class="number">50</span>, <span class="number">50</span>, <span class="number">30</span>, blue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Test::DrawCircle_yellow2() &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> yellow[] = &#123;<span class="number">200</span>, <span class="number">155</span>, <span class="number">0</span>&#125;;</span><br><span class="line">SrcImg.draw_circle(<span class="number">50</span>, <span class="number">50</span>, <span class="number">3</span>, yellow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Test::DrawLine2() &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> blue[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>&#125;;</span><br><span class="line">SrcImg.draw_line(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>*<span class="built_in">cos</span>(<span class="number">35</span>*pi/<span class="number">180</span>),<span class="number">100</span>*<span class="built_in">sin</span>(<span class="number">35</span>*pi/<span class="number">180</span>),blue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> x , <span class="keyword">double</span> y)</span> </span>&#123; <span class="comment">//compare x and y，如果差值小于一定范围则近似相等</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(x - y) &lt;= <span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ex.hpp"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test pic;</span><br><span class="line">Test pic1;</span><br><span class="line">pic.change();</span><br><span class="line">pic.DrawCircle_blue1();</span><br><span class="line">pic.DrawCircle_yellow1();</span><br><span class="line">pic.DrawLine1();</span><br><span class="line">pic.Todisplay();</span><br><span class="line">CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; temp = pic.getSrcImg();</span><br><span class="line">temp.save(<span class="string">"2.bmp"</span>);</span><br><span class="line">pic1.change();</span><br><span class="line">pic1.DrawCircle_blue2();</span><br><span class="line">pic1.DrawCircle_yellow2();</span><br><span class="line">pic1.DrawLine2();</span><br><span class="line">pic1.Todisplay();</span><br><span class="line">CImg&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; temp1 = pic1.getSrcImg();</span><br><span class="line">temp1.save(<span class="string">"2.1.bmp"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行并存储后实现的整体效果图如下所示：</strong><br>(1) 未使用接口函数：<br><img src="https://img-blog.csdn.net/20180911175307715?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>(2) 使用接口函数：<br><img src="https://img-blog.csdn.net/20180911175421770?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p><strong>完整代码参见：</strong><br><a href="https://github.com/WangPerryWPY/Computer-Version/tree/master/EX1" target="_blank" rel="noopener">https://github.com/WangPerryWPY/Computer-Version/tree/master/EX1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-CImg的配置&quot;&gt;&lt;a href=&quot;#1-CImg的配置&quot; class=&quot;headerlink&quot; title=&quot;1. CImg的配置&quot;&gt;&lt;/a&gt;1. CImg的配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;下载CImg的包到指定的文件夹下，解压&lt;/li&gt;
&lt;li&gt;然后只需要
      
    
    </summary>
    
      <category term="计算机视觉" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="计算机视觉" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>c++树的实现(适用于一般的🌲)</title>
    <link href="http://yoursite.com/2019/07/05/c-%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%80%82%E7%94%A8%E4%BA%8E%E4%B8%80%E8%88%AC%E7%9A%84%F0%9F%8C%B2/"/>
    <id>http://yoursite.com/2019/07/05/c-树的实现-适用于一般的🌲/</id>
    <published>2019-07-05T08:53:31.000Z</published>
    <updated>2019-07-05T14:36:32.915Z</updated>
    
    <content type="html"><![CDATA[<ul><li>其实主要是采用类似c这种面向过程的语言的接口实现办法，用c++更多只是为了调用队列，栈等一些接口</li><li>网上资料大部分树的实现都是二叉树，而实际常见的树一般是普通的树</li><li>所以我们要学会通过二叉树的思想来转换到普通的树来使用</li><li>本文采用的存储结构为（孩子-兄弟）结点表示法，也叫二叉链表，有不懂得地方可以查看我的另外一篇关于树的存储结构的<a href="https://blog.csdn.net/perry0528/article/details/82527739" target="_blank" rel="noopener">文章</a></li><li>本文重点讨论三个函数，其他实现函数都大同小异<ul><li>求树的深度</li><li>打印树的路径</li><li>如何创建一颗普通的树</li></ul></li></ul><h3 id="树的存储结构："><a href="#树的存储结构：" class="headerlink" title="树的存储结构："></a>树的存储结构：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>, *<span class="title">nextsibling</span>;</span></span><br><span class="line">&#125;CSNode, *CSTree;</span><br></pre></td></tr></table></figure><h3 id="求树的深度："><a href="#求树的深度：" class="headerlink" title="求树的深度："></a>求树的深度：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(CSTree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">1</span>+TreeDepth(T-&gt;firstchild))&gt;TreeDepth(T-&gt;nextsibling)?(<span class="number">1</span>+TreeDepth(T-&gt;firstchild)):TreeDepth(T-&gt;nextsibling);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法基本类似二叉树，只是一点打印兄弟结点的时候因为兄弟结点的根节点是他的兄弟，所以深度应该去掉那个根节点</strong></p><h3 id="树的路径打印"><a href="#树的路径打印" class="headerlink" title="树的路径打印"></a>树的路径打印</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AllPath</span><span class="params">(CSTree T, <span class="built_in">stack</span>&lt;ElemType&gt; *S1)</span> </span>&#123;</span><br><span class="line"><span class="comment">//stack&lt;ElemType&gt; S1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">S1-&gt;push(T-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (T-&gt;firstchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;ElemType&gt; S2;</span><br><span class="line">S2 = (*S1);</span><br><span class="line"><span class="keyword">while</span>(!S2.empty()) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,S2.top());</span><br><span class="line">S2.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">AllPath(T-&gt;firstchild, S1);</span><br><span class="line">&#125;</span><br><span class="line">S1-&gt;pop();</span><br><span class="line">T=T-&gt;nextsibling;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里要说一下，虽然思路不难想，自己画一下图便很容易想通，但是我debug de了很久，而且一度坚持认为自己没错，归根到底还是递归用得不熟练，一开始把栈作为形参只是在函数内创建，所以每一遍递归栈都会刷新一遍而不会保留下来，所以要创建一个指向栈的指针，使得每次递归栈的信息保存下来</strong></p><h3 id="创建树"><a href="#创建树" class="headerlink" title="创建树"></a>创建树</h3><ul><li>虽然这个内容是前面连个的基础，但第一步往往是最难的，这个也不例外</li><li>采取的思路是根节点孩子节点对来创建<br><img src="https://img-blog.csdn.net/20180911112120931?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></li><li>运行时直接输入<code>#AABACADCECFFG##</code>即可，注意每一对之间不要加空格，因为空格会被识别为其他的字符</li><li>因为这种存储结构较为复杂，故采用递归思路可能会导致创建混乱，利用队列来创建</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateTree</span><span class="params">(CSTree *T)</span> </span>&#123;</span><br><span class="line">(*T) = <span class="literal">NULL</span>;</span><br><span class="line">ElemType Felem;</span><br><span class="line">ElemType Selem;</span><br><span class="line">CSNode *r = <span class="literal">NULL</span>; <span class="comment">//r为指向当前结点的指针</span></span><br><span class="line">CSNode *p = <span class="literal">NULL</span>; <span class="comment">//p为指向队列front的指针</span></span><br><span class="line"><span class="built_in">queue</span>&lt;CSNode*&gt; Q;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%c%c"</span>,&amp;Felem,&amp;Selem); Selem != <span class="string">'#'</span>; <span class="built_in">scanf</span>(<span class="string">"%c%c"</span>,&amp;Felem,&amp;Selem)) &#123;</span><br><span class="line">CSNode *node;</span><br><span class="line">node = (CSNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CSNode));</span><br><span class="line">node -&gt; data= Selem;</span><br><span class="line">node -&gt; firstchild = <span class="literal">NULL</span>;</span><br><span class="line">node -&gt; nextsibling = <span class="literal">NULL</span>;</span><br><span class="line">Q.push(node);</span><br><span class="line"><span class="keyword">if</span> (Felem == <span class="string">'#'</span>) &#123;</span><br><span class="line">(*T) = node;</span><br><span class="line">r = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(Q.front()-&gt;data != Felem) &#123;</span><br><span class="line">Q.pop();</span><br><span class="line">&#125;</span><br><span class="line">p = Q.front();</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;firstchild)) &#123;</span><br><span class="line">p-&gt;firstchild = node;</span><br><span class="line">r = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">r-&gt;nextsibling = node;</span><br><span class="line">r = node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所有代码参考如下："><a href="#所有代码参考如下：" class="headerlink" title="所有代码参考如下："></a>所有代码参考如下：</h3><h3 id="Tree-hpp"><a href="#Tree-hpp" class="headerlink" title="Tree.hpp"></a>Tree.hpp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// - - - - - 采用二叉链表的表示方法 - - - - -</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _TREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TREE_H_</span></span><br><span class="line"><span class="comment">//#include &lt;stdbool.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>, *<span class="title">nextsibling</span>;</span></span><br><span class="line">&#125;CSNode, *CSTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateTree</span><span class="params">(CSTree *T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyTree</span><span class="params">(CSTree *T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(CSTree T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AllPath</span><span class="params">(CSTree T, <span class="built_in">stack</span>&lt;ElemType&gt; *S1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTree</span><span class="params">(CSTree T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Tree-cpp"><a href="#Tree-cpp" class="headerlink" title="Tree.cpp"></a>Tree.cpp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Tree.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateTree</span><span class="params">(CSTree *T)</span> </span>&#123;</span><br><span class="line">(*T) = <span class="literal">NULL</span>;</span><br><span class="line">ElemType Felem;</span><br><span class="line">ElemType Selem;</span><br><span class="line">CSNode *r = <span class="literal">NULL</span>;</span><br><span class="line">CSNode *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;CSNode*&gt; Q;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%c%c"</span>,&amp;Felem,&amp;Selem); Selem != <span class="string">'#'</span>; <span class="built_in">scanf</span>(<span class="string">"%c%c"</span>,&amp;Felem,&amp;Selem)) &#123;</span><br><span class="line">CSNode *node;</span><br><span class="line">node = (CSNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CSNode));</span><br><span class="line">node -&gt; data= Selem;</span><br><span class="line">node -&gt; firstchild = <span class="literal">NULL</span>;</span><br><span class="line">node -&gt; nextsibling = <span class="literal">NULL</span>;</span><br><span class="line">Q.push(node);</span><br><span class="line"><span class="keyword">if</span> (Felem == <span class="string">'#'</span>) &#123;</span><br><span class="line">(*T) = node;</span><br><span class="line">r = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(Q.front()-&gt;data != Felem) &#123;</span><br><span class="line">Q.pop();</span><br><span class="line">&#125;</span><br><span class="line">p = Q.front();</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;firstchild)) &#123;</span><br><span class="line">p-&gt;firstchild = node;</span><br><span class="line">r = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">r-&gt;nextsibling = node;</span><br><span class="line">r = node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyTree</span><span class="params">(CSTree *T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (*T) &#123;</span><br><span class="line">DestroyTree(&amp;((*T)-&gt;firstchild));</span><br><span class="line">DestroyTree(&amp;((*T)-&gt;nextsibling));</span><br><span class="line"><span class="built_in">free</span>(*T);</span><br><span class="line">(*T) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(CSTree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">1</span>+TreeDepth(T-&gt;firstchild))&gt;TreeDepth(T-&gt;nextsibling)?(<span class="number">1</span>+TreeDepth(T-&gt;firstchild)):TreeDepth(T-&gt;nextsibling);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AllPath</span><span class="params">(CSTree T, <span class="built_in">stack</span>&lt;ElemType&gt; *S1)</span> </span>&#123;</span><br><span class="line"><span class="comment">//stack&lt;ElemType&gt; S1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">S1-&gt;push(T-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (T-&gt;firstchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;ElemType&gt; S2;</span><br><span class="line">S2 = (*S1);</span><br><span class="line"><span class="keyword">while</span>(!S2.empty()) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,S2.top());</span><br><span class="line">S2.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">AllPath(T-&gt;firstchild, S1);</span><br><span class="line">&#125;</span><br><span class="line">S1-&gt;pop();</span><br><span class="line">T=T-&gt;nextsibling;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTree</span><span class="params">(CSTree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PrintTree(T-&gt;firstchild);</span><br><span class="line">PrintTree(T-&gt;nextsibling);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Tree.hpp"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">CSTree T;</span><br><span class="line">CreateTree(&amp;T);</span><br><span class="line"><span class="comment">//cout &lt;&lt; T-&gt;nextsibling-&gt;data &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//PrintTree(T);</span></span><br><span class="line"><span class="built_in">stack</span>&lt;ElemType&gt; s;</span><br><span class="line">AllPath(T, &amp;s);</span><br><span class="line"><span class="comment">/*while (!s.empty()) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; s.top()&lt;&lt; endl;</span></span><br><span class="line"><span class="comment">s.pop();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; TreeDepth(T) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">DestroyTree(&amp;T);</span><br><span class="line"><span class="keyword">if</span> (!T) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"delete successfully"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;其实主要是采用类似c这种面向过程的语言的接口实现办法，用c++更多只是为了调用队列，栈等一些接口&lt;/li&gt;
&lt;li&gt;网上资料大部分树的实现都是二叉树，而实际常见的树一般是普通的树&lt;/li&gt;
&lt;li&gt;所以我们要学会通过二叉树的思想来转换到普通的树来使用&lt;/li&gt;

      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>树的常见的三种链表存储结构</title>
    <link href="http://yoursite.com/2019/07/05/%E6%A0%91%E7%9A%84%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2019/07/05/树的常见的三种链表存储结构/</id>
    <published>2019-07-05T08:51:18.000Z</published>
    <updated>2019-07-05T14:34:35.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-双亲表示法："><a href="#1-双亲表示法：" class="headerlink" title="1.双亲表示法："></a>1.双亲表示法：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// - - - - - 树的双亲表存储表示 - - - - -</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TREE_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span> &#123;</span> <span class="comment">//结点结构</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="keyword">int</span> parent; <span class="comment">//双亲位置域</span></span><br><span class="line">&#125;PTNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span> <span class="comment">//树结构</span></span><br><span class="line">PTNode nodes[MAX_TREE_SIZE];</span><br><span class="line"><span class="keyword">int</span> r,n; <span class="comment">//根的位置和结点数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180908103615434?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="树的双亲表示法"></p><center>树的双亲表示法示例</center><h2 id="2-树的孩子链表存储表示"><a href="#2-树的孩子链表存储表示" class="headerlink" title="2.树的孩子链表存储表示"></a>2.树的孩子链表存储表示</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// - - - - - 树的孩子链表存储表示 - - - - - </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> &#123;</span> <span class="comment">//孩子节点</span></span><br><span class="line"><span class="keyword">int</span> child;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;* ChildPtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span> <span class="comment">//孩子链表头指针</span></span><br><span class="line">Elemtype data;</span><br><span class="line">ChildPtr firstchild;</span><br><span class="line">&#125;CTBox;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">CTBox nodes[MAX_TREE_SIZE];</span><br><span class="line"><span class="keyword">int</span> n, r; <span class="comment">//结点数和根的位置</span></span><br><span class="line">&#125;CTree;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180908105905501?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><center>树的孩子链表表示法示例</center><h2 id="3-树的孩子兄弟表示法"><a href="#3-树的孩子兄弟表示法" class="headerlink" title="3.树的孩子兄弟表示法"></a>3.树的孩子兄弟表示法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// - - - - - 树的二叉链表（孩子-兄弟）存储表示 - - - - -</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>, *<span class="title">nextsibling</span>;</span></span><br><span class="line">&#125;CSNode, *CSTree;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180908111327680?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlcnJ5MDUyOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><center>树的二叉链表表示法示例</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-双亲表示法：&quot;&gt;&lt;a href=&quot;#1-双亲表示法：&quot; class=&quot;headerlink&quot; title=&quot;1.双亲表示法：&quot;&gt;&lt;/a&gt;1.双亲表示法：&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>线索二叉树的实现</title>
    <link href="http://yoursite.com/2019/07/05/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/05/线索二叉树的实现/</id>
    <published>2019-07-05T08:48:36.000Z</published>
    <updated>2019-07-05T14:33:03.251Z</updated>
    
    <content type="html"><![CDATA[<ul><li>n个结点一定有n+1个指针域是空的</li><li>如果结点左指针为空则作为前驱指针</li><li>若右指针为空则作为后继指针</li><li>指向线索序列的前序后继指针即为线索</li><li>同时为了区分指针是作为线索指向前驱后继还是指向子树，我们约定设置一个标志位，若为0指向子树，为1作为线索</li><li>每个节点除原来的数据域以及左右子孩子节点指针外，还需要增加两个标志域<table><thead><tr><th>lchild</th><th>L.Tag</th><th>data</th><th>R.Tag</th><th>rchild</th></tr></thead></table></li></ul><ul><li>线索化遍历过程中为了方便索引，建立两个节点，pre指向当前节点的前驱节点，T指向当前节点（pre和T都在接下的函数中有真实声明）</li></ul><h3 id="中序遍历二叉树T，将其线索化，Thrt指向其头结点"><a href="#中序遍历二叉树T，将其线索化，Thrt指向其头结点" class="headerlink" title="中序遍历二叉树T，将其线索化，Thrt指向其头结点"></a>中序遍历二叉树T，将其线索化，Thrt指向其头结点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderThreading</span><span class="params">(BiThrTree *Thrt, BiThrTree T)</span> </span>&#123;</span><br><span class="line">(*Thrt) = (BiThrTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiThrNode));</span><br><span class="line">(*Thrt)-&gt;LTag = Link;</span><br><span class="line">(*Thrt)-&gt;RTag = Thread;</span><br><span class="line">(*Thrt)-&gt;rchild = (*Thrt);</span><br><span class="line"><span class="keyword">if</span> (!T)</span><br><span class="line">(*Thrt)-&gt;lchild = (*Thrt);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">(*Thrt)-&gt;lchild = T;</span><br><span class="line">pre = (*Thrt);</span><br><span class="line">InThreading(T);</span><br><span class="line">pre-&gt;rchild = (*Thrt);</span><br><span class="line">pre-&gt;RTag = Thread;</span><br><span class="line">(*Thrt) -&gt; rchild = pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无头结点的整棵树T的线索化，作为上一个函数的辅助函数"><a href="#无头结点的整棵树T的线索化，作为上一个函数的辅助函数" class="headerlink" title="无头结点的整棵树T的线索化，作为上一个函数的辅助函数"></a>无头结点的整棵树T的线索化，作为上一个函数的辅助函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">InThreading(T-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span> (!T-&gt;lchild) &#123;</span><br><span class="line">T-&gt;LTag = Thread;</span><br><span class="line">T-&gt;lchild = pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!pre-&gt;rchild) &#123;</span><br><span class="line">pre-&gt;RTag = Thread;</span><br><span class="line">pre-&gt;rchild = T;</span><br><span class="line">&#125;</span><br><span class="line">pre = T;</span><br><span class="line">InThreading(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历二叉树的非递归算法，Visit为打印data函数，定义在main文件"><a href="#中序遍历二叉树的非递归算法，Visit为打印data函数，定义在main文件" class="headerlink" title="中序遍历二叉树的非递归算法，Visit为打印data函数，定义在main文件"></a>中序遍历二叉树的非递归算法，Visit为打印data函数，定义在main文件</h3><h3 id="当前节点指向根节点"><a href="#当前节点指向根节点" class="headerlink" title="当前节点指向根节点"></a>当前节点指向根节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse_Thr</span><span class="params">(BiThrTree T, <span class="keyword">void</span>(*Visit)(Elem e))</span> </span>&#123;</span><br><span class="line">BiThrTree p = T-&gt;lchild;</span><br><span class="line"><span class="keyword">while</span> (p != T) &#123;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;LTag == Link) &#123;</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line"><span class="keyword">while</span> (p-&gt;RTag == Thread &amp;&amp; p-&gt;rchild != T) &#123;</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后直接看源码</strong></p><h2 id="BiThrTree-h"><a href="#BiThrTree-h" class="headerlink" title="BiThrTree.h"></a>BiThrTree.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _BITHRTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _BITHRTREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Elem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;Link, Thread&#125;PointerTag;    <span class="comment">//Link = 0表示指向左右孩子指针；Thread = 1表示指向前驱或后继的线索</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">       Elem data;                                      <span class="comment">//结点数据</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span>                <span class="comment">//左右孩子指针</span></span><br><span class="line">       PointerTag  LTag, RTag;                              <span class="comment">//左右标志</span></span><br><span class="line">&#125;BiThrNode, *BiThrTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//extern BiThrTree pre;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiThrTree</span><span class="params">(BiThrTree *T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyBiThrTree</span><span class="params">(BiThrTree *T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderThreading</span><span class="params">(BiThrTree *Thrt, BiThrTree T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse_Thr</span><span class="params">(BiThrTree T, <span class="keyword">void</span>(*Visit)(Elem e))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="BiThrTree-c"><a href="#BiThrTree-c" class="headerlink" title="BiThrTree.c"></a>BiThrTree.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BiThrTree.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">BiThrTree pre;  <span class="comment">//定义一个指向当前节点的前一个节点的pre指针，这里设置为全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiThrTree</span><span class="params">(BiThrTree *T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'*'</span>) &#123;</span><br><span class="line">(*T) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">(*T) = (BiThrTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiThrNode));</span><br><span class="line"><span class="comment">//exit(-1);</span></span><br><span class="line">(*T)-&gt;data = c;</span><br><span class="line">(*T)-&gt;LTag = (*T)-&gt;RTag = Link;</span><br><span class="line">CreateBiThrTree(&amp;((*T)-&gt;lchild));</span><br><span class="line">CreateBiThrTree(&amp;((*T)-&gt;rchild));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyBiThrTree</span><span class="params">(BiThrTree *T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((*T)) &#123;</span><br><span class="line">DestroyBiThrTree(&amp;((*T)-&gt;lchild));</span><br><span class="line">DestroyBiThrTree(&amp;((*T)-&gt;rchild));</span><br><span class="line"><span class="comment">//(*T)-&gt;data='*';</span></span><br><span class="line"><span class="built_in">free</span>((*T));</span><br><span class="line">(*T) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderThreading</span><span class="params">(BiThrTree *Thrt, BiThrTree T)</span> </span>&#123;</span><br><span class="line">(*Thrt) = (BiThrTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiThrNode));</span><br><span class="line">(*Thrt)-&gt;LTag = Link;</span><br><span class="line">(*Thrt)-&gt;RTag = Thread;</span><br><span class="line">(*Thrt)-&gt;rchild = (*Thrt);</span><br><span class="line"><span class="keyword">if</span> (!T)</span><br><span class="line">(*Thrt)-&gt;lchild = (*Thrt);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">(*Thrt)-&gt;lchild = T;</span><br><span class="line">pre = (*Thrt);</span><br><span class="line">InThreading(T);</span><br><span class="line">pre-&gt;rchild = (*Thrt);</span><br><span class="line">pre-&gt;RTag = Thread;</span><br><span class="line">(*Thrt) -&gt; rchild = pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">InThreading(T-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span> (!T-&gt;lchild) &#123;</span><br><span class="line">T-&gt;LTag = Thread;</span><br><span class="line">T-&gt;lchild = pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!pre-&gt;rchild) &#123;</span><br><span class="line">pre-&gt;RTag = Thread;</span><br><span class="line">pre-&gt;rchild = T;</span><br><span class="line">&#125;</span><br><span class="line">pre = T;</span><br><span class="line">InThreading(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse_Thr</span><span class="params">(BiThrTree T, <span class="keyword">void</span>(*Visit)(Elem e))</span> </span>&#123;</span><br><span class="line">BiThrTree p = T-&gt;lchild;</span><br><span class="line"><span class="keyword">while</span> (p != T) &#123;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;LTag == Link) &#123;</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line"><span class="keyword">while</span> (p-&gt;RTag == Thread &amp;&amp; p-&gt;rchild != T) &#123;</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BiThrTree.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(Elem e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(Elem e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">BiThrTree T;</span><br><span class="line">BiThrTree Thrt;</span><br><span class="line">CreateBiThrTree(&amp;T);</span><br><span class="line">InOrderThreading(&amp;Thrt, T);</span><br><span class="line">InOrderTraverse_Thr(Thrt, Visit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;n个结点一定有n+1个指针域是空的&lt;/li&gt;
&lt;li&gt;如果结点左指针为空则作为前驱指针&lt;/li&gt;
&lt;li&gt;若右指针为空则作为后继指针&lt;/li&gt;
&lt;li&gt;指向线索序列的前序后继指针即为线索&lt;/li&gt;
&lt;li&gt;同时为了区分指针是作为线索指向前驱后继还是指向子树，我们
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的创建销毁遍历，计算叶子数、深度以及对二叉树进行拷贝等操作</title>
    <link href="http://yoursite.com/2019/07/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%9B%E5%BB%BA%E9%94%80%E6%AF%81%E9%81%8D%E5%8E%86%EF%BC%8C%E8%AE%A1%E7%AE%97%E5%8F%B6%E5%AD%90%E6%95%B0%E3%80%81%E6%B7%B1%E5%BA%A6%E4%BB%A5%E5%8F%8A%E5%AF%B9%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BF%9B%E8%A1%8C%E6%8B%B7%E8%B4%9D%E7%AD%89%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/07/05/二叉树的创建销毁遍历，计算叶子数、深度以及对二叉树进行拷贝等操作/</id>
    <published>2019-07-05T08:45:57.000Z</published>
    <updated>2019-07-05T14:32:38.014Z</updated>
    
    <content type="html"><![CDATA[<ul><li>二叉树是一块比较重要的知识点，而且是从线性结构到树形结构的一个跨越，建议大家动手实现以下。</li><li>树是递归算法最好的应用，当然不嫌麻烦的话也可以用栈。</li></ul><h2 id="前序遍历初始化树："><a href="#前序遍历初始化树：" class="headerlink" title="前序遍历初始化树："></a>前序遍历初始化树：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeTree</span><span class="params">(Tree *T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;ch);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'*'</span>) &#123;</span><br><span class="line">(*T) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!((*T) = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node))))</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">(*T)-&gt;data = ch;</span><br><span class="line">InitializeTree(&amp;((*T)-&gt;lchild));</span><br><span class="line">InitializeTree(&amp;((*T)-&gt;rchild));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历销毁二叉树"><a href="#后序遍历销毁二叉树" class="headerlink" title="后序遍历销毁二叉树"></a>后序遍历销毁二叉树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyTree</span><span class="params">(Tree *T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((*T)) &#123;</span><br><span class="line">DestroyTree(&amp;((*T)-&gt;lchild));</span><br><span class="line">DestroyTree(&amp;((*T)-&gt;rchild));</span><br><span class="line"><span class="built_in">free</span>((*T));</span><br><span class="line">(*T) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前序遍历打印二叉树"><a href="#前序遍历打印二叉树" class="headerlink" title="前序遍历打印二叉树"></a>前序遍历打印二叉树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">Visit(T-&gt;data);</span><br><span class="line">PreOrderTraverse(T-&gt;lchild,Visit);</span><br><span class="line">PreOrderTraverse(T-&gt;rchild,Visit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历打印二叉树"><a href="#中序遍历打印二叉树" class="headerlink" title="中序遍历打印二叉树"></a>中序遍历打印二叉树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T) &#123;</span><br><span class="line">InOrderTraverse(T-&gt;lchild,Visit);</span><br><span class="line">Visit(T-&gt;data);</span><br><span class="line">InOrderTraverse(T-&gt;rchild,Visit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历打印二叉树"><a href="#后序遍历打印二叉树" class="headerlink" title="后序遍历打印二叉树"></a>后序遍历打印二叉树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">PostOrderTraverse(T-&gt;lchild,Visit);</span><br><span class="line">PostOrderTraverse(T-&gt;rchild,Visit);</span><br><span class="line">Visit(T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前序遍历计算叶子结点数"><a href="#前序遍历计算叶子结点数" class="headerlink" title="前序遍历计算叶子结点数"></a>前序遍历计算叶子结点数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountLeaf1</span><span class="params">(Tree T, <span class="keyword">int</span> *count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(T-&gt;lchild) &amp;&amp; !(T-&gt;rchild)) &#123;</span><br><span class="line">(*count)++;</span><br><span class="line">&#125;</span><br><span class="line">CountLeaf1(T-&gt;lchild,count);</span><br><span class="line">CountLeaf1(T-&gt;rchild,count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">(*count) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>计算叶子结点的简化方法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">CountLeaf2</span><span class="params">(Tree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!T) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!T-&gt;lchild &amp;&amp; !T-&gt;rchild)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> CountLeaf2(T-&gt;lchild)+CountLeaf2(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历计算二叉树深度"><a href="#后序遍历计算二叉树深度" class="headerlink" title="后序遍历计算二叉树深度"></a>后序遍历计算二叉树深度</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">DepthOfTree</span><span class="params">(Tree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="keyword">return</span> DepthOfTree(T-&gt;lchild) &gt; DepthOfTree(T-&gt;rchild) ? DepthOfTree(T-&gt;lchild) + <span class="number">1</span> : DepthOfTree(T-&gt;rchild) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历复制二叉树"><a href="#后序遍历复制二叉树" class="headerlink" title="后序遍历复制二叉树"></a>后序遍历复制二叉树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Tree <span class="title">CopyTree</span><span class="params">(Tree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">Tree ltree = <span class="literal">NULL</span>;</span><br><span class="line">Tree rtree = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild)</span><br><span class="line">ltree = CopyTree(T-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span> (T-&gt;rchild)</span><br><span class="line">rtree = CopyTree(T-&gt;rchild);</span><br><span class="line">Tree New = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">New-&gt;data = T-&gt;data;</span><br><span class="line">New-&gt;lchild = ltree;</span><br><span class="line">New-&gt;rchild = rtree;</span><br><span class="line"><span class="keyword">return</span> New;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>是不是惊喜的发现所有的算法都是用递归来实现</li><li>递归在二叉树和树种应用真的很广，大家又不太理解的建议找个二叉树的基本图手动模拟算法去遍历尝试一下，好记性不如烂笔头</li></ul><h2 id="最后附上源码："><a href="#最后附上源码：" class="headerlink" title="最后附上源码："></a>最后附上源码：</h2><h3 id="Tree-h"><a href="#Tree-h" class="headerlink" title="Tree.h"></a>Tree.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _TREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; Node, *Tree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Initialize a tree</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeTree</span><span class="params">(Tree *T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Destroy a tree</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyTree</span><span class="params">(Tree *T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void PreOrderTraverse(Tree T);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Pre-Order traversing a tree</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//In-Order traversing a tree</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//using in c++</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse2</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Post-Order traversing a tree</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Level-Order traversing a tree</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Count the number of leaf nodes in the binary tree</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountLeaf1</span><span class="params">(Tree T,  <span class="keyword">int</span> *count)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Another way to count the number of leaf nodes in the binary tree</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">CountLeaf2</span><span class="params">(Tree T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Calculate the depth of the binary tree</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">DepthOfTree</span><span class="params">(Tree T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Copy the binary tree</span></span><br><span class="line"><span class="function">Tree <span class="title">CopyTree</span><span class="params">(Tree T)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Tree-c"><a href="#Tree-c" class="headerlink" title="Tree.c"></a>Tree.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Tree.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../stack/Stack.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeTree</span><span class="params">(Tree *T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;ch);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'*'</span>) &#123;</span><br><span class="line">(*T) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!((*T) = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node))))</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">(*T)-&gt;data = ch;</span><br><span class="line">InitializeTree(&amp;((*T)-&gt;lchild));</span><br><span class="line">InitializeTree(&amp;((*T)-&gt;rchild));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyTree</span><span class="params">(Tree *T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((*T)) &#123;</span><br><span class="line">DestroyTree(&amp;((*T)-&gt;lchild));</span><br><span class="line">DestroyTree(&amp;((*T)-&gt;rchild));</span><br><span class="line"><span class="comment">//(*T)-&gt;data='*';</span></span><br><span class="line"><span class="built_in">free</span>((*T));</span><br><span class="line">(*T) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">Visit(T-&gt;data);</span><br><span class="line">PreOrderTraverse(T-&gt;lchild,Visit);</span><br><span class="line">PreOrderTraverse(T-&gt;rchild,Visit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T) &#123;</span><br><span class="line">InOrderTraverse(T-&gt;lchild,Visit);</span><br><span class="line">Visit(T-&gt;data);</span><br><span class="line">InOrderTraverse(T-&gt;rchild,Visit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">PostOrderTraverse(T-&gt;lchild,Visit);</span><br><span class="line">PostOrderTraverse(T-&gt;rchild,Visit);</span><br><span class="line">Visit(T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//I'm too lazy to want to call stack interface,so this function need to realise using c++</span></span><br><span class="line"><span class="comment">/*void InOrderTraverse2(Tree T, void (*Visit)(ElemType e)) &#123;</span></span><br><span class="line"><span class="comment">stack&lt;Tree&gt; S;</span></span><br><span class="line"><span class="comment">Tree p;</span></span><br><span class="line"><span class="comment">p = T;</span></span><br><span class="line"><span class="comment">S.push(p);</span></span><br><span class="line"><span class="comment">while (p-&gt;lchild != NULL) &#123;</span></span><br><span class="line"><span class="comment">p = p-&gt;lchild;</span></span><br><span class="line"><span class="comment">S.push(p);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">while (!S.empty()) &#123;</span></span><br><span class="line"><span class="comment">p = S.top();</span></span><br><span class="line"><span class="comment">Visit(p-&gt;data);</span></span><br><span class="line"><span class="comment">S.pop();</span></span><br><span class="line"><span class="comment">if (p-&gt;rchild != NULL) &#123;</span></span><br><span class="line"><span class="comment">p=p-&gt;rchild;</span></span><br><span class="line"><span class="comment">S.push(p);</span></span><br><span class="line"><span class="comment">while (p-&gt;lchild != NULL) &#123;</span></span><br><span class="line"><span class="comment">p = p-&gt;lchild;</span></span><br><span class="line"><span class="comment">S.push(p);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountLeaf1</span><span class="params">(Tree T, <span class="keyword">int</span> *count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(T-&gt;lchild) &amp;&amp; !(T-&gt;rchild)) &#123;</span><br><span class="line">(*count)++;</span><br><span class="line">&#125;</span><br><span class="line">CountLeaf1(T-&gt;lchild,count);</span><br><span class="line">CountLeaf1(T-&gt;rchild,count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">(*count) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">CountLeaf2</span><span class="params">(Tree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!T) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!T-&gt;lchild &amp;&amp; !T-&gt;rchild)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> CountLeaf2(T-&gt;lchild)+CountLeaf2(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">DepthOfTree</span><span class="params">(Tree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="keyword">return</span> DepthOfTree(T-&gt;lchild) &gt; DepthOfTree(T-&gt;rchild) ? DepthOfTree(T-&gt;lchild) + <span class="number">1</span> : DepthOfTree(T-&gt;rchild) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Tree <span class="title">CopyTree</span><span class="params">(Tree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">Tree ltree = <span class="literal">NULL</span>;</span><br><span class="line">Tree rtree = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild)</span><br><span class="line">ltree = CopyTree(T-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span> (T-&gt;rchild)</span><br><span class="line">rtree = CopyTree(T-&gt;rchild);</span><br><span class="line">Tree New = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">New-&gt;data = T-&gt;data;</span><br><span class="line">New-&gt;lchild = ltree;</span><br><span class="line">New-&gt;rchild = rtree;</span><br><span class="line"><span class="keyword">return</span> New;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Tree.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(ElemType e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">Tree T;</span><br><span class="line">InitializeTree(&amp;T);</span><br><span class="line"><span class="comment">/*CountLeaf1(T,&amp;count);</span></span><br><span class="line"><span class="comment">printf("%d\n",count);</span></span><br><span class="line"><span class="comment">printf("%d\n",DepthOfTree(T));</span></span><br><span class="line"><span class="comment">PreOrderTraverse(T,Visit);</span></span><br><span class="line"><span class="comment">InOrderTraverse(T,Visit);</span></span><br><span class="line"><span class="comment">PostOrderTraverse(T,Visit);*/</span></span><br><span class="line">Tree A = CopyTree(T);</span><br><span class="line">PreOrderTraverse(A,Visit);</span><br><span class="line">DestroyTree(&amp;T);</span><br><span class="line">DestroyTree(&amp;A);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;二叉树是一块比较重要的知识点，而且是从线性结构到树形结构的一个跨越，建议大家动手实现以下。&lt;/li&gt;
&lt;li&gt;树是递归算法最好的应用，当然不嫌麻烦的话也可以用栈。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前序遍历初始化树：&quot;&gt;&lt;a href=&quot;#前序遍历初始化树：
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>c/c++定义全局变量的方法</title>
    <link href="http://yoursite.com/2019/07/05/c-c-%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/05/c-c-定义全局变量的方法/</id>
    <published>2019-07-05T08:43:52.000Z</published>
    <updated>2019-07-05T14:32:12.615Z</updated>
    
    <content type="html"><![CDATA[<p>我们想定义一个全局变量，能够在多个文件中使用，举例说明比如说三个文件main.c hello.c hello.h<br>想在main.c和hello.c中使用一个名字为a的变量，可能大家会简单地想直接在hello.h里面定义一个变量unsigned int a;<br>然后在main.c和hello.c中引用”hello.h”就可以直接使用了，但这是编译器会报重复定义变量的错误，我们可以怎么做呢？</p><ul><li><p><strong>方法很简单，直接举例说明：</strong></p></li><li><p><em>hello.h</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HELLO_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_H_</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p><em>hello.c</em></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>main.c</em></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">fun();</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为1，10；<br>extern关键字来声明变量为外部变量，而为什么要在hello.h文件中已经extern int a了还要再在hello.c文件中定义int a呢？</p><ul><li>这是因为extern仅仅是作为一个声明，声明我要定义一个外部全局变量a可以在其他文件和模块中使用，但此时并为给a分配空间。</li><li>而int a = 0；则才是真正对a的定义，为其分配空间。</li></ul><p>那么问题又来了，我们为什么不写成extern int a = 0;的形式不是更简单吗？</p><ul><li>这就涉及到c的一个基本知识点了也就是extern int a = 0和int a = 0同样都是对a的定义，只不过第二种是省略了extern而已。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们想定义一个全局变量，能够在多个文件中使用，举例说明比如说三个文件main.c hello.c hello.h&lt;br&gt;想在main.c和hello.c中使用一个名字为a的变量，可能大家会简单地想直接在hello.h里面定义一个变量unsigned int a;&lt;br&gt;然后
      
    
    </summary>
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的层序遍历</title>
    <link href="http://yoursite.com/2019/07/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/07/04/二叉树的层序遍历/</id>
    <published>2019-07-04T05:59:28.000Z</published>
    <updated>2019-07-05T14:31:39.787Z</updated>
    
    <content type="html"><![CDATA[<ul><li>层序遍历即从一棵树的每一层由上到下开始依次从左到右遍历输出</li><li>从上面一句话的原理不难看出这就是一个FIFO算法，也就是一个基本的先进先出队列，因此我们考虑调用STL的queue</li></ul><h3 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; Node, *Tree;</span><br></pre></td></tr></table></figure><h3 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;Tree&gt; Q;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">Q.push(T);</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">Tree tmp = Q.front();</span><br><span class="line">Q.pop();</span><br><span class="line">Visit(tmp-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;lchild)</span><br><span class="line">Q.push(tmp-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span>(tmp-&gt;rchild)</span><br><span class="line">Q.push(tmp-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;层序遍历即从一棵树的每一层由上到下开始依次从左到右遍历输出&lt;/li&gt;
&lt;li&gt;从上面一句话的原理不难看出这就是一个FIFO算法，也就是一个基本的先进先出队列，因此我们考虑调用STL的queue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;数据结构：&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>二叉树遍历的递归与非递归的实现</title>
    <link href="http://yoursite.com/2019/07/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%9A%84%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/04/二叉树遍历的递归与非递归的实现/</id>
    <published>2019-07-04T05:57:20.000Z</published>
    <updated>2019-07-05T14:31:14.572Z</updated>
    
    <content type="html"><![CDATA[<ul><li>有句话说得好，一切递归皆可用栈来实现。关键是理解好递归以及栈的基本原理。</li><li>这里以最为典型的中序遍历为例，其他的实现类似</li><li>直接调用c++STL中的stack</li><li>树的知识点用到大量的递归知识，建议大家不太理解的去找一下典型二叉树的例子然后一一步的去遍历尝试一下算法</li></ul><h3 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; Node, *Tree;</span><br></pre></td></tr></table></figure><h3 id="中序遍历的递归实现："><a href="#中序遍历的递归实现：" class="headerlink" title="中序遍历的递归实现："></a>中序遍历的递归实现：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T) &#123;</span><br><span class="line">InOrderTraverse(T-&gt;lchild,Visit);</span><br><span class="line">Visit(T-&gt;data);</span><br><span class="line">InOrderTraverse(T-&gt;rchild,Visit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历的非递归实现："><a href="#中序遍历的非递归实现：" class="headerlink" title="中序遍历的非递归实现："></a>中序遍历的非递归实现：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse2</span><span class="params">(Tree T, <span class="keyword">void</span> (*Visit)(ElemType e))</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;Node*&gt; S;</span><br><span class="line">Tree p;</span><br><span class="line">p = T;</span><br><span class="line">S.push(p);</span><br><span class="line"><span class="keyword">while</span> (p-&gt;lchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">S.push(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!S.empty()) &#123;</span><br><span class="line">p = S.top();</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line">S.pop();</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">p=p-&gt;rchild;</span><br><span class="line">S.push(p);</span><br><span class="line"><span class="keyword">while</span> (p-&gt;lchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">S.push(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;有句话说得好，一切递归皆可用栈来实现。关键是理解好递归以及栈的基本原理。&lt;/li&gt;
&lt;li&gt;这里以最为典型的中序遍历为例，其他的实现类似&lt;/li&gt;
&lt;li&gt;直接调用c++STL中的stack&lt;/li&gt;
&lt;li&gt;树的知识点用到大量的递归知识，建议大家不太理解的去找
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>c语言实现稀疏矩阵</title>
    <link href="http://yoursite.com/2019/07/04/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
    <id>http://yoursite.com/2019/07/04/c语言实现稀疏矩阵/</id>
    <published>2019-07-04T05:55:26.000Z</published>
    <updated>2019-07-05T14:30:45.460Z</updated>
    
    <content type="html"><![CDATA[<ul><li>主要实现的难点在于稀疏矩阵的转置以及矩阵乘法。</li><li>对用到的数据结构定义不懂的可参考严蔚敏老师的数据结构书籍，这里讲严老师讲的两种数据结构<em>三元组结构</em> 和<em>行逻辑结构</em> 整合到一起。</li><li>稀疏矩阵是线性结构中比较难的一块知识点，不懂的建议去b站看看严老师的视频。</li><li>实现环境：linux<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i, j; <span class="comment">//行坐标，列坐标</span></span><br><span class="line">Elem e; <span class="comment">//元素值</span></span><br><span class="line">&#125;Triple;<span class="comment">//三元组（i,j,e）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Triple data[MAXSIZE]; </span><br><span class="line"><span class="keyword">int</span> rpos[MAXRC];</span><br><span class="line"><span class="keyword">int</span> *num;</span><br><span class="line"><span class="keyword">int</span> *cpot;</span><br><span class="line"><span class="keyword">int</span> mu, nu, tu; <span class="comment">//总行数，总列数，非零元素总数</span></span><br><span class="line">&#125;Matrix;</span><br></pre></td></tr></table></figure><ol><li>其中rpos表示每行第一个元素在data中的位置</li><li>num表示每一列元素的个数</li><li>cpot表示每一列第一个元素在转置矩阵中应处的位置</li></ol><h3 id="Matrix-h"><a href="#Matrix-h" class="headerlink" title="Matrix.h"></a>Matrix.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MATRIX_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATRIX_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 12500</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXRC 500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Elem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">Elem e;</span><br><span class="line">&#125;Triple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Triple data[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> rpos[MAXRC];</span><br><span class="line"><span class="keyword">int</span> *num;</span><br><span class="line"><span class="keyword">int</span> *cpot;</span><br><span class="line"><span class="keyword">int</span> mu, nu, tu;</span><br><span class="line">&#125;Matrix;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*create a matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMatrix</span><span class="params">(Matrix *M)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*destroy the matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyMatrix</span><span class="params">(Matrix *M)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMatrix</span><span class="params">(Matrix M)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the matrix transpose of a given matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TransposeMatrix</span><span class="params">(Matrix M, Matrix *T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*take the product of the sparse matrix Q=M*N*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MultiMatrix</span><span class="params">(Matrix M, Matrix N, Matrix *T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Matrix-c"><a href="#Matrix-c" class="headerlink" title="Matrix.c"></a>Matrix.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Matrix.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">/*create a matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMatrix</span><span class="params">(Matrix *M)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n, t;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;m, &amp;n, &amp;t);</span><br><span class="line"><span class="comment">//scanf("%d", &amp;n);</span></span><br><span class="line"><span class="comment">//scanf("%d", &amp;t);</span></span><br><span class="line">M-&gt;mu = m;</span><br><span class="line">M-&gt;nu = n;</span><br><span class="line">M-&gt;tu = t;</span><br><span class="line"><span class="comment">//printf("%d\n", M-&gt;tu);</span></span><br><span class="line">Triple T;</span><br><span class="line"><span class="keyword">bool</span> k;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;T.i, &amp;T.j, &amp;T.e);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (T.i &lt; <span class="number">1</span> || T.i &gt; M-&gt;mu || T.j &lt; <span class="number">1</span> || T.j &gt; M-&gt;nu) &#123;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"wrong input !\nplease enter again! \n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;T.i, &amp;T.j, &amp;T.e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(k);</span><br><span class="line">M-&gt;data[<span class="number">0</span>] = T;</span><br><span class="line"><span class="comment">//printf("%d\n",M-&gt;data[0].i);</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; M-&gt;tu; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;T.i, &amp;T.j, &amp;T.e);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">                k = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">if</span> (T.i &lt; <span class="number">1</span> || T.i &gt; M-&gt;mu || T.j &lt; <span class="number">1</span> || T.j &gt; M-&gt;nu || T.i &lt; M-&gt;data[i<span class="number">-1</span>].i || (T.i == M-&gt;data[i<span class="number">-1</span>].i &amp;&amp; T.j &lt;= M-&gt;data[i<span class="number">-1</span>].j)) &#123;</span><br><span class="line">                        k = <span class="number">1</span>;</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">"wrong input !\nplease enter again! \n"</span>);</span><br><span class="line">                        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;T.i, &amp;T.j, &amp;T.e);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(k);</span><br><span class="line">        M-&gt;data[i] = T;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">M-&gt;num = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(M-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">M-&gt;cpot = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(M-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">memset</span>(M-&gt;num, <span class="number">0x0</span>, M-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">memset</span>(M-&gt;cpot, <span class="number">0x0</span>, M-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M-&gt;tu; i++) &#123;</span><br><span class="line">M-&gt;num[M-&gt;data[i].j - <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">M-&gt;cpot[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; M-&gt;nu; i++) &#123;</span><br><span class="line">M-&gt;cpot[i] = M-&gt;cpot[i<span class="number">-1</span>] + M-&gt;num[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">M-&gt;rpos[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> Num[M-&gt;mu];</span><br><span class="line"><span class="built_in">memset</span>(Num, <span class="number">0x0</span>, M-&gt;mu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; M-&gt;tu; i++) &#123;</span><br><span class="line">Num[M-&gt;data[i].i<span class="number">-1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(i = 1 ; i &lt; M-&gt;mu ; i++) &#123;</span></span><br><span class="line"><span class="comment">                printf("%d\n",Num[i-1]);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt; M-&gt;mu ; i++) &#123;</span><br><span class="line">M-&gt;rpos[i] = M-&gt;rpos[i<span class="number">-1</span>] + Num[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for (i = 1; i &lt; M-&gt;tu; i++) &#123;</span></span><br><span class="line"><span class="comment">if (M-&gt;data[i].i &gt; M-&gt;data[i-1].i) &#123;</span></span><br><span class="line"><span class="comment">M-&gt;rpos[M-&gt;data[i].i-1] = i + 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*for (i = 1; i &lt; M-&gt;tu; i++) &#123;</span></span><br><span class="line"><span class="comment">if (M-&gt;data[i].i &gt; M-&gt;data[i-1].i+1) &#123;</span></span><br><span class="line"><span class="comment">int m = M-&gt;data[i].i - M-&gt;data[i-1].i;</span></span><br><span class="line"><span class="comment">for (int a = M-&gt;data[i-1].i + 1; a &lt; M-&gt;data[i].i; i++) &#123;</span></span><br><span class="line"><span class="comment">M-&gt;rpos[a-1] = M-&gt;rpos[M-&gt;data[i-1].i-1];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*destroy the matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyMatrix</span><span class="params">(Matrix *M)</span> </span>&#123;</span><br><span class="line">M-&gt;mu = <span class="number">0</span>;</span><br><span class="line">M-&gt;tu = <span class="number">0</span>;</span><br><span class="line">M-&gt;nu = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(M-&gt;num);</span><br><span class="line"><span class="built_in">free</span>(M-&gt;cpot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMatrix</span><span class="params">(Matrix M)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d行%d列%d个非零元素。\n"</span>,M.mu,M.nu,M.tu);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"行  列  元素值\n"</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M.tu;i++)</span><br><span class="line"> </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%2d%4d%8d\n"</span>,M.data[i].i,M.data[i].j,M.data[i].e);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=M.mu;i++)</span><br><span class="line"> </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"第%d行的第一个非零元素是本矩阵第%d个元素\n"</span>,i,M.rpos[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=M.nu;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d列的元素个数为%d\n"</span>,i,M.num[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=M.nu;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d列的第一个元素的位置是%d\n"</span>,i,M.cpot[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the matrix transpose of a given matrix*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TransposeMatrix</span><span class="params">(Matrix M, Matrix *T)</span> </span>&#123;</span><br><span class="line">Matrix A;</span><br><span class="line">A = M;</span><br><span class="line">T-&gt;nu = A.mu;</span><br><span class="line">T-&gt;mu = A.nu;</span><br><span class="line">T-&gt;tu = A.tu;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T-&gt;tu; i++) &#123;</span><br><span class="line">T-&gt;data[A.cpot[A.data[i].j<span class="number">-1</span>]<span class="number">-1</span>].i = A.data[i].j;</span><br><span class="line">T-&gt;data[A.cpot[A.data[i].j<span class="number">-1</span>]<span class="number">-1</span>].j = A.data[i].i;</span><br><span class="line">T-&gt;data[A.cpot[A.data[i].j<span class="number">-1</span>]<span class="number">-1</span>].e = A.data[i].e;</span><br><span class="line">A.cpot[A.data[i].j<span class="number">-1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">T-&gt;num = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        T-&gt;cpot = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="built_in">memset</span>(T-&gt;num, <span class="number">0x0</span>, T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="built_in">memset</span>(T-&gt;cpot, <span class="number">0x0</span>, T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; T-&gt;tu; i++) &#123;</span><br><span class="line">                T-&gt;num[T-&gt;data[i].j - <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        T-&gt;cpot[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; T-&gt;nu; i++) &#123;</span><br><span class="line">                T-&gt;cpot[i] = T-&gt;cpot[i<span class="number">-1</span>] + T-&gt;num[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        T-&gt;rpos[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> Num[T-&gt;mu];</span><br><span class="line">        <span class="built_in">memset</span>(Num, <span class="number">0x0</span>, T-&gt;mu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; T-&gt;tu; i++) &#123;</span><br><span class="line">                Num[T-&gt;data[i].i<span class="number">-1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*take the product of the sparse matrix Q=M*N*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MultiMatrix</span><span class="params">(Matrix M, Matrix N, Matrix *T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (M.nu != N.mu)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">T-&gt;mu = M.mu;</span><br><span class="line">T-&gt;nu = N.nu;</span><br><span class="line">T-&gt;tu = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (M.tu*N.tu != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> arow = <span class="number">1</span>; arow &lt;= M.mu; arow++) &#123;</span><br><span class="line"><span class="keyword">int</span> ctemp[N.nu];</span><br><span class="line"><span class="built_in">memset</span>(ctemp, <span class="number">0x0</span>, N.nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">T-&gt;rpos[arow<span class="number">-1</span>] = T-&gt;tu+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(arow &lt; M.mu)</span><br><span class="line">tp = M.rpos[arow];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">tp = M.tu + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p = M.rpos[arow<span class="number">-1</span>]; p &lt; tp; p++) &#123;</span><br><span class="line"><span class="keyword">int</span> t = M.data[p<span class="number">-1</span>].j;</span><br><span class="line"><span class="keyword">int</span> pause;</span><br><span class="line"><span class="keyword">if</span> (t &lt; N.mu)</span><br><span class="line">pause = N.rpos[t];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pause = N.tu + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = N.rpos[t<span class="number">-1</span>]; m &lt; pause; m++) &#123;</span><br><span class="line">ctemp[N.data[m<span class="number">-1</span>].j<span class="number">-1</span>] += M.data[p<span class="number">-1</span>].e*N.data[m<span class="number">-1</span>].e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N.nu; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (ctemp[i] != <span class="number">0</span>) &#123;</span><br><span class="line">T-&gt;data[T-&gt;tu].i = arow;</span><br><span class="line">T-&gt;data[T-&gt;tu].j = i + <span class="number">1</span>;</span><br><span class="line">T-&gt;data[T-&gt;tu].e = ctemp[i];</span><br><span class="line">T-&gt;tu++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">T-&gt;num = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        T-&gt;cpot = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="built_in">memset</span>(T-&gt;num, <span class="number">0x0</span>, T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="built_in">memset</span>(T-&gt;cpot, <span class="number">0x0</span>, T-&gt;nu*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T-&gt;tu; i++) &#123;</span><br><span class="line">                T-&gt;num[T-&gt;data[i].j - <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        T-&gt;cpot[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; T-&gt;nu; i++) &#123;</span><br><span class="line">                T-&gt;cpot[i] = T-&gt;cpot[i<span class="number">-1</span>] + T-&gt;num[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Matrix.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">Matrix M;</span><br><span class="line">Matrix N;</span><br><span class="line">Matrix A;</span><br><span class="line">CreateMatrix(&amp;M);</span><br><span class="line">CreateMatrix(&amp;N);</span><br><span class="line">PrintMatrix(M);</span><br><span class="line">PrintMatrix(N);</span><br><span class="line">TransposeMatrix(M,&amp;A);</span><br><span class="line">PrintMatrix(A);</span><br><span class="line">Matrix T;</span><br><span class="line">MultiMatrix(M,N,&amp;T);</span><br><span class="line">PrintMatrix(T);</span><br><span class="line">DestroyMatrix(&amp;A);</span><br><span class="line">DestroyMatrix(&amp;T);</span><br><span class="line">DestroyMatrix(&amp;M);</span><br><span class="line">DestroyMatrix(&amp;N);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">object = main.o Matrix.o</span><br><span class="line"></span><br><span class="line">test : <span class="variable">$(object)</span></span><br><span class="line">gcc -g -Wall -o test <span class="variable">$(object)</span></span><br><span class="line"></span><br><span class="line">main.o : Matrix.h</span><br><span class="line">Matrix.o : Matrix.h</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf *.o</span><br></pre></td></tr></table></figure><h2 id="运行检查："><a href="#运行检查：" class="headerlink" title="运行检查："></a>运行检查：</h2><h3 id="用于测试的矩阵："><a href="#用于测试的矩阵：" class="headerlink" title="用于测试的矩阵："></a>用于测试的矩阵：</h3><p>$$<br>{M=} \left[<br> \begin{matrix}<br>   3 &amp; 0 &amp; 0 &amp; 5\<br>   0&amp;-1 &amp; 0 &amp; 0 \<br>   2 &amp; 0 &amp; 0 &amp; 0<br>  \end{matrix}<br>  \right] \tag{a}<br>$$<br>$$<br>{N=} \left[<br> \begin{matrix}<br>   0 &amp; 2 \<br>   1 &amp; 0  \<br>   -2 &amp; 4 \<br>   0 &amp; 0<br>  \end{matrix}<br>  \right] \tag{b}<br>$$</p><h4 id="M-data"><a href="#M-data" class="headerlink" title="M.data"></a>M.data</h4><table><thead><tr><th>i</th><th>j</th><th>e</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>3</td></tr><tr><td>1</td><td>4</td><td>5</td></tr><tr><td>2</td><td>2</td><td>-1</td></tr><tr><td>3</td><td>1</td><td>2</td></tr></tbody></table><h4 id="N-data"><a href="#N-data" class="headerlink" title="N.data"></a>N.data</h4><table><thead><tr><th>i</th><th>j</th><th>e</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2</td></tr><tr><td>2</td><td>1</td><td>1</td></tr><tr><td>3</td><td>1</td><td>-2</td></tr><tr><td>3</td><td>2</td><td>4</td></tr></tbody></table><h4 id="M-N结果："><a href="#M-N结果：" class="headerlink" title="M*N结果："></a>M*N结果：</h4><table><thead><tr><th>i</th><th>j</th><th>e</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>6</td></tr><tr><td>2</td><td>1</td><td>-1</td></tr><tr><td>3</td><td>2</td><td>4</td></tr></tbody></table><h4 id="输入文件input-txt"><a href="#输入文件input-txt" class="headerlink" title="输入文件input.txt"></a>输入文件input.txt</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span> -<span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span> -<span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="输出文件test-txt"><a href="#输出文件test-txt" class="headerlink" title="输出文件test.txt"></a>输出文件test.txt</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>行<span class="number">4</span>列<span class="number">4</span>个非零元素。</span><br><span class="line">行  列  元素值</span><br><span class="line"> <span class="number">1</span>   <span class="number">1</span>       <span class="number">3</span></span><br><span class="line"> <span class="number">1</span>   <span class="number">4</span>       <span class="number">5</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">2</span>      <span class="number">-1</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">1</span>       <span class="number">2</span></span><br><span class="line">第<span class="number">1</span>行的第一个非零元素是本矩阵第<span class="number">1</span>个元素</span><br><span class="line">第<span class="number">2</span>行的第一个非零元素是本矩阵第<span class="number">3</span>个元素</span><br><span class="line">第<span class="number">3</span>行的第一个非零元素是本矩阵第<span class="number">4</span>个元素</span><br><span class="line">第<span class="number">1</span>列的元素个数为<span class="number">2</span></span><br><span class="line">第<span class="number">2</span>列的元素个数为<span class="number">1</span></span><br><span class="line">第<span class="number">3</span>列的元素个数为<span class="number">0</span></span><br><span class="line">第<span class="number">4</span>列的元素个数为<span class="number">1</span></span><br><span class="line">第<span class="number">1</span>列的第一个元素的位置是<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>列的第一个元素的位置是<span class="number">3</span></span><br><span class="line">第<span class="number">3</span>列的第一个元素的位置是<span class="number">4</span></span><br><span class="line">第<span class="number">4</span>列的第一个元素的位置是<span class="number">4</span></span><br><span class="line"><span class="number">4</span>行<span class="number">2</span>列<span class="number">4</span>个非零元素。</span><br><span class="line">行  列  元素值</span><br><span class="line"> <span class="number">1</span>   <span class="number">2</span>       <span class="number">2</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">1</span>       <span class="number">1</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">1</span>      <span class="number">-2</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">2</span>       <span class="number">4</span></span><br><span class="line">第<span class="number">1</span>行的第一个非零元素是本矩阵第<span class="number">1</span>个元素</span><br><span class="line">第<span class="number">2</span>行的第一个非零元素是本矩阵第<span class="number">2</span>个元素</span><br><span class="line">第<span class="number">3</span>行的第一个非零元素是本矩阵第<span class="number">3</span>个元素</span><br><span class="line">第<span class="number">4</span>行的第一个非零元素是本矩阵第<span class="number">5</span>个元素</span><br><span class="line">第<span class="number">1</span>列的元素个数为<span class="number">2</span></span><br><span class="line">第<span class="number">2</span>列的元素个数为<span class="number">2</span></span><br><span class="line">第<span class="number">1</span>列的第一个元素的位置是<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>列的第一个元素的位置是<span class="number">3</span></span><br><span class="line"><span class="number">4</span>行<span class="number">3</span>列<span class="number">4</span>个非零元素。</span><br><span class="line">行  列  元素值</span><br><span class="line"> <span class="number">1</span>   <span class="number">1</span>       <span class="number">3</span></span><br><span class="line"> <span class="number">1</span>   <span class="number">3</span>       <span class="number">2</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">2</span>      <span class="number">-1</span></span><br><span class="line"> <span class="number">4</span>   <span class="number">1</span>       <span class="number">5</span></span><br><span class="line">第<span class="number">1</span>行的第一个非零元素是本矩阵第<span class="number">1</span>个元素</span><br><span class="line">第<span class="number">2</span>行的第一个非零元素是本矩阵第<span class="number">0</span>个元素</span><br><span class="line">第<span class="number">3</span>行的第一个非零元素是本矩阵第<span class="number">0</span>个元素</span><br><span class="line">第<span class="number">4</span>行的第一个非零元素是本矩阵第<span class="number">0</span>个元素</span><br><span class="line">第<span class="number">1</span>列的元素个数为<span class="number">2</span></span><br><span class="line">第<span class="number">2</span>列的元素个数为<span class="number">1</span></span><br><span class="line">第<span class="number">3</span>列的元素个数为<span class="number">1</span></span><br><span class="line">第<span class="number">1</span>列的第一个元素的位置是<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>列的第一个元素的位置是<span class="number">3</span></span><br><span class="line">第<span class="number">3</span>列的第一个元素的位置是<span class="number">4</span></span><br><span class="line"><span class="number">3</span>行<span class="number">2</span>列<span class="number">3</span>个非零元素。</span><br><span class="line">行  列  元素值</span><br><span class="line"> <span class="number">1</span>   <span class="number">2</span>       <span class="number">6</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">1</span>      <span class="number">-1</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">2</span>       <span class="number">4</span></span><br><span class="line">第<span class="number">1</span>行的第一个非零元素是本矩阵第<span class="number">1</span>个元素</span><br><span class="line">第<span class="number">2</span>行的第一个非零元素是本矩阵第<span class="number">2</span>个元素</span><br><span class="line">第<span class="number">3</span>行的第一个非零元素是本矩阵第<span class="number">3</span>个元素</span><br><span class="line">第<span class="number">1</span>列的元素个数为<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>列的元素个数为<span class="number">2</span></span><br><span class="line">第<span class="number">1</span>列的第一个元素的位置是<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>列的第一个元素的位置是<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="linux运行程序确实舒服，直接命令行就可以读取文本"><a href="#linux运行程序确实舒服，直接命令行就可以读取文本" class="headerlink" title="linux运行程序确实舒服，直接命令行就可以读取文本"></a>linux运行程序确实舒服，直接命令行就可以读取文本</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">#运行makefile</span><br><span class="line">./test &lt; <span class="selector-tag">input</span><span class="selector-class">.txt</span> &gt; test.txt</span><br><span class="line">#运行生成的可执行文件test</span><br><span class="line">make clean</span><br><span class="line">#清理.o文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;主要实现的难点在于稀疏矩阵的转置以及矩阵乘法。&lt;/li&gt;
&lt;li&gt;对用到的数据结构定义不懂的可参考严蔚敏老师的数据结构书籍，这里讲严老师讲的两种数据结构&lt;em&gt;三元组结构&lt;/em&gt; 和&lt;em&gt;行逻辑结构&lt;/em&gt; 整合到一起。&lt;/li&gt;
&lt;li&gt;稀疏矩阵是线性结
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://yoursite.com/2019/07/04/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/04/KMP算法/</id>
    <published>2019-07-04T05:47:16.000Z</published>
    <updated>2019-07-05T14:29:56.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h2><ul><li>该算法的思路是设置两个i， j指针，依次遍历不等则回溯</li><li>算法思路简单但时间复杂度高达o(length1 * length2）</li></ul><h4 id="算法比较简单，因此直接看实现："><a href="#算法比较简单，因此直接看实现：" class="headerlink" title="算法比较简单，因此直接看实现："></a>算法比较简单，因此直接看实现：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = S.length();</span><br><span class="line">        <span class="keyword">int</span> len2 = T.length();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; <span class="comment">//set two pointers to S and T</span></span><br><span class="line">        <span class="keyword">while</span> (i != len1 &amp;&amp; j != len2) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S[i] == T[j]) &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                        j++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                        j = <span class="number">0</span>;</span><br><span class="line">                        i = i - j + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == len2)</span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接下来看KMP的实现思路："><a href="#接下来看KMP的实现思路：" class="headerlink" title="接下来看KMP的实现思路："></a>接下来看KMP的实现思路：</h2><h3 id="next函数："><a href="#next函数：" class="headerlink" title="next函数："></a>next函数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(<span class="built_in">string</span> T, <span class="keyword">int</span> **next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = T.length();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">(*next)[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span> || T[i - <span class="number">1</span>] == T[j - <span class="number">1</span>]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">(*next)[i - <span class="number">1</span>] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j = (*next)[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP函数："><a href="#KMP函数：" class="headerlink" title="KMP函数："></a>KMP函数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index_KMP</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T, <span class="keyword">int</span> *next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len1 = S.length();</span><br><span class="line"><span class="keyword">int</span> len2 = T.length();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= len1 &amp;&amp; j &lt;= len2) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span> || S[i - <span class="number">1</span>] == T[j - <span class="number">1</span>]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j = next[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j - <span class="number">1</span> == len2)</span><br><span class="line"><span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改进后的index函数："><a href="#改进后的index函数：" class="headerlink" title="改进后的index函数："></a>改进后的index函数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_nextval</span><span class="params">(<span class="built_in">string</span> T, <span class="keyword">int</span> **next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = T.length();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">(*next)[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span> || T[i - <span class="number">1</span>] == T[j - <span class="number">1</span>]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">(*next)[i - <span class="number">1</span>] = j;</span><br><span class="line"><span class="keyword">if</span> (T[i - <span class="number">1</span>] == T[j - <span class="number">1</span>])</span><br><span class="line">(*next)[i - <span class="number">1</span>] = (*next)[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j = (*next)[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;朴素算法&quot;&gt;&lt;a href=&quot;#朴素算法&quot; class=&quot;headerlink&quot; title=&quot;朴素算法&quot;&gt;&lt;/a&gt;朴素算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;该算法的思路是设置两个i， j指针，依次遍历不等则回溯&lt;/li&gt;
&lt;li&gt;算法思路简单但时间复杂度高达o(len
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>c语言实现string &amp; 二级指针的用法</title>
    <link href="http://yoursite.com/2019/07/04/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0string-%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E7%9A%84%E7%94%A8%E6%B3%95a/"/>
    <id>http://yoursite.com/2019/07/04/c语言实现string-二级指针的用法a/</id>
    <published>2019-07-04T05:44:30.000Z</published>
    <updated>2019-07-05T14:29:23.912Z</updated>
    
    <content type="html"><![CDATA[<ul><li>接口参考严蔚敏老师的数据结构课本</li><li>这个类bug de了好长时间，在于二级指针的使用（C语言学的不好用指针真的伤）</li><li>实现环境为linux</li></ul><h3 id="下面先讲一点关于二级指针的知识点"><a href="#下面先讲一点关于二级指针的知识点" class="headerlink" title="下面先讲一点关于二级指针的知识点"></a>下面先讲一点关于二级指针的知识点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span>** x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *x = <span class="string">"bbb"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *y = <span class="string">"aaa"</span>;</span><br><span class="line">    change(&amp;y);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%s"</span>,y);    </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>看一下这个函数，其输出为bbb；这是正确的结果</strong></p><p><em>再看下面一个函数：</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span>* x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *x = <span class="string">"bbb"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *y = <span class="string">"aaa"</span>;</span><br><span class="line">    change(y);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%s"</span>,y);    </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个函数的输出为aaa，结果不是我们想要的</strong></p><p>其实这个很容易理解，我们把char* 想象成string则二级指针则变成了string*，也就是指向字符串的一级指针</p><h2 id="下面接着看String的实现："><a href="#下面接着看String的实现：" class="headerlink" title="下面接着看String的实现："></a>下面接着看String的实现：</h2><h3 id="String-h"><a href="#String-h" class="headerlink" title="String.h"></a>String.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STRING_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRING_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> *ch;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125; String;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*generate a string whose value is equal to chars*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StrAssign</span><span class="params">(String *S, <span class="keyword">char</span> **chars)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return the length of the string*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">Length</span><span class="params">(String S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*compare S1 and S2 and if S1 &gt; S2 return 1 else return 0*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Compare</span><span class="params">(String S1, String S2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*empty the string*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearString</span><span class="params">(String *S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*concat S1 and S2 and return the value using T*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Concat</span><span class="params">(String *S, String S1, String S2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return a substring of S whose length is len from the position of pos*/</span></span><br><span class="line"><span class="function">String <span class="title">SubString</span><span class="params">(String S, <span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*print the string*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(String S)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="String-c"><a href="#String-c" class="headerlink" title="String.c"></a>String.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"String.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StrAssign</span><span class="params">(String *S, <span class="keyword">char</span> **chars)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*if(S-&gt;ch) &#123;</span></span><br><span class="line"><span class="comment">S-&gt;length = 0;</span></span><br><span class="line"><span class="comment">free(S-&gt;ch);</span></span><br><span class="line"><span class="comment">S-&gt;ch = NULL;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> *c;</span><br><span class="line"><span class="comment">//i = strlen(*chars);</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>, c = *chars; *c; i++, c++);</span><br><span class="line"><span class="comment">//printf("%d\n",i);</span></span><br><span class="line"><span class="keyword">if</span> (!i) &#123;</span><br><span class="line">S-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">S-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">S-&gt;ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(i * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">S-&gt;ch[j] = (*chars)[j];</span><br><span class="line">&#125;</span><br><span class="line">S-&gt;length = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">Length</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*compare S1 and S2 and if S1 &gt; S2 return 1 else return 0*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Compare</span><span class="params">(String S1, String S2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; S1.length || i &lt; S2.length; i++, j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (S1.ch[i] &gt; S2.ch[j]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (S1.ch[i] &lt; S2.ch[j]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(S1.length &gt; S2.length) </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*empty the string*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearString</span><span class="params">(String *S)</span> </span>&#123;</span><br><span class="line">S-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(S-&gt;ch);</span><br><span class="line">S-&gt;ch = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*concat S1 and S2 and return the value using T*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Concat</span><span class="params">(String *S, String S1, String S2)</span> </span>&#123;</span><br><span class="line">S-&gt;ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((S1.length + S2.length) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">S-&gt;length = S1.length + S2.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S1.length; i++) &#123;</span><br><span class="line">S-&gt;ch[i] = S1.ch[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S2.length; i++) &#123;</span><br><span class="line">S-&gt;ch[i + S1.length] = S2.ch[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*return a substring of S whose length is len from the position of pos*/</span></span><br><span class="line"><span class="function">String <span class="title">SubString</span><span class="params">(String S, <span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">String T;</span><br><span class="line">T.length = len;</span><br><span class="line">T.ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos - <span class="number">1</span>; i &lt; pos - <span class="number">1</span> + len; i++) &#123;</span><br><span class="line">T.ch[i - pos + <span class="number">1</span>] = S.ch[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.ch == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"null"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, S.ch[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"String.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">String S, S1, S2;</span><br><span class="line"><span class="keyword">char</span> *m = <span class="string">"ef"</span>;</span><br><span class="line">StrAssign(&amp;S1,&amp;m);</span><br><span class="line"><span class="comment">//printf("%d\n",S1.length);</span></span><br><span class="line"><span class="keyword">char</span> *a = <span class="string">"abced"</span>;</span><br><span class="line">StrAssign(&amp;S, &amp;a);</span><br><span class="line">Traverse(S);</span><br><span class="line"><span class="comment">//printf("%d\n",S.length);</span></span><br><span class="line"><span class="comment">//printf("%p\n",m);</span></span><br><span class="line"><span class="comment">//printf("%p\n",a);</span></span><br><span class="line">Traverse(S1);</span><br><span class="line">Concat(&amp;S2, S, S1);</span><br><span class="line">Traverse(S2);</span><br><span class="line">String s = SubString(S2, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Traverse(s);</span><br><span class="line"><span class="keyword">if</span> (Compare(S1, S2))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"S1 &gt; S2\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"S1 &lt;= S2\n"</span>);</span><br><span class="line">ClearString(&amp;S);</span><br><span class="line">ClearString(&amp;s);</span><br><span class="line">ClearString(&amp;S1);</span><br><span class="line">ClearString(&amp;S2);</span><br><span class="line">Traverse(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">object = main.o String.o</span><br><span class="line"></span><br><span class="line">test : <span class="variable">$(object)</span></span><br><span class="line">gcc -g -Wall -o test <span class="variable">$(object)</span></span><br><span class="line"></span><br><span class="line">main.o : String.h</span><br><span class="line">String.o : String.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf *.o</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;接口参考严蔚敏老师的数据结构课本&lt;/li&gt;
&lt;li&gt;这个类bug de了好长时间，在于二级指针的使用（C语言学的不好用指针真的伤）&lt;/li&gt;
&lt;li&gt;实现环境为linux&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;下面先讲一点关于二级指针的知识点&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>c语言实现栈的动态顺序存储</title>
    <link href="http://yoursite.com/2019/07/04/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%A0%88%E7%9A%84%E5%8A%A8%E6%80%81%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2019/07/04/c语言实现栈的动态顺序存储/</id>
    <published>2019-07-04T05:42:29.000Z</published>
    <updated>2019-07-05T14:28:40.179Z</updated>
    
    <content type="html"><![CDATA[<ul><li>接口参考严蔚敏老师的数据结构课本</li><li>实现环境为linux<h3 id="Stack-h"><a href="#Stack-h" class="headerlink" title="Stack.h"></a>Stack.h</h3></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ======== ADT the representation of the STACK(Sequential Storage) ======== //</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Elem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Elem *base;</span><br><span class="line">Elem *top;</span><br><span class="line"><span class="keyword">int</span> stacksize;</span><br><span class="line"><span class="comment">//int length;</span></span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Initialize the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(Stack *S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//destroy the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyStack</span><span class="params">(Stack *S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//clear the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearStack</span><span class="params">(Stack *S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//determine if the stack is empty</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return the length of the stack</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">Length</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return the top of the stack</span></span><br><span class="line"><span class="function">Elem <span class="title">Top</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//push e on the stack</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(Stack *S, Elem e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pop the stack</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(Stack *S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Stack-c"><a href="#Stack-c" class="headerlink" title="Stack.c"></a>Stack.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Stack.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//Initialize the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(Stack *S)</span> </span>&#123;</span><br><span class="line">S-&gt;base = (Elem*)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="keyword">sizeof</span>(Elem));</span><br><span class="line"><span class="built_in">memset</span>(S-&gt;base, <span class="number">0</span>, STACK_INIT_SIZE * <span class="keyword">sizeof</span>(Elem));</span><br><span class="line"><span class="keyword">if</span> (!S-&gt;base)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">S-&gt;top = S-&gt;base;</span><br><span class="line">S-&gt;stacksize = STACK_INIT_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//destroy the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyStack</span><span class="params">(Stack *S)</span> </span>&#123;</span><br><span class="line"><span class="built_in">free</span>(S-&gt;base);</span><br><span class="line">S-&gt;stacksize = <span class="number">0</span>;</span><br><span class="line">S-&gt;base = <span class="literal">NULL</span>;</span><br><span class="line">S-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//clear the stack</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearStack</span><span class="params">(Stack *S)</span> </span>&#123;</span><br><span class="line">S-&gt;top = S-&gt;base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//determine if the stack is empty</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.top == S.base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return the length of the stack</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">Length</span><span class="params">(Stack S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.top - S.base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return the top of the stack</span></span><br><span class="line"><span class="function">Elem <span class="title">Top</span><span class="params">(Stack S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(S.top - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//push e on the stack</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(Stack *S, Elem e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S-&gt;top - S-&gt;base + <span class="number">1</span> &gt;= S-&gt;stacksize) &#123;</span><br><span class="line">S-&gt;base = (Elem*)<span class="built_in">realloc</span>(S-&gt;base, (STACK_INIT_SIZE + STACKINCREMENT) * <span class="keyword">sizeof</span>(Elem));</span><br><span class="line">S-&gt;stacksize += STACKINCREMENT;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"increment\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!S-&gt;base)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"></span><br><span class="line">*(S-&gt;top) = e;</span><br><span class="line">S-&gt;top++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//pop the stack</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(Stack *S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (IsEmpty(*S)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fail\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">&#125;</span><br><span class="line">S-&gt;top--;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Stack.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">Stack S1;</span><br><span class="line">InitStack(&amp;S1);</span><br><span class="line">Push(&amp;S1,<span class="number">1</span>);</span><br><span class="line">Push(&amp;S1,<span class="number">2</span>);</span><br><span class="line">Push(&amp;S1,<span class="number">3</span>);</span><br><span class="line">Push(&amp;S1,<span class="number">4</span>);</span><br><span class="line">Push(&amp;S1,<span class="number">5</span>);</span><br><span class="line">Stack S2;</span><br><span class="line">        InitStack(&amp;S2);</span><br><span class="line">        Push(&amp;S2,<span class="number">1</span>);</span><br><span class="line">        Push(&amp;S2,<span class="number">2</span>);</span><br><span class="line">        Push(&amp;S2,<span class="number">3</span>);</span><br><span class="line">        Push(&amp;S2,<span class="number">4</span>);</span><br><span class="line">        Push(&amp;S2,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">while</span> (!IsEmpty(S2)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Top(S2));</span><br><span class="line">Pop(&amp;S2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Pop(&amp;S2);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the length of the stack is %d\n"</span>,Length(S1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the top of the stack is %d\n"</span>,Top(S1));</span><br><span class="line">Pop(&amp;S1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the top of the stack is %d\n"</span>,Top(S1));</span><br><span class="line">DestroyStack(&amp;S1);</span><br><span class="line">DestroyStack(&amp;S2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">object = main.o Stack.o</span><br><span class="line"></span><br><span class="line">test : <span class="variable">$(object)</span></span><br><span class="line">gcc -g -Wall -o test <span class="variable">$(object)</span> -std=c99</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line"></span><br><span class="line">clean : </span><br><span class="line">rm -rf *.o</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;接口参考严蔚敏老师的数据结构课本&lt;/li&gt;
&lt;li&gt;实现环境为linux&lt;h3 id=&quot;Stack-h&quot;&gt;&lt;a href=&quot;#Stack-h&quot; class=&quot;headerlink&quot; title=&quot;Stack.h&quot;&gt;&lt;/a&gt;Stack.h&lt;/h3&gt;&lt;/li&gt;
&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
